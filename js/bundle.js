!function(t){function e(r){if(i[r])return i[r].exports;var a=i[r]={i:r,l:!1,exports:{}};return t[r].call(a.exports,a,a.exports,e),a.l=!0,a.exports}var i={};e.m=t,e.c=i,e.d=function(t,i,r){e.o(t,i)||Object.defineProperty(t,i,{configurable:!1,enumerable:!0,get:r})},e.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(i,"a",i),i},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=5)}([function(t,e,i){"use strict";var r={type:"mobile",event:{mobile:"touchstart",desktop:"mousedown"}},a=0,s={dark:"#232323"};e.clearCanvas=function(t,e,i){e&&(t.context.fillStyle=i,t.context.fillRect(0,0,t.w,t.h))},e.geteColors=function(){return s},e.getStatus=function(){return r},e.setStatus=function(t){r.type=t},e.debug=function(t,e,i){e="white",i.save(),t.forEach(function(t,r){i.globalCompositeOperation="source-over",i.strokeStyle=e,i.beginPath(),i.arc(t.x,t.y,2,0,2*Math.PI),i.stroke()}),i.restore()},e.getRandom=function(){return Math.abs(Math.random()+Math.random()+Math.random()+Math.random()+Math.random()+Math.random()-6)/6},e.initSeed=function(t){(a=t%2147483647)<=0&&(a+=2147483646)}},function(t,e,i){"use strict";var r=i(0),a=function(t){return t&&t.__esModule?t:{default:t}}(r),s="";e.init=function(){return s=window.clientInformation.userAgent.toString().search("Chrome"),s>0?(a.default.setStatus("desktop"),a.default.getStatus().event.desktop):(a.default.setStatus("mobile"),a.default.getStatus().event.mobile)},e.addEvent=function(t,e){t.addEventListener(_App.eventType,e,!0)},e.removeEvent=function(t,e){t.removeEventListener(_App.eventType,e,!0)}},function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function a(){n()}function s(){console.log("next Section called, time to remove this pos: ",H),q.kill(),H++,n()}function n(){var t=W.find(function(t){return t.pos==H});q=t.section,q.start()}var o=i(0),h=r(o),l=i(6),p=r(l),c=i(1),m=r(c),f=i(7),d=r(f),u=i(11),y=r(u),g=i(13),x=r(g),v=i(14),k=r(v),b=i(15),E=r(b),P=i(16),A=r(P),_=i(17),S=r(_),D=i(18),T=r(D),C=i(19),M=r(C),w=i(20),F=r(w),B=new y.default,V=new d.default,G=new x.default,I=new k.default,O=new E.default,R=new A.default,L=new S.default,j=new T.default,z=new M.default,N=new F.default,H=0,q={name:"none"},W=[{pos:0,name:"tapper",title:"chapter one",verb:"tap",section:V,instructions:"tap to proceed",chapter:R},{pos:1,name:"popper",title:"chapter two",verb:"pop",section:B,instructions:"pop to proceed",chapter:L},{pos:2,name:"delayedTap",title:"chapter three",verb:"wait",section:G,instructions:"tap 3 seconds apart to proceed",chapter:j},{pos:3,name:"keyboard",title:"chapter four",verb:"play",section:I,instructions:"play the song to proceed",chapter:z},{pos:4,name:"shake",title:"chapter five",verb:"shake",section:O,instructions:"coming soon",chapter:N}];e.init=function(){for(var t=0;t<W.length;t++){var e=W[t].section;e.init(t),e=W[t].chapter,null!=e&&e.init()}_App.eventType=m.default.init(),this.erase=!0,this.bgColor=h.default.geteColors().dark,this.instructions=new p.default,a()},e.getSectionList=function(){return W},e.proceed=function(){s()},e.setInstructions=function(){var t=W.find(function(t){return t.pos==H});this.instructions.show(t.instructions)},e.update=function(){this.erase&&h.default.clearCanvas(_App,!0,this.bgColor),this.timer=requestAnimationFrame(this.update.bind(this))}},function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var s=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),n=i(1),o=r(n),h=i(2),l=r(h),p=i(0),c=r(p),m=i(8),f=r(m),d=function(){function t(e){a(this,t)}return s(t,[{key:"init",value:function(t){this.pos=t,this.chapter=new f.default,this.context=_App.context,this.canvas=_App.context.canvas,this.chapterDiv=document.getElementById("chapterHeader"),this.labelDiv=this.chapterDiv.getElementsByClassName("label")[0],this.instructionsDiv=document.getElementById("instructions"),this.instructionTextDiv=this.instructionsDiv.getElementsByClassName("instructiontext")[0],this.colors={light:"#efefef",med:"#666",dark:"#333"}}},{key:"start",value:function(){this.chapter.show(this),this.showCanvasBinder=this.showCanvas.bind(this),o.default.addEvent(this.chapterDiv,this.showCanvasBinder)}},{key:"setBG",value:function(){l.default.bgColor=this.colors.dark}},{key:"addCanvasClick",value:function(){this.binder=this.clickHandler.bind(this),o.default.addEvent(_App.context.canvas,this.binder)}},{key:"showCanvas",value:function(t){this.setBG(),this.chapterDiv.classList.remove("show"),this.chapterDiv.classList.add("hide"),this.instructionsDiv.classList.remove("hide"),this.instructionsDiv.classList.add("show"),o.default.removeEvent(this.chapterDiv,this.showCanvasBinder),l.default.setInstructions(),this.update()}},{key:"clickHandler",value:function(t){t.preventDefault();var e="";e="mobile"==c.default.getStatus().type?t.targetTouches[0]:t,this.mouse={x:e.clientX,y:e.clientY}}},{key:"finished",value:function(t){this.kill(),l.default.proceed()}},{key:"erase",value:function(t){l.default.erase=t}},{key:"kill",value:function(){o.default.removeEvent(_App.context.canvas,this.binder),cancelAnimationFrame(this.timer),this.timer=null}}]),t}();e.default=d},function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var s=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),n=i(1),o=(r(n),i(2)),h=(r(o),i(0)),l=(r(h),function(){function t(e){a(this,t),this.params={x:0}}return s(t,[{key:"init",value:function(){this.setup()}},{key:"getParams",value:function(){return this.params}},{key:"setup",value:function(){this.div=document.querySelector("#chapterHeader .anim"),this.params={container:this.div,renderer:"svg",autoplay:!0,loop:!0,animationData:""}}}]),t}());e.default=l},function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var a=i(0),s=(r(a),i(2)),n=r(s),o={init:function(){this.context=document.querySelector("#main").getContext("2d"),this.updateSize(),n.default.init(),n.default.update()},loop:function(){},updateSize:function(){o.context.canvas.width=document.documentElement.clientWidth,o.context.canvas.height=document.documentElement.clientHeight,o.w=o.context.canvas.width,o.h=o.context.canvas.height}};window.onload=function(){window._App=o,window.addEventListener("resize",o.updateSize),o.init()}},function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var s=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),n=i(1),o=(r(n),i(2)),h=(r(o),i(0)),l=(r(h),function(){function t(){a(this,t),this.div=document.getElementById("instructions")}return s(t,[{key:"show",value:function(t){document.querySelector(".instructiontext").innerHTML=t,this.div.classList.add("show")}},{key:"hide",value:function(){this.div.classList.add("hide")}},{key:"remove",value:function(){this.div.classList.remove("cursor"),this.div.classList.add("ignored")}}]),t}());e.default=l},function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function n(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),h=function t(e,i,r){null===e&&(e=Function.prototype);var a=Object.getOwnPropertyDescriptor(e,i);if(void 0===a){var s=Object.getPrototypeOf(e);return null===s?void 0:t(s,i,r)}if("value"in a)return a.value;var n=a.get;if(void 0!==n)return n.call(r)},l=i(3),p=r(l),c=i(1),m=r(c),f=i(0),d=(r(f),i(10)),u=r(d),y=function(t){function e(){return a(this,e),s(this,(e.__proto__||Object.getPrototypeOf(e)).call(this))}return n(e,t),o(e,[{key:"init",value:function(t){h(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this,t),this.n="tapper",this.finished=!1,this.iteration=0,this.totalIterations=111,this.tgt=_App.w/2,this.curTgt=0,this.colors={light:"#efefef",bright:"#C22A42",med:"#666",dark:"#31040E"}}},{key:"start",value:function(){h(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"start",this).call(this)}},{key:"showCanvas",value:function(){this.binder=this.clickHandler.bind(this),m.default.addEvent(_App.context.canvas,this.binder),h(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"showCanvas",this).call(this)}},{key:"clickHandler",value:function(t){this.finished=!0,h(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"clickHandler",this).call(this,t)}},{key:"update",value:function(){if(console.log("updateee"),this.finished)this.makePainting();else if(this.context.fillStyle=this.colors.bright,this.context.fillRect(Math.random()*_App.w,Math.random()*_App.h,20,20),this.iteration>=this.totalIterations)return;this.timer=requestAnimationFrame(this.update.bind(this))}},{key:"makePainting",value:function(){h(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"erase",this).call(this,!1),this.iteration++,this.iteration<this.totalIterations?(this.curTgt=u.default.easeInSine(this.iteration,this.curTgt,this.tgt,this.totalIterations),this.curTgt=Math.round(100*this.curTgt)/100,_App.context.strokeStyle=this.colors.bright,_App.strokeWidth=Math.ceil(4*Math.random()),_App.context.beginPath(),_App.context.arc(this.mouse.x,this.mouse.y,this.curTgt,0,2*Math.PI),_App.context.stroke()):(h(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"erase",this).call(this,!0),this.finished=!this.finished,cancelAnimationFrame(this.timer),this.kill(),h(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"finished",this).call(this))}},{key:"kill",value:function(){h(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"kill",this).call(this),m.default.removeEvent(_App.context.canvas,this.binder),this.binder=null}}]),e}(p.default);e.default=y},function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var s=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),n=i(2),o=r(n),h=i(9),l=r(h),p=function(){function t(e){a(this,t),this.timer="",this.n="",this.context=_App.context,this.canvas=_App.context.canvas,this.instructionsDiv=document.getElementById("instructions"),this.chapterDiv=document.getElementById("chapterHeader"),this.chapterDiv=document.getElementById("chapterHeader"),this.labelDiv=this.chapterDiv.getElementsByClassName("label")[0],this.titleDiv=this.chapterDiv.getElementsByClassName("title")[0],this.animDiv=this.chapterDiv.getElementsByClassName("anim")[0]}return s(t,[{key:"show",value:function(t){var e=o.default.getSectionList();e=e[t.pos];var i=e.chapter.getParams();this.removeExisting(),l.default.loadAnimation(i),this.titleDiv.innerHTML=e.title.toUpperCase(),this.labelDiv.innerHTML=e.verb,this.chapterDiv.classList.remove("hide"),this.chapterDiv.classList.add("show"),this.instructionsDiv.classList.remove("show"),this.instructionsDiv.classList.add("hide")}},{key:"removeExisting",value:function(){var t=this.animDiv.querySelector("svg");t&&t.parentNode.removeChild(t)}}]),t}();e.default=p},function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_RESULT__;"undefined"!=typeof navigator&&function(t,e){void 0!==(__WEBPACK_AMD_DEFINE_RESULT__=function(){return e(t)}.call(exports,__webpack_require__,exports,module))&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}(window||{},function(window){"use strict";function ProjectInterface(){return{}}function roundValues(t){bm_rnd=t?Math.round:function(t){return t}}function styleDiv(t){t.style.position="absolute",t.style.top=0,t.style.left=0,t.style.display="block",t.style.transformOrigin=t.style.webkitTransformOrigin="0 0",t.style.backfaceVisibility=t.style.webkitBackfaceVisibility="visible",t.style.transformStyle=t.style.webkitTransformStyle=t.style.mozTransformStyle="preserve-3d"}function BMEnterFrameEvent(t,e,i,r){this.type=t,this.currentTime=e,this.totalTime=i,this.direction=r<0?-1:1}function BMCompleteEvent(t,e){this.type=t,this.direction=e<0?-1:1}function BMCompleteLoopEvent(t,e,i,r){this.type=t,this.currentLoop=i,this.totalLoops=e,this.direction=r<0?-1:1}function BMSegmentStartEvent(t,e,i){this.type=t,this.firstFrame=e,this.totalFrames=i}function BMDestroyEvent(t,e){this.type=t,this.target=e}function BMRenderFrameErrorEvent(t,e){this.type="renderFrameError",this.nativeError=t,this.currentTime=e}function BMConfigErrorEvent(t){this.type="configError",this.nativeError=t}function BMAnimationConfigErrorEvent(t,e){this.type=t,this.nativeError=e,this.currentTime=currentTime}function HSVtoRGB(t,e,i){var r,a,s,n,o,h,l,p;switch(n=Math.floor(6*t),o=6*t-n,h=i*(1-e),l=i*(1-o*e),p=i*(1-(1-o)*e),n%6){case 0:r=i,a=p,s=h;break;case 1:r=l,a=i,s=h;break;case 2:r=h,a=i,s=p;break;case 3:r=h,a=l,s=i;break;case 4:r=p,a=h,s=i;break;case 5:r=i,a=h,s=l}return[r,a,s]}function RGBtoHSV(t,e,i){var r,a=Math.max(t,e,i),s=Math.min(t,e,i),n=a-s,o=0===a?0:n/a,h=a/255;switch(a){case s:r=0;break;case t:r=e-i+n*(e<i?6:0),r/=6*n;break;case e:r=i-t+2*n,r/=6*n;break;case i:r=t-e+4*n,r/=6*n}return[r,o,h]}function addSaturationToRGB(t,e){var i=RGBtoHSV(255*t[0],255*t[1],255*t[2]);return i[1]+=e,i[1]>1?i[1]=1:i[1]<=0&&(i[1]=0),HSVtoRGB(i[0],i[1],i[2])}function addBrightnessToRGB(t,e){var i=RGBtoHSV(255*t[0],255*t[1],255*t[2]);return i[2]+=e,i[2]>1?i[2]=1:i[2]<0&&(i[2]=0),HSVtoRGB(i[0],i[1],i[2])}function addHueToRGB(t,e){var i=RGBtoHSV(255*t[0],255*t[1],255*t[2]);return i[0]+=e/360,i[0]>1?i[0]-=1:i[0]<0&&(i[0]+=1),HSVtoRGB(i[0],i[1],i[2])}function BaseEvent(){}function createSizedArray(t){return Array.apply(null,{length:t})}function createNS(t){return document.createElementNS(svgNS,t)}function createTag(t){return document.createElement(t)}function DynamicPropertyContainer(){}function extendPrototype(t,e){var i,r,a=t.length;for(i=0;i<a;i+=1){r=t[i].prototype;for(var s in r)r.hasOwnProperty(s)&&(e.prototype[s]=r[s])}}function getDescriptor(t,e){return Object.getOwnPropertyDescriptor(t,e)}function createProxyFunction(t){function e(){}return e.prototype=t,e}function bezFunction(){function t(t,e,i,r,a,s){var n=t*r+e*a+i*s-a*r-s*t-i*e;return n>-.001&&n<.001}function e(e,i,r,a,s,n,o,h,l){if(0===r&&0===n&&0===l)return t(e,i,a,s,o,h);var p,c=Math.sqrt(Math.pow(a-e,2)+Math.pow(s-i,2)+Math.pow(n-r,2)),m=Math.sqrt(Math.pow(o-e,2)+Math.pow(h-i,2)+Math.pow(l-r,2)),f=Math.sqrt(Math.pow(o-a,2)+Math.pow(h-s,2)+Math.pow(l-n,2));return(p=c>m?c>f?c-m-f:f-m-c:f>m?f-m-c:m-c-f)>-1e-4&&p<1e-4}function i(t){var e,i=segments_length_pool.newElement(),r=t.c,a=t.v,s=t.o,n=t.i,o=t._length,l=i.lengths,p=0;for(e=0;e<o-1;e+=1)l[e]=h(a[e],a[e+1],s[e],n[e+1]),p+=l[e].addedLength;return r&&o&&(l[e]=h(a[e],a[0],s[e],n[0]),p+=l[e].addedLength),i.totalLength=p,i}function r(t){this.segmentLength=0,this.points=new Array(t)}function a(t,e){this.partialLength=t,this.point=e}function s(t,e){var i=e.percents,r=e.lengths,a=i.length,s=bm_floor((a-1)*t),n=t*e.addedLength,o=0;if(s===a-1||0===s||n===r[s])return i[s];for(var h=r[s]>n?-1:1,l=!0;l;)if(r[s]<=n&&r[s+1]>n?(o=(n-r[s])/(r[s+1]-r[s]),l=!1):s+=h,s<0||s>=a-1){if(s===a-1)return i[s];l=!1}return i[s]+(i[s+1]-i[s])*o}function n(t,e,i,r,a,n){var o=s(a,n),h=1-o;return[Math.round(1e3*(h*h*h*t[0]+(o*h*h+h*o*h+h*h*o)*i[0]+(o*o*h+h*o*o+o*h*o)*r[0]+o*o*o*e[0]))/1e3,Math.round(1e3*(h*h*h*t[1]+(o*h*h+h*o*h+h*h*o)*i[1]+(o*o*h+h*o*o+o*h*o)*r[1]+o*o*o*e[1]))/1e3]}function o(t,e,i,r,a,n,o){a=a<0?0:a>1?1:a;var h=s(a,o);n=n>1?1:n;var l,c=s(n,o),m=t.length,f=1-h,d=1-c,u=f*f*f,y=h*f*f*3,g=h*h*f*3,x=h*h*h,v=f*f*d,k=h*f*d+f*h*d+f*f*c,b=h*h*d+f*h*c+h*f*c,E=h*h*c,P=f*d*d,A=h*d*d+f*c*d+f*d*c,_=h*c*d+f*c*c+h*d*c,S=h*c*c,D=d*d*d,T=c*d*d+d*c*d+d*d*c,C=c*c*d+d*c*c+c*d*c,M=c*c*c;for(l=0;l<m;l+=1)p[4*l]=Math.round(1e3*(u*t[l]+y*i[l]+g*r[l]+x*e[l]))/1e3,p[4*l+1]=Math.round(1e3*(v*t[l]+k*i[l]+b*r[l]+E*e[l]))/1e3,p[4*l+2]=Math.round(1e3*(P*t[l]+A*i[l]+_*r[l]+S*e[l]))/1e3,p[4*l+3]=Math.round(1e3*(D*t[l]+T*i[l]+C*r[l]+M*e[l]))/1e3;return p}var h=(Math,function(){return function(t,e,i,r){var a,s,n,o,h,l,p=defaultCurveSegments,c=0,m=[],f=[],d=bezier_length_pool.newElement();for(n=i.length,a=0;a<p;a+=1){for(h=a/(p-1),l=0,s=0;s<n;s+=1)o=bm_pow(1-h,3)*t[s]+3*bm_pow(1-h,2)*h*i[s]+3*(1-h)*bm_pow(h,2)*r[s]+bm_pow(h,3)*e[s],m[s]=o,null!==f[s]&&(l+=bm_pow(m[s]-f[s],2)),f[s]=m[s];l&&(l=bm_sqrt(l),c+=l),d.percents[a]=h,d.lengths[a]=c}return d.addedLength=c,d}}()),l=function(){var e={};return function(i,s,n,o){var h=(i[0]+"_"+i[1]+"_"+s[0]+"_"+s[1]+"_"+n[0]+"_"+n[1]+"_"+o[0]+"_"+o[1]).replace(/\./g,"p");if(!e[h]){var l,p,c,m,f,d,u,y=defaultCurveSegments,g=0,x=null;2===i.length&&(i[0]!=s[0]||i[1]!=s[1])&&t(i[0],i[1],s[0],s[1],i[0]+n[0],i[1]+n[1])&&t(i[0],i[1],s[0],s[1],s[0]+o[0],s[1]+o[1])&&(y=2);var v=new r(y);for(c=n.length,l=0;l<y;l+=1){for(u=createSizedArray(c),f=l/(y-1),d=0,p=0;p<c;p+=1)m=bm_pow(1-f,3)*i[p]+3*bm_pow(1-f,2)*f*(i[p]+n[p])+3*(1-f)*bm_pow(f,2)*(s[p]+o[p])+bm_pow(f,3)*s[p],u[p]=m,null!==x&&(d+=bm_pow(u[p]-x[p],2));d=bm_sqrt(d),g+=d,v.points[l]=new a(d,u),x=u}v.segmentLength=g,e[h]=v}return e[h]}}(),p=createTypedArray("float32",8);return{getSegmentsLength:i,getNewSegment:o,getPointInSegment:n,buildBezierData:l,pointOnLine2D:t,pointOnLine3D:e}}function dataFunctionManager(){function t(a,s,o){var h,l,p,c,m,f,d=a.length;for(l=0;l<d;l+=1)if("ks"in(h=a[l])&&!h.completed){if(h.completed=!0,h.tt&&(a[l-1].td=h.tt),[],-1,h.hasMask){var u=h.masksProperties;for(c=u.length,p=0;p<c;p+=1)if(u[p].pt.k.i)r(u[p].pt.k);else for(f=u[p].pt.k.length,m=0;m<f;m+=1)u[p].pt.k[m].s&&r(u[p].pt.k[m].s[0]),u[p].pt.k[m].e&&r(u[p].pt.k[m].e[0])}0===h.ty?(h.layers=e(h.refId,s),t(h.layers,s,o)):4===h.ty?i(h.shapes):5==h.ty&&n(h,o)}}function e(t,e){for(var i=0,r=e.length;i<r;){if(e[i].id===t)return e[i].layers.__used?JSON.parse(JSON.stringify(e[i].layers)):(e[i].layers.__used=!0,e[i].layers);i+=1}}function i(t){var e,a,s,n=t.length;for(e=n-1;e>=0;e-=1)if("sh"==t[e].ty){if(t[e].ks.k.i)r(t[e].ks.k);else for(s=t[e].ks.k.length,a=0;a<s;a+=1)t[e].ks.k[a].s&&r(t[e].ks.k[a].s[0]),t[e].ks.k[a].e&&r(t[e].ks.k[a].e[0]);!0}else"gr"==t[e].ty&&i(t[e].it)}function r(t){var e,i=t.i.length;for(e=0;e<i;e+=1)t.i[e][0]+=t.v[e][0],t.i[e][1]+=t.v[e][1],t.o[e][0]+=t.v[e][0],t.o[e][1]+=t.v[e][1]}function a(t,e){var i=e?e.split("."):[100,100,100];return t[0]>i[0]||!(i[0]>t[0])&&(t[1]>i[1]||!(i[1]>t[1])&&(t[2]>i[2]||!(i[2]>t[2])&&void 0))}function s(e,i){e.__complete||(l(e),o(e),h(e),p(e),t(e.layers,e.assets,i),e.__complete=!0)}function n(t,e){0!==t.t.a.length||"m"in t.t.p||(t.singleShape=!0)}var o=function(){function t(t){var e=t.t.d;t.t.d={k:[{s:e,t:0}]}}function e(e){var i,r=e.length;for(i=0;i<r;i+=1)5===e[i].ty&&t(e[i])}var i=[4,4,14];return function(t){if(a(i,t.v)&&(e(t.layers),t.assets)){var r,s=t.assets.length;for(r=0;r<s;r+=1)t.assets[r].layers&&e(t.assets[r].layers)}}}(),h=function(){var t=[4,7,99];return function(e){if(e.chars&&!a(t,e.v)){var i,s,n,o,h,l=e.chars.length;for(i=0;i<l;i+=1)if(e.chars[i].data&&e.chars[i].data.shapes)for(h=e.chars[i].data.shapes[0].it,n=h.length,s=0;s<n;s+=1)o=h[s].ks.k,o.__converted||(r(h[s].ks.k),o.__converted=!0)}}}(),l=function(){function t(e){var i,r,a,s=e.length;for(i=0;i<s;i+=1)if("gr"===e[i].ty)t(e[i].it);else if("fl"===e[i].ty||"st"===e[i].ty)if(e[i].c.k&&e[i].c.k[0].i)for(a=e[i].c.k.length,r=0;r<a;r+=1)e[i].c.k[r].s&&(e[i].c.k[r].s[0]/=255,e[i].c.k[r].s[1]/=255,e[i].c.k[r].s[2]/=255,e[i].c.k[r].s[3]/=255),e[i].c.k[r].e&&(e[i].c.k[r].e[0]/=255,e[i].c.k[r].e[1]/=255,e[i].c.k[r].e[2]/=255,e[i].c.k[r].e[3]/=255);else e[i].c.k[0]/=255,e[i].c.k[1]/=255,e[i].c.k[2]/=255,e[i].c.k[3]/=255}function e(e){var i,r=e.length;for(i=0;i<r;i+=1)4===e[i].ty&&t(e[i].shapes)}var i=[4,1,9];return function(t){if(a(i,t.v)&&(e(t.layers),t.assets)){var r,s=t.assets.length;for(r=0;r<s;r+=1)t.assets[r].layers&&e(t.assets[r].layers)}}}(),p=function(){function t(e){var i,r,a,s=e.length;for(i=s-1;i>=0;i-=1)if("sh"==e[i].ty){if(e[i].ks.k.i)e[i].ks.k.c=e[i].closed;else for(a=e[i].ks.k.length,r=0;r<a;r+=1)e[i].ks.k[r].s&&(e[i].ks.k[r].s[0].c=e[i].closed),e[i].ks.k[r].e&&(e[i].ks.k[r].e[0].c=e[i].closed);!0}else"gr"==e[i].ty&&t(e[i].it)}function e(e){var i,r,a,s,n,o,h=e.length;for(r=0;r<h;r+=1){if(i=e[r],i.hasMask){var l=i.masksProperties;for(s=l.length,a=0;a<s;a+=1)if(l[a].pt.k.i)l[a].pt.k.c=l[a].cl;else for(o=l[a].pt.k.length,n=0;n<o;n+=1)l[a].pt.k[n].s&&(l[a].pt.k[n].s[0].c=l[a].cl),l[a].pt.k[n].e&&(l[a].pt.k[n].e[0].c=l[a].cl)}4===i.ty&&t(i.shapes)}}var i=[4,4,18];return function(t){if(a(i,t.v)&&(e(t.layers),t.assets)){var r,s=t.assets.length;for(r=0;r<s;r+=1)t.assets[r].layers&&e(t.assets[r].layers)}}}(),c={};return c.completeData=s,c}function ShapePath(){this.c=!1,this._length=0,this._maxLength=8,this.v=createSizedArray(this._maxLength),this.o=createSizedArray(this._maxLength),this.i=createSizedArray(this._maxLength)}function ShapeModifier(){}function TrimModifier(){}function RoundCornersModifier(){}function RepeaterModifier(){}function ShapeCollection(){this._length=0,this._maxLength=4,this.shapes=createSizedArray(this._maxLength)}function DashProperty(t,e,i,r){this.elem=t,this.frameId=-1,this.dataProps=createSizedArray(e.length),this.renderer=i,this.k=!1,this.dashStr="",this.dashArray=createTypedArray("float32",e.length?e.length-1:0),this.dashoffset=createTypedArray("float32",1),this.initDynamicPropertyContainer(r);var a,s,n=e.length||0;for(a=0;a<n;a+=1)s=PropertyFactory.getProp(t,e[a].v,0,0,this),this.k=s.k||this.k,this.dataProps[a]={n:e[a].n,p:s};this.k||this.getValue(!0),this._isAnimated=this.k}function GradientProperty(t,e,i){this.data=e,this.c=createTypedArray("uint8c",4*e.p);var r=e.k.k[0].s?e.k.k[0].s.length-4*e.p:e.k.k.length-4*e.p;this.o=createTypedArray("float32",r),this._cmdf=!1,this._omdf=!1,this._collapsable=this.checkCollapsable(),this._hasOpacity=r,this.initDynamicPropertyContainer(i),this.prop=PropertyFactory.getProp(t,e.k,1,null,this),this.k=this.prop.k,this.getValue(!0)}function TextAnimatorProperty(t,e,i){this._isFirstFrame=!0,this._hasMaskedPath=!1,this._frameId=-1,this._textData=t,this._renderType=e,this._elem=i,this._animatorsData=createSizedArray(this._textData.a.length),this._pathData={},this._moreOptions={alignment:{}},this.renderedLetters=[],this.lettersChangedFlag=!1,this.initDynamicPropertyContainer(i)}function TextAnimatorDataProperty(t,e,i){var r={propType:!1},a=PropertyFactory.getProp,s=e.a;this.a={r:s.r?a(t,s.r,0,degToRads,i):r,rx:s.rx?a(t,s.rx,0,degToRads,i):r,ry:s.ry?a(t,s.ry,0,degToRads,i):r,sk:s.sk?a(t,s.sk,0,degToRads,i):r,sa:s.sa?a(t,s.sa,0,degToRads,i):r,s:s.s?a(t,s.s,1,.01,i):r,a:s.a?a(t,s.a,1,0,i):r,o:s.o?a(t,s.o,0,.01,i):r,p:s.p?a(t,s.p,1,0,i):r,sw:s.sw?a(t,s.sw,0,0,i):r,sc:s.sc?a(t,s.sc,1,0,i):r,fc:s.fc?a(t,s.fc,1,0,i):r,fh:s.fh?a(t,s.fh,0,0,i):r,fs:s.fs?a(t,s.fs,0,.01,i):r,fb:s.fb?a(t,s.fb,0,.01,i):r,t:s.t?a(t,s.t,0,0,i):r},this.s=TextSelectorProp.getTextSelectorProp(t,e.s,i),this.s.t=e.s.t}function LetterProps(t,e,i,r,a,s){this.o=t,this.sw=e,this.sc=i,this.fc=r,this.m=a,this.p=s,this._mdf={o:!0,sw:!!e,sc:!!i,fc:!!r,m:!0,p:!0}}function TextProperty(t,e){this._frameId=initialDefaultFrame,this.pv="",this.v="",this.kf=!1,this._isFirstFrame=!0,this._mdf=!1,this.data=e,this.elem=t,this.comp=this.elem.comp,this.keysIndex=0,this.canResize=!1,this.minimumFontSize=1,this.effectsSequence=[],this.currentData={ascent:0,boxWidth:this.defaultBoxWidth,f:"",fStyle:"",fWeight:"",fc:"",j:"",justifyOffset:"",l:[],lh:0,lineWidths:[],ls:"",of:"",s:"",sc:"",sw:0,t:0,tr:0,sz:0,ps:null,fillColorAnim:!1,strokeColorAnim:!1,strokeWidthAnim:!1,yOffset:0,finalSize:0,finalText:[],finalLineHeight:0,__complete:!1},this.copyData(this.currentData,this.data.d.k[0].s),this.searchProperty()||this.completeTextData(this.currentData)}function BaseRenderer(){}function SVGRenderer(t,e){this.animationItem=t,this.layers=null,this.renderedFrame=-1,this.svgElement=createNS("svg");var i="";if(e&&e.title){var r=createNS("title"),a=createElementID();r.setAttribute("id",a),r.textContent=e.title,this.svgElement.appendChild(r),i+=a}if(e&&e.description){var s=createNS("desc"),n=createElementID();s.setAttribute("id",n),s.textContent=e.description,this.svgElement.appendChild(s),i+=" "+n}i&&this.svgElement.setAttribute("aria-labelledby",i);var o=createNS("defs");this.svgElement.appendChild(o);var h=createNS("g");this.svgElement.appendChild(h),this.layerElement=h,this.renderConfig={preserveAspectRatio:e&&e.preserveAspectRatio||"xMidYMid meet",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",progressiveLoad:e&&e.progressiveLoad||!1,hideOnTransparent:!e||!1!==e.hideOnTransparent,viewBoxOnly:e&&e.viewBoxOnly||!1,viewBoxSize:e&&e.viewBoxSize||!1,className:e&&e.className||"",focusable:e&&e.focusable},this.globalData={_mdf:!1,frameNum:-1,defs:o,renderConfig:this.renderConfig},this.elements=[],this.pendingElements=[],this.destroyed=!1,this.rendererType="svg"}function CanvasRenderer(t,e){this.animationItem=t,this.renderConfig={clearCanvas:!e||void 0===e.clearCanvas||e.clearCanvas,context:e&&e.context||null,progressiveLoad:e&&e.progressiveLoad||!1,preserveAspectRatio:e&&e.preserveAspectRatio||"xMidYMid meet",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",className:e&&e.className||""},this.renderConfig.dpr=e&&e.dpr||1,this.animationItem.wrapper&&(this.renderConfig.dpr=e&&e.dpr||window.devicePixelRatio||1),this.renderedFrame=-1,this.globalData={frameNum:-1,_mdf:!1,renderConfig:this.renderConfig,currentGlobalAlpha:-1},this.contextData=new CVContextData,this.elements=[],this.pendingElements=[],this.transformMat=new Matrix,this.completeLayers=!1,this.rendererType="canvas"}function HybridRenderer(t,e){this.animationItem=t,this.layers=null,this.renderedFrame=-1,this.renderConfig={className:e&&e.className||"",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",hideOnTransparent:!e||!1!==e.hideOnTransparent},this.globalData={_mdf:!1,frameNum:-1,renderConfig:this.renderConfig},this.pendingElements=[],this.elements=[],this.threeDElements=[],this.destroyed=!1,this.camera=null,this.supports3d=!0,this.rendererType="html"}function MaskElement(t,e,i){this.data=t,this.element=e,this.globalData=i,this.storedData=[],this.masksProperties=this.data.masksProperties||[],this.maskElement=null;var r,a=this.globalData.defs,s=this.masksProperties?this.masksProperties.length:0;this.viewData=createSizedArray(s),this.solidPath="";var n,o,h,l,p,c,m,f=this.masksProperties,d=0,u=[],y=createElementID(),g="clipPath",x="clip-path";for(r=0;r<s;r++)if(("a"!==f[r].mode&&"n"!==f[r].mode||f[r].inv||100!==f[r].o.k||f[r].o.x)&&(g="mask",x="mask"),"s"!=f[r].mode&&"i"!=f[r].mode||0!==d?l=null:(l=createNS("rect"),l.setAttribute("fill","#ffffff"),l.setAttribute("width",this.element.comp.data.w||0),l.setAttribute("height",this.element.comp.data.h||0),u.push(l)),n=createNS("path"),"n"!=f[r].mode){d+=1,n.setAttribute("fill","s"===f[r].mode?"#000000":"#ffffff"),n.setAttribute("clip-rule","nonzero");var v;if(0!==f[r].x.k?(g="mask",x="mask",m=PropertyFactory.getProp(this.element,f[r].x,0,null,this.element),v=createElementID(),p=createNS("filter"),p.setAttribute("id",v),c=createNS("feMorphology"),c.setAttribute("operator","erode"),c.setAttribute("in","SourceGraphic"),c.setAttribute("radius","0"),p.appendChild(c),a.appendChild(p),n.setAttribute("stroke","s"===f[r].mode?"#000000":"#ffffff")):(c=null,m=null),this.storedData[r]={elem:n,x:m,expan:c,lastPath:"",lastOperator:"",filterId:v,lastRadius:0},"i"==f[r].mode){h=u.length;var k=createNS("g");for(o=0;o<h;o+=1)k.appendChild(u[o]);var b=createNS("mask");b.setAttribute("mask-type","alpha"),b.setAttribute("id",y+"_"+d),b.appendChild(n),a.appendChild(b),k.setAttribute("mask","url("+locationHref+"#"+y+"_"+d+")"),u.length=0,u.push(k)}else u.push(n);f[r].inv&&!this.solidPath&&(this.solidPath=this.createLayerSolidPath()),this.viewData[r]={elem:n,lastPath:"",op:PropertyFactory.getProp(this.element,f[r].o,0,.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,f[r],3),invRect:l},this.viewData[r].prop.k||this.drawPath(f[r],this.viewData[r].prop.v,this.viewData[r])}else this.viewData[r]={op:PropertyFactory.getProp(this.element,f[r].o,0,.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,f[r],3),elem:n,lastPath:""},a.appendChild(n);for(this.maskElement=createNS(g),s=u.length,r=0;r<s;r+=1)this.maskElement.appendChild(u[r]);d>0&&(this.maskElement.setAttribute("id",y),this.element.maskedElement.setAttribute(x,"url("+locationHref+"#"+y+")"),a.appendChild(this.maskElement)),this.viewData.length&&this.element.addRenderableComponent(this)}function HierarchyElement(){}function FrameElement(){}function TransformElement(){}function RenderableElement(){}function RenderableDOMElement(){}function ProcessedElement(t,e){this.elem=t,this.pos=e}function SVGStyleData(t,e){this.data=t,this.type=t.ty,this.d="",this.lvl=e,this._mdf=!1,this.closed=!0===t.hd,this.pElem=createNS("path"),this.msElem=null}function SVGShapeData(t,e,i){this.caches=[],this.styles=[],this.transformers=t,this.lStr="",this.sh=i,this.lvl=e,this._isAnimated=!!i.k;for(var r=0,a=t.length;r<a;){if(t[r].mProps.dynamicProperties.length){this._isAnimated=!0;break}r+=1}}function SVGTransformData(t,e,i){this.transform={mProps:t,op:e,container:i},this.elements=[],this._isAnimated=this.transform.mProps.dynamicProperties.length||this.transform.op.effectsSequence.length}function SVGStrokeStyleData(t,e,i){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.o=PropertyFactory.getProp(t,e.o,0,.01,this),this.w=PropertyFactory.getProp(t,e.w,0,null,this),this.d=new DashProperty(t,e.d||{},"svg",this),this.c=PropertyFactory.getProp(t,e.c,1,255,this),this.style=i,this._isAnimated=!!this._isAnimated}function SVGFillStyleData(t,e,i){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.o=PropertyFactory.getProp(t,e.o,0,.01,this),this.c=PropertyFactory.getProp(t,e.c,1,255,this),this.style=i}function SVGGradientFillStyleData(t,e,i){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.initGradientData(t,e,i)}function SVGGradientStrokeStyleData(t,e,i){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.w=PropertyFactory.getProp(t,e.w,0,null,this),this.d=new DashProperty(t,e.d||{},"svg",this),this.initGradientData(t,e,i),this._isAnimated=!!this._isAnimated}function ShapeGroupData(){this.it=[],this.prevViewData=[],this.gr=createNS("g")}function ShapeTransformManager(){this.sequences={},this.sequenceList=[],this.transform_key_count=0}function CVShapeData(t,e,i,r){this.styledShapes=[],this.tr=[0,0,0,0,0,0];var a=4;"rc"==e.ty?a=5:"el"==e.ty?a=6:"sr"==e.ty&&(a=7),this.sh=ShapePropertyFactory.getShapeProp(t,e,a,t);var s,n,o=i.length;for(s=0;s<o;s+=1)i[s].closed||(n={transforms:r.addTransformSequence(i[s].transforms),trNodes:[]},this.styledShapes.push(n),i[s].elements.push(n))}function BaseElement(){}function NullElement(t,e,i){this.initFrame(),this.initBaseData(t,e,i),this.initFrame(),this.initTransform(t,e,i),this.initHierarchy()}function SVGBaseElement(){}function IShapeElement(){}function ITextElement(){}function ICompElement(){}function IImageElement(t,e,i){this.assetData=e.getAssetData(t.refId),this.initElement(t,e,i),this.sourceRect={top:0,left:0,width:this.assetData.w,height:this.assetData.h}}function ISolidElement(t,e,i){this.initElement(t,e,i)}function SVGCompElement(t,e,i){this.layers=t.layers,this.supports3d=!0,this.completeLayers=!1,this.pendingElements=[],this.elements=this.layers?createSizedArray(this.layers.length):[],this.initElement(t,e,i),this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0}}function SVGTextElement(t,e,i){this.textSpans=[],this.renderType="svg",this.initElement(t,e,i)}function SVGShapeElement(t,e,i){this.shapes=[],this.shapesData=t.shapes,this.stylesList=[],this.shapeModifiers=[],this.itemsData=[],this.processedElements=[],this.animatedContents=[],this.initElement(t,e,i),this.prevViewData=[]}function SVGTintFilter(t,e){this.filterManager=e;var i=createNS("feColorMatrix");if(i.setAttribute("type","matrix"),i.setAttribute("color-interpolation-filters","linearRGB"),i.setAttribute("values","0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0"),i.setAttribute("result","f1"),t.appendChild(i),i=createNS("feColorMatrix"),i.setAttribute("type","matrix"),i.setAttribute("color-interpolation-filters","sRGB"),i.setAttribute("values","1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0"),i.setAttribute("result","f2"),t.appendChild(i),this.matrixFilter=i,100!==e.effectElements[2].p.v||e.effectElements[2].p.k){var r=createNS("feMerge");t.appendChild(r);var a;a=createNS("feMergeNode"),a.setAttribute("in","SourceGraphic"),r.appendChild(a),a=createNS("feMergeNode"),a.setAttribute("in","f2"),r.appendChild(a)}}function SVGFillFilter(t,e){this.filterManager=e;var i=createNS("feColorMatrix");i.setAttribute("type","matrix"),i.setAttribute("color-interpolation-filters","sRGB"),i.setAttribute("values","1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0"),t.appendChild(i),this.matrixFilter=i}function SVGGaussianBlurEffect(t,e){t.setAttribute("x","-100%"),t.setAttribute("y","-100%"),t.setAttribute("width","300%"),t.setAttribute("height","300%"),this.filterManager=e;var i=createNS("feGaussianBlur");t.appendChild(i),this.feGaussianBlur=i}function SVGStrokeEffect(t,e){this.initialized=!1,this.filterManager=e,this.elem=t,this.paths=[]}function SVGTritoneFilter(t,e){this.filterManager=e;var i=createNS("feColorMatrix");i.setAttribute("type","matrix"),i.setAttribute("color-interpolation-filters","linearRGB"),i.setAttribute("values","0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0"),i.setAttribute("result","f1"),t.appendChild(i);var r=createNS("feComponentTransfer");r.setAttribute("color-interpolation-filters","sRGB"),t.appendChild(r),this.matrixFilter=r;var a=createNS("feFuncR");a.setAttribute("type","table"),r.appendChild(a),this.feFuncR=a;var s=createNS("feFuncG");s.setAttribute("type","table"),r.appendChild(s),this.feFuncG=s;var n=createNS("feFuncB");n.setAttribute("type","table"),r.appendChild(n),this.feFuncB=n}function SVGProLevelsFilter(t,e){this.filterManager=e;var i=this.filterManager.effectElements,r=createNS("feComponentTransfer");(i[10].p.k||0!==i[10].p.v||i[11].p.k||1!==i[11].p.v||i[12].p.k||1!==i[12].p.v||i[13].p.k||0!==i[13].p.v||i[14].p.k||1!==i[14].p.v)&&(this.feFuncR=this.createFeFunc("feFuncR",r)),(i[17].p.k||0!==i[17].p.v||i[18].p.k||1!==i[18].p.v||i[19].p.k||1!==i[19].p.v||i[20].p.k||0!==i[20].p.v||i[21].p.k||1!==i[21].p.v)&&(this.feFuncG=this.createFeFunc("feFuncG",r)),(i[24].p.k||0!==i[24].p.v||i[25].p.k||1!==i[25].p.v||i[26].p.k||1!==i[26].p.v||i[27].p.k||0!==i[27].p.v||i[28].p.k||1!==i[28].p.v)&&(this.feFuncB=this.createFeFunc("feFuncB",r)),(i[31].p.k||0!==i[31].p.v||i[32].p.k||1!==i[32].p.v||i[33].p.k||1!==i[33].p.v||i[34].p.k||0!==i[34].p.v||i[35].p.k||1!==i[35].p.v)&&(this.feFuncA=this.createFeFunc("feFuncA",r)),(this.feFuncR||this.feFuncG||this.feFuncB||this.feFuncA)&&(r.setAttribute("color-interpolation-filters","sRGB"),t.appendChild(r),r=createNS("feComponentTransfer")),(i[3].p.k||0!==i[3].p.v||i[4].p.k||1!==i[4].p.v||i[5].p.k||1!==i[5].p.v||i[6].p.k||0!==i[6].p.v||i[7].p.k||1!==i[7].p.v)&&(r.setAttribute("color-interpolation-filters","sRGB"),t.appendChild(r),this.feFuncRComposed=this.createFeFunc("feFuncR",r),this.feFuncGComposed=this.createFeFunc("feFuncG",r),this.feFuncBComposed=this.createFeFunc("feFuncB",r))}function SVGDropShadowEffect(t,e){t.setAttribute("x","-100%"),t.setAttribute("y","-100%"),t.setAttribute("width","400%"),t.setAttribute("height","400%"),this.filterManager=e;var i=createNS("feGaussianBlur");i.setAttribute("in","SourceAlpha"),i.setAttribute("result","drop_shadow_1"),i.setAttribute("stdDeviation","0"),this.feGaussianBlur=i,t.appendChild(i);var r=createNS("feOffset");r.setAttribute("dx","25"),r.setAttribute("dy","0"),r.setAttribute("in","drop_shadow_1"),r.setAttribute("result","drop_shadow_2"),this.feOffset=r,t.appendChild(r);var a=createNS("feFlood");a.setAttribute("flood-color","#00ff00"),a.setAttribute("flood-opacity","1"),a.setAttribute("result","drop_shadow_3"),this.feFlood=a,t.appendChild(a);var s=createNS("feComposite");s.setAttribute("in","drop_shadow_3"),s.setAttribute("in2","drop_shadow_2"),s.setAttribute("operator","in"),s.setAttribute("result","drop_shadow_4"),t.appendChild(s);var n=createNS("feMerge");t.appendChild(n);var o;o=createNS("feMergeNode"),n.appendChild(o),o=createNS("feMergeNode"),o.setAttribute("in","SourceGraphic"),this.feMergeNode=o,this.feMerge=n,this.originalNodeAdded=!1,n.appendChild(o)}function SVGMatte3Effect(t,e,i){this.initialized=!1,this.filterManager=e,this.filterElem=t,this.elem=i,i.matteElement=createNS("g"),i.matteElement.appendChild(i.layerElement),i.matteElement.appendChild(i.transformedElement),i.baseElement=i.matteElement}function SVGEffects(t){var e,i=t.data.ef?t.data.ef.length:0,r=createElementID(),a=filtersFactory.createFilter(r),s=0;this.filters=[];var n;for(e=0;e<i;e+=1)n=null,20===t.data.ef[e].ty?(s+=1,n=new SVGTintFilter(a,t.effectsManager.effectElements[e])):21===t.data.ef[e].ty?(s+=1,n=new SVGFillFilter(a,t.effectsManager.effectElements[e])):22===t.data.ef[e].ty?n=new SVGStrokeEffect(t,t.effectsManager.effectElements[e]):23===t.data.ef[e].ty?(s+=1,n=new SVGTritoneFilter(a,t.effectsManager.effectElements[e])):24===t.data.ef[e].ty?(s+=1,n=new SVGProLevelsFilter(a,t.effectsManager.effectElements[e])):25===t.data.ef[e].ty?(s+=1,n=new SVGDropShadowEffect(a,t.effectsManager.effectElements[e])):28===t.data.ef[e].ty?n=new SVGMatte3Effect(a,t.effectsManager.effectElements[e],t):29===t.data.ef[e].ty&&(s+=1,n=new SVGGaussianBlurEffect(a,t.effectsManager.effectElements[e])),n&&this.filters.push(n);s&&(t.globalData.defs.appendChild(a),t.layerElement.setAttribute("filter","url("+locationHref+"#"+r+")")),this.filters.length&&t.addRenderableComponent(this)}function CVContextData(){this.saved=[],this.cArrPos=0,this.cTr=new Matrix,this.cO=1;var t;for(this.savedOp=createTypedArray("float32",15),t=0;t<15;t+=1)this.saved[t]=createTypedArray("float32",16);this._length=15}function CVBaseElement(){}function CVImageElement(t,e,i){this.assetData=e.getAssetData(t.refId),this.img=e.imageLoader.getImage(this.assetData),this.initElement(t,e,i)}function CVCompElement(t,e,i){this.completeLayers=!1,this.layers=t.layers,this.pendingElements=[],this.elements=createSizedArray(this.layers.length),this.initElement(t,e,i),this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0}}function CVMaskElement(t,e){this.data=t,this.element=e,this.masksProperties=this.data.masksProperties||[],this.viewData=createSizedArray(this.masksProperties.length);var i,r=this.masksProperties.length,a=!1;for(i=0;i<r;i++)"n"!==this.masksProperties[i].mode&&(a=!0),this.viewData[i]=ShapePropertyFactory.getShapeProp(this.element,this.masksProperties[i],3);this.hasMasks=a,a&&this.element.addRenderableComponent(this)}function CVShapeElement(t,e,i){this.shapes=[],this.shapesData=t.shapes,this.stylesList=[],this.itemsData=[],this.prevViewData=[],this.shapeModifiers=[],this.processedElements=[],this.transformsManager=new ShapeTransformManager,this.initElement(t,e,i)}function CVSolidElement(t,e,i){this.initElement(t,e,i)}function CVTextElement(t,e,i){this.textSpans=[],this.yOffset=0,this.fillColorAnim=!1,this.strokeColorAnim=!1,this.strokeWidthAnim=!1,this.stroke=!1,this.fill=!1,this.justifyOffset=0,this.currentRender=null,this.renderType="canvas",this.values={fill:"rgba(0,0,0,0)",stroke:"rgba(0,0,0,0)",sWidth:0,fValue:""},this.initElement(t,e,i)}function CVEffects(){}function HBaseElement(t,e,i){}function HSolidElement(t,e,i){this.initElement(t,e,i)}function HCompElement(t,e,i){this.layers=t.layers,this.supports3d=!t.hasMask,this.completeLayers=!1,this.pendingElements=[],this.elements=this.layers?createSizedArray(this.layers.length):[],this.initElement(t,e,i),this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0}}function HShapeElement(t,e,i){this.shapes=[],this.shapesData=t.shapes,this.stylesList=[],this.shapeModifiers=[],this.itemsData=[],this.processedElements=[],this.animatedContents=[],this.shapesContainer=createNS("g"),this.initElement(t,e,i),this.prevViewData=[],this.currentBBox={x:999999,y:-999999,h:0,w:0}}function HTextElement(t,e,i){this.textSpans=[],this.textPaths=[],this.currentBBox={x:999999,y:-999999,h:0,w:0},this.renderType="svg",this.isMasked=!1,this.initElement(t,e,i)}function HImageElement(t,e,i){this.assetData=e.getAssetData(t.refId),this.initElement(t,e,i)}function HCameraElement(t,e,i){this.initFrame(),this.initBaseData(t,e,i),this.initHierarchy();var r=PropertyFactory.getProp;if(this.pe=r(this,t.pe,0,0,this),t.ks.p.s?(this.px=r(this,t.ks.p.x,1,0,this),this.py=r(this,t.ks.p.y,1,0,this),this.pz=r(this,t.ks.p.z,1,0,this)):this.p=r(this,t.ks.p,1,0,this),t.ks.a&&(this.a=r(this,t.ks.a,1,0,this)),t.ks.or.k.length&&t.ks.or.k[0].to){var a,s=t.ks.or.k.length;for(a=0;a<s;a+=1)t.ks.or.k[a].to=null,t.ks.or.k[a].ti=null}this.or=r(this,t.ks.or,1,degToRads,this),this.or.sh=!0,this.rx=r(this,t.ks.rx,0,degToRads,this),this.ry=r(this,t.ks.ry,0,degToRads,this),this.rz=r(this,t.ks.rz,0,degToRads,this),this.mat=new Matrix,this._prevMat=new Matrix,this._isFirstFrame=!0,this.finalTransform={mProp:this}}function HEffects(){}function SliderEffect(t,e,i){this.p=PropertyFactory.getProp(e,t.v,0,0,i)}function AngleEffect(t,e,i){this.p=PropertyFactory.getProp(e,t.v,0,0,i)}function ColorEffect(t,e,i){this.p=PropertyFactory.getProp(e,t.v,1,0,i)}function PointEffect(t,e,i){this.p=PropertyFactory.getProp(e,t.v,1,0,i)}function LayerIndexEffect(t,e,i){this.p=PropertyFactory.getProp(e,t.v,0,0,i)}function MaskIndexEffect(t,e,i){this.p=PropertyFactory.getProp(e,t.v,0,0,i)}function CheckboxEffect(t,e,i){this.p=PropertyFactory.getProp(e,t.v,0,0,i)}function NoValueEffect(){this.p={}}function EffectsManager(){}function EffectsManager(t,e){var i=t.ef||[];this.effectElements=[];var r,a,s=i.length;for(r=0;r<s;r++)a=new GroupEffect(i[r],e),this.effectElements.push(a)}function GroupEffect(t,e){this.init(t,e)}function setLocationHref(t){locationHref=t}function searchAnimations(){!0===standalone?animationManager.searchAnimations(animationData,standalone,renderer):animationManager.searchAnimations()}function setSubframeRendering(t){subframeEnabled=t}function loadAnimation(t){return!0===standalone&&(t.animationData=JSON.parse(animationData)),animationManager.loadAnimation(t)}function setQuality(t){if("string"==typeof t)switch(t){case"high":defaultCurveSegments=200;break;case"medium":defaultCurveSegments=50;break;case"low":defaultCurveSegments=10}else!isNaN(t)&&t>1&&(defaultCurveSegments=t);roundValues(!(defaultCurveSegments>=50))}function inBrowser(){return"undefined"!=typeof navigator}function installPlugin(t,e){"expressions"===t&&(expressionsPlugin=e)}function getFactory(t){switch(t){case"propertyFactory":return PropertyFactory;case"shapePropertyFactory":return ShapePropertyFactory;case"matrix":return Matrix}}function checkReady(){"complete"===document.readyState&&(clearInterval(readyStateCheckInterval),searchAnimations())}function getQueryVariable(t){for(var e=queryString.split("&"),i=0;i<e.length;i++){var r=e[i].split("=");if(decodeURIComponent(r[0])==t)return decodeURIComponent(r[1])}}var svgNS="http://www.w3.org/2000/svg",locationHref="",initialDefaultFrame=-999999,subframeEnabled=!0,expressionsPlugin,isSafari=/^((?!chrome|android).)*safari/i.test(navigator.userAgent),cachedColors={},bm_rounder=Math.round,bm_rnd,bm_pow=Math.pow,bm_sqrt=Math.sqrt,bm_abs=Math.abs,bm_floor=Math.floor,bm_max=Math.max,bm_min=Math.min,blitter=10,BMMath={};!function(){var t,e=["abs","acos","acosh","asin","asinh","atan","atanh","atan2","ceil","cbrt","expm1","clz32","cos","cosh","exp","floor","fround","hypot","imul","log","log1p","log2","log10","max","min","pow","random","round","sign","sin","sinh","sqrt","tan","tanh","trunc","E","LN10","LN2","LOG10E","LOG2E","PI","SQRT1_2","SQRT2"],i=e.length;for(t=0;t<i;t+=1)BMMath[e[t]]=Math[e[t]]}(),BMMath.random=Math.random,BMMath.abs=function(t){if("object"==typeof t&&t.length){var e,i=createSizedArray(t.length),r=t.length;for(e=0;e<r;e+=1)i[e]=Math.abs(t[e]);return i}return Math.abs(t)};var defaultCurveSegments=150,degToRads=Math.PI/180,roundCorner=.5519;roundValues(!1);var createElementID=function(){var t=0;return function(){return"__lottie_element_"+ ++t}}(),rgbToHex=function(){var t,e,i=[];for(t=0;t<256;t+=1)e=t.toString(16),i[t]=1==e.length?"0"+e:e;return function(t,e,r){return t<0&&(t=0),e<0&&(e=0),r<0&&(r=0),"#"+i[t]+i[e]+i[r]}}();BaseEvent.prototype={triggerEvent:function(t,e){if(this._cbs[t])for(var i=this._cbs[t].length,r=0;r<i;r++)this._cbs[t][r](e)},addEventListener:function(t,e){return this._cbs[t]||(this._cbs[t]=[]),this._cbs[t].push(e),function(){this.removeEventListener(t,e)}.bind(this)},removeEventListener:function(t,e){if(e){if(this._cbs[t]){for(var i=0,r=this._cbs[t].length;i<r;)this._cbs[t][i]===e&&(this._cbs[t].splice(i,1),i-=1,r-=1),i+=1;this._cbs[t].length||(this._cbs[t]=null)}}else this._cbs[t]=null}};var createTypedArray=function(){function t(t,e){var i,r=0,a=[];switch(t){case"int16":case"uint8c":i=1;break;default:i=1.1}for(r=0;r<e;r+=1)a.push(i);return a}function e(t,e){return"float32"===t?new Float32Array(e):"int16"===t?new Int16Array(e):"uint8c"===t?new Uint8ClampedArray(e):void 0}return"function"==typeof Uint8ClampedArray&&"function"==typeof Float32Array?e:t}();DynamicPropertyContainer.prototype={addDynamicProperty:function(t){-1===this.dynamicProperties.indexOf(t)&&(this.dynamicProperties.push(t),this.container.addDynamicProperty(this),this._isAnimated=!0)},iterateDynamicProperties:function(){this._mdf=!1;var t,e=this.dynamicProperties.length;for(t=0;t<e;t+=1)this.dynamicProperties[t].getValue(),this.dynamicProperties[t]._mdf&&(this._mdf=!0)},initDynamicPropertyContainer:function(t){this.container=t,this.dynamicProperties=[],this._mdf=!1,this._isAnimated=!1}};var getBlendMode=function(){var t={0:"source-over",1:"multiply",2:"screen",3:"overlay",4:"darken",5:"lighten",6:"color-dodge",7:"color-burn",8:"hard-light",9:"soft-light",10:"difference",11:"exclusion",12:"hue",13:"saturation",14:"color",15:"luminosity"};return function(e){return t[e]||""}}(),Matrix=function(){function t(){return this.props[0]=1,this.props[1]=0,this.props[2]=0,this.props[3]=0,this.props[4]=0,this.props[5]=1,this.props[6]=0,this.props[7]=0,this.props[8]=0,this.props[9]=0,this.props[10]=1,this.props[11]=0,this.props[12]=0,this.props[13]=0,this.props[14]=0,this.props[15]=1,this}function e(t){if(0===t)return this;var e=T(t),i=C(t);return this._t(e,-i,0,0,i,e,0,0,0,0,1,0,0,0,0,1)}function i(t){if(0===t)return this;var e=T(t),i=C(t);return this._t(1,0,0,0,0,e,-i,0,0,i,e,0,0,0,0,1)}function r(t){if(0===t)return this;var e=T(t),i=C(t);return this._t(e,0,i,0,0,1,0,0,-i,0,e,0,0,0,0,1)}function a(t){if(0===t)return this;var e=T(t),i=C(t);return this._t(e,-i,0,0,i,e,0,0,0,0,1,0,0,0,0,1)}function s(t,e){return this._t(1,e,t,1,0,0)}function n(t,e){return this.shear(M(t),M(e))}function o(t,e){var i=T(e),r=C(e);return this._t(i,r,0,0,-r,i,0,0,0,0,1,0,0,0,0,1)._t(1,0,0,0,M(t),1,0,0,0,0,1,0,0,0,0,1)._t(i,-r,0,0,r,i,0,0,0,0,1,0,0,0,0,1)}function h(t,e,i){return i||0===i||(i=1),1===t&&1===e&&1===i?this:this._t(t,0,0,0,0,e,0,0,0,0,i,0,0,0,0,1)}function l(t,e,i,r,a,s,n,o,h,l,p,c,m,f,d,u){return this.props[0]=t,this.props[1]=e,this.props[2]=i,this.props[3]=r,this.props[4]=a,this.props[5]=s,this.props[6]=n,this.props[7]=o,this.props[8]=h,this.props[9]=l,this.props[10]=p,this.props[11]=c,this.props[12]=m,this.props[13]=f,this.props[14]=d,this.props[15]=u,this}function p(t,e,i){return i=i||0,0!==t||0!==e||0!==i?this._t(1,0,0,0,0,1,0,0,0,0,1,0,t,e,i,1):this}function c(t,e,i,r,a,s,n,o,h,l,p,c,m,f,d,u){var y=this.props;if(1===t&&0===e&&0===i&&0===r&&0===a&&1===s&&0===n&&0===o&&0===h&&0===l&&1===p&&0===c)return y[12]=y[12]*t+y[15]*m,y[13]=y[13]*s+y[15]*f,y[14]=y[14]*p+y[15]*d,y[15]=y[15]*u,this._identityCalculated=!1,this;var g=y[0],x=y[1],v=y[2],k=y[3],b=y[4],E=y[5],P=y[6],A=y[7],_=y[8],S=y[9],D=y[10],T=y[11],C=y[12],M=y[13],w=y[14],F=y[15];return y[0]=g*t+x*a+v*h+k*m,y[1]=g*e+x*s+v*l+k*f,y[2]=g*i+x*n+v*p+k*d,y[3]=g*r+x*o+v*c+k*u,y[4]=b*t+E*a+P*h+A*m,y[5]=b*e+E*s+P*l+A*f,y[6]=b*i+E*n+P*p+A*d,y[7]=b*r+E*o+P*c+A*u,y[8]=_*t+S*a+D*h+T*m,y[9]=_*e+S*s+D*l+T*f,y[10]=_*i+S*n+D*p+T*d,y[11]=_*r+S*o+D*c+T*u,y[12]=C*t+M*a+w*h+F*m,y[13]=C*e+M*s+w*l+F*f,y[14]=C*i+M*n+w*p+F*d,y[15]=C*r+M*o+w*c+F*u,this._identityCalculated=!1,this}function m(){return this._identityCalculated||(this._identity=!(1!==this.props[0]||0!==this.props[1]||0!==this.props[2]||0!==this.props[3]||0!==this.props[4]||1!==this.props[5]||0!==this.props[6]||0!==this.props[7]||0!==this.props[8]||0!==this.props[9]||1!==this.props[10]||0!==this.props[11]||0!==this.props[12]||0!==this.props[13]||0!==this.props[14]||1!==this.props[15]),this._identityCalculated=!0),this._identity}function f(t){for(var e=0;e<16;){if(t.props[e]!==this.props[e])return!1;e+=1}return!0}function d(t){var e;for(e=0;e<16;e+=1)t.props[e]=this.props[e]}function u(t){var e;for(e=0;e<16;e+=1)this.props[e]=t[e]}function y(t,e,i){return{x:t*this.props[0]+e*this.props[4]+i*this.props[8]+this.props[12],y:t*this.props[1]+e*this.props[5]+i*this.props[9]+this.props[13],z:t*this.props[2]+e*this.props[6]+i*this.props[10]+this.props[14]}}function g(t,e,i){return t*this.props[0]+e*this.props[4]+i*this.props[8]+this.props[12]}function x(t,e,i){return t*this.props[1]+e*this.props[5]+i*this.props[9]+this.props[13]}function v(t,e,i){return t*this.props[2]+e*this.props[6]+i*this.props[10]+this.props[14]}function k(t){var e=this.props[0]*this.props[5]-this.props[1]*this.props[4],i=this.props[5]/e,r=-this.props[1]/e,a=-this.props[4]/e,s=this.props[0]/e,n=(this.props[4]*this.props[13]-this.props[5]*this.props[12])/e,o=-(this.props[0]*this.props[13]-this.props[1]*this.props[12])/e;return[t[0]*i+t[1]*a+n,t[0]*r+t[1]*s+o,0]}function b(t){var e,i=t.length,r=[];for(e=0;e<i;e+=1)r[e]=k(t[e]);return r}function E(t,e,i){var r=createTypedArray("float32",6);if(this.isIdentity())r[0]=t[0],r[1]=t[1],r[2]=e[0],r[3]=e[1],r[4]=i[0],r[5]=i[1];else{var a=this.props[0],s=this.props[1],n=this.props[4],o=this.props[5],h=this.props[12],l=this.props[13];r[0]=t[0]*a+t[1]*n+h,r[1]=t[0]*s+t[1]*o+l,r[2]=e[0]*a+e[1]*n+h,r[3]=e[0]*s+e[1]*o+l,r[4]=i[0]*a+i[1]*n+h,r[5]=i[0]*s+i[1]*o+l}return r}function P(t,e,i){return this.isIdentity()?[t,e,i]:[t*this.props[0]+e*this.props[4]+i*this.props[8]+this.props[12],t*this.props[1]+e*this.props[5]+i*this.props[9]+this.props[13],t*this.props[2]+e*this.props[6]+i*this.props[10]+this.props[14]]}function A(t,e){if(this.isIdentity())return t+","+e;var i=this.props;return Math.round(100*(t*i[0]+e*i[4]+i[12]))/100+","+Math.round(100*(t*i[1]+e*i[5]+i[13]))/100}function _(){for(var t=0,e=this.props,i="matrix3d(";t<16;)i+=w(1e4*e[t])/1e4,i+=15===t?")":",",t+=1;return i}function S(t){return t<1e-6&&t>0||t>-1e-6&&t<0?w(1e4*t)/1e4:t}function D(){var t=this.props;return"matrix("+S(t[0])+","+S(t[1])+","+S(t[4])+","+S(t[5])+","+S(t[12])+","+S(t[13])+")"}var T=Math.cos,C=Math.sin,M=Math.tan,w=Math.round;return function(){this.reset=t,this.rotate=e,this.rotateX=i,this.rotateY=r,this.rotateZ=a,this.skew=n,this.skewFromAxis=o,this.shear=s,this.scale=h,this.setTransform=l,this.translate=p,this.transform=c,this.applyToPoint=y,this.applyToX=g,this.applyToY=x,this.applyToZ=v,this.applyToPointArray=P,this.applyToTriplePoints=E,this.applyToPointStringified=A,this.toCSS=_,this.to2dCSS=D,this.clone=d,this.cloneFromProps=u,this.equals=f,this.inversePoints=b,this.inversePoint=k,this._t=this.transform,this.isIdentity=m,this._identity=!0,this._identityCalculated=!1,this.props=createTypedArray("float32",16),this.reset()}}();!function(t,e){function i(i,l,p){var g=[];l=!0===l?{entropy:!0}:l||{};var x=n(s(l.entropy?[i,h(t)]:null===i?o():i,3),g),v=new r(g),k=function(){for(var t=v.g(m),e=d,i=0;t<u;)t=(t+i)*c,e*=c,i=v.g(1);for(;t>=y;)t/=2,e/=2,i>>>=1;return(t+i)/e};return k.int32=function(){return 0|v.g(4)},k.quick=function(){return v.g(4)/4294967296},k.double=k,n(h(v.S),t),(l.pass||p||function(t,i,r,s){return s&&(s.S&&a(s,v),t.state=function(){return a(v,{})}),r?(e[f]=t,i):t})(k,x,"global"in l?l.global:this==e,l.state)}function r(t){var e,i=t.length,r=this,a=0,s=r.i=r.j=0,n=r.S=[];for(i||(t=[i++]);a<c;)n[a]=a++;for(a=0;a<c;a++)n[a]=n[s=g&s+t[a%i]+(e=n[a])],n[s]=e;r.g=function(t){for(var e,i=0,a=r.i,s=r.j,n=r.S;t--;)e=n[a=g&a+1],i=i*c+n[g&(n[a]=n[s=g&s+e])+(n[s]=e)];return r.i=a,r.j=s,i}}function a(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function s(t,e){var i,r=[],a=typeof t;if(e&&"object"==a)for(i in t)try{r.push(s(t[i],e-1))}catch(t){}return r.length?r:"string"==a?t:t+"\0"}function n(t,e){for(var i,r=t+"",a=0;a<r.length;)e[g&a]=g&(i^=19*e[g&a])+r.charCodeAt(a++);return h(e)}function o(){try{if(l)return h(l.randomBytes(c));var e=new Uint8Array(c);return(p.crypto||p.msCrypto).getRandomValues(e),h(e)}catch(e){var i=p.navigator,r=i&&i.plugins;return[+new Date,p,r,p.screen,h(t)]}}function h(t){return String.fromCharCode.apply(0,t)}var l,p=this,c=256,m=6,f="random",d=e.pow(c,m),u=e.pow(2,52),y=2*u,g=c-1;e["seed"+f]=i,n(e.random(),t)}([],BMMath);var BezierFactory=function(){function t(t,e,i,r,a){var s=a||("bez_"+t+"_"+e+"_"+i+"_"+r).replace(/\./g,"p");if(p[s])return p[s];var n=new h([t,e,i,r]);return p[s]=n,n}function e(t,e){return 1-3*e+3*t}function i(t,e){return 3*e-6*t}function r(t){return 3*t}function a(t,a,s){return((e(a,s)*t+i(a,s))*t+r(a))*t}function s(t,a,s){return 3*e(a,s)*t*t+2*i(a,s)*t+r(a)}function n(t,e,i,r,s){var n,o,h=0;do{o=e+(i-e)/2,n=a(o,r,s)-t,n>0?i=o:e=o}while(Math.abs(n)>m&&++h<f);return o}function o(t,e,i,r){for(var n=0;n<c;++n){var o=s(e,i,r);if(0===o)return e;e-=(a(e,i,r)-t)/o}return e}function h(t){this._p=t,this._mSampleValues=y?new Float32Array(d):new Array(d),this._precomputed=!1,this.get=this.get.bind(this)}var l={};l.getBezierEasing=t;var p={},c=4,m=1e-7,f=10,d=11,u=1/(d-1),y="function"==typeof Float32Array;return h.prototype={get:function(t){var e=this._p[0],i=this._p[1],r=this._p[2],s=this._p[3];return this._precomputed||this._precompute(),e===i&&r===s?t:0===t?0:1===t?1:a(this._getTForX(t),i,s)},_precompute:function(){var t=this._p[0],e=this._p[1],i=this._p[2],r=this._p[3];this._precomputed=!0,t===e&&i===r||this._calcSampleValues()},_calcSampleValues:function(){for(var t=this._p[0],e=this._p[2],i=0;i<d;++i)this._mSampleValues[i]=a(i*u,t,e)},_getTForX:function(t){for(var e=this._p[0],i=this._p[2],r=this._mSampleValues,a=0,h=1,l=d-1;h!==l&&r[h]<=t;++h)a+=u;--h;var p=(t-r[h])/(r[h+1]-r[h]),c=a+p*u,m=s(c,e,i);return m>=.001?o(t,c,e,i):0===m?c:n(t,a,a+u,e,i)}},l}();!function(){for(var t=0,e=["ms","moz","webkit","o"],i=0;i<e.length&&!window.requestAnimationFrame;++i)window.requestAnimationFrame=window[e[i]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[e[i]+"CancelAnimationFrame"]||window[e[i]+"CancelRequestAnimationFrame"];window.requestAnimationFrame||(window.requestAnimationFrame=function(e,i){var r=(new Date).getTime(),a=Math.max(0,16-(r-t)),s=setTimeout(function(){e(r+a)},a);return t=r+a,s}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(t){clearTimeout(t)})}();var bez=bezFunction(),dataManager=dataFunctionManager(),FontManager=function(){function t(t,e){var i=createTag("span");i.style.fontFamily=e;var r=createTag("span");r.innerHTML="giItT1WQy@!-/#",i.style.position="absolute",i.style.left="-10000px",i.style.top="-10000px",i.style.fontSize="300px",i.style.fontVariant="normal",i.style.fontStyle="normal",i.style.fontWeight="normal",i.style.letterSpacing="0",i.appendChild(r),document.body.appendChild(i);var a=r.offsetWidth;return r.style.fontFamily=t+", "+e,{node:r,w:a,parent:i}}function e(){var t,e,i,r=this.fonts.length,a=r;for(t=0;t<r;t+=1)this.fonts[t].loaded?a-=1:"n"===this.fonts[t].fOrigin||0===this.fonts[t].origin?this.fonts[t].loaded=!0:(e=this.fonts[t].monoCase.node,i=this.fonts[t].monoCase.w,e.offsetWidth!==i?(a-=1,this.fonts[t].loaded=!0):(e=this.fonts[t].sansCase.node,i=this.fonts[t].sansCase.w,e.offsetWidth!==i&&(a-=1,this.fonts[t].loaded=!0)),this.fonts[t].loaded&&(this.fonts[t].sansCase.parent.parentNode.removeChild(this.fonts[t].sansCase.parent),this.fonts[t].monoCase.parent.parentNode.removeChild(this.fonts[t].monoCase.parent)));0!==a&&Date.now()-this.initTime<p?setTimeout(this.checkLoadedFonts.bind(this),20):setTimeout(function(){this.isLoaded=!0}.bind(this),0)}function i(t,e){var i=createNS("text");return i.style.fontSize="100px",i.setAttribute("font-family",e.fFamily),i.setAttribute("font-style",e.fStyle),i.setAttribute("font-weight",e.fWeight),i.textContent="1",e.fClass?(i.style.fontFamily="inherit",i.setAttribute("class",e.fClass)):i.style.fontFamily=e.fFamily,t.appendChild(i),createTag("canvas").getContext("2d").font=e.fWeight+" "+e.fStyle+" 100px "+e.fFamily,i}function r(e,r){if(!e)return void(this.isLoaded=!0);if(this.chars)return this.isLoaded=!0,void(this.fonts=e.list);var a,s=e.list,n=s.length,o=n;for(a=0;a<n;a+=1){var h,l,p=!0;if(s[a].loaded=!1,s[a].monoCase=t(s[a].fFamily,"monospace"),s[a].sansCase=t(s[a].fFamily,"sans-serif"),s[a].fPath){if("p"===s[a].fOrigin||3===s[a].origin){if(h=document.querySelectorAll('style[f-forigin="p"][f-family="'+s[a].fFamily+'"], style[f-origin="3"][f-family="'+s[a].fFamily+'"]'),h.length>0&&(p=!1),p){var c=createTag("style");c.setAttribute("f-forigin",s[a].fOrigin),c.setAttribute("f-origin",s[a].origin),c.setAttribute("f-family",s[a].fFamily),c.type="text/css",c.innerHTML="@font-face {font-family: "+s[a].fFamily+"; font-style: normal; src: url('"+s[a].fPath+"');}",r.appendChild(c)}}else if("g"===s[a].fOrigin||1===s[a].origin){for(h=document.querySelectorAll('link[f-forigin="g"], link[f-origin="1"]'),l=0;l<h.length;l++)-1!==h[l].href.indexOf(s[a].fPath)&&(p=!1);if(p){var m=createTag("link");m.setAttribute("f-forigin",s[a].fOrigin),m.setAttribute("f-origin",s[a].origin),m.type="text/css",m.rel="stylesheet",m.href=s[a].fPath,document.body.appendChild(m)}}else if("t"===s[a].fOrigin||2===s[a].origin){for(h=document.querySelectorAll('script[f-forigin="t"], script[f-origin="2"]'),l=0;l<h.length;l++)s[a].fPath===h[l].src&&(p=!1);if(p){var f=createTag("link");f.setAttribute("f-forigin",s[a].fOrigin),f.setAttribute("f-origin",s[a].origin),f.setAttribute("rel","stylesheet"),f.setAttribute("href",s[a].fPath),r.appendChild(f)}}}else s[a].loaded=!0,o-=1;s[a].helper=i(r,s[a]),s[a].cache={},this.fonts.push(s[a])}0===o?this.isLoaded=!0:setTimeout(this.checkLoadedFonts.bind(this),100)}function a(t){if(t){this.chars||(this.chars=[]);var e,i,r,a=t.length,s=this.chars.length;for(e=0;e<a;e+=1){for(i=0,r=!1;i<s;)this.chars[i].style===t[e].style&&this.chars[i].fFamily===t[e].fFamily&&this.chars[i].ch===t[e].ch&&(r=!0),i+=1;r||(this.chars.push(t[e]),s+=1)}}}function s(t,e,i){for(var r=0,a=this.chars.length;r<a;){if(this.chars[r].ch===t&&this.chars[r].style===e&&this.chars[r].fFamily===i)return this.chars[r];r+=1}return("string"==typeof t&&13!==t.charCodeAt(0)||!t)&&console&&console.warn&&console.warn("Missing character from exported characters list: ",t,e,i),c}function n(t,e,i){var r=this.getFontByName(e),a=t.charCodeAt(0);if(!r.cache[a+1]){var s=r.helper;if(" "===t){s.textContent="|"+t+"|";var n=s.getComputedTextLength();s.textContent="||";var o=s.getComputedTextLength();r.cache[a+1]=(n-o)/100}else s.textContent=t,r.cache[a+1]=s.getComputedTextLength()/100}return r.cache[a+1]*i}function o(t){for(var e=0,i=this.fonts.length;e<i;){if(this.fonts[e].fName===t)return this.fonts[e];e+=1}return this.fonts[0]}function h(){return m}function l(){return this.isLoaded}var p=5e3,c={w:0,size:0,shapes:[]},m=[];m=m.concat([2304,2305,2306,2307,2362,2363,2364,2364,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2387,2388,2389,2390,2391,2402,2403]);var f=function(){this.fonts=[],this.chars=null,this.typekitLoaded=0,this.isLoaded=!1,this.initTime=Date.now()};return f.getCombinedCharacterCodes=h,f.prototype.addChars=a,f.prototype.addFonts=r,f.prototype.getCharData=s,f.prototype.getFontByName=o,f.prototype.measureText=n,f.prototype.checkLoadedFonts=e,f.prototype.loaded=l,f}(),PropertyFactory=function(){function t(t,a){var s,n=this.offsetTime;"multidimensional"===this.propType&&(s=createTypedArray("float32",this.pv.length));for(var o,h,l=a.lastIndex,p=l,c=this.keyframes.length-1,m=!0;m;){if(o=this.keyframes[p],h=this.keyframes[p+1],p===c-1&&t>=h.t-n){o.h&&(o=h),l=0;break}if(h.t-n>t){l=p;break}p<c-1?p+=1:(l=0,m=!1)}var f,d,u,y,g,x,v,k=h.t-n,b=o.t-n;if(o.to){o.bezierData||(o.bezierData=bez.buildBezierData(o.s,h.s||o.e,o.to,o.ti));var E=o.bezierData;if(t>=k||t<b){var P=t>=k?E.points.length-1:0;for(d=E.points[P].point.length,f=0;f<d;f+=1)s[f]=E.points[P].point[f]}else{o.__fnct?x=o.__fnct:(x=BezierFactory.getBezierEasing(o.o.x,o.o.y,o.i.x,o.i.y,o.n).get,o.__fnct=x),u=x((t-b)/(k-b));var A,_=E.segmentLength*u,S=a.lastFrame<t&&a._lastKeyframeIndex===p?a._lastAddedLength:0;for(g=a.lastFrame<t&&a._lastKeyframeIndex===p?a._lastPoint:0,m=!0,y=E.points.length;m;){if(S+=E.points[g].partialLength,0===_||0===u||g===E.points.length-1){for(d=E.points[g].point.length,f=0;f<d;f+=1)s[f]=E.points[g].point[f];break}if(_>=S&&_<S+E.points[g+1].partialLength){for(A=(_-S)/E.points[g+1].partialLength,d=E.points[g].point.length,f=0;f<d;f+=1)s[f]=E.points[g].point[f]+(E.points[g+1].point[f]-E.points[g].point[f])*A;break}g<y-1?g+=1:m=!1}a._lastPoint=g,a._lastAddedLength=S-E.points[g].partialLength,a._lastKeyframeIndex=p}}else{var D,T,C,M,w;if(c=o.s.length,v=h.s||o.e,this.sh&&1!==o.h)if(t>=k)s[0]=v[0],s[1]=v[1],s[2]=v[2];else if(t<=b)s[0]=o.s[0],s[1]=o.s[1],s[2]=o.s[2];else{var F=r(o.s),B=r(v),V=(t-b)/(k-b);i(s,e(F,B,V))}else for(p=0;p<c;p+=1)1!==o.h&&(t>=k?u=1:t<b?u=0:(o.o.x.constructor===Array?(o.__fnct||(o.__fnct=[]),o.__fnct[p]?x=o.__fnct[p]:(D=void 0===o.o.x[p]?o.o.x[0]:o.o.x[p],T=void 0===o.o.y[p]?o.o.y[0]:o.o.y[p],C=void 0===o.i.x[p]?o.i.x[0]:o.i.x[p],M=void 0===o.i.y[p]?o.i.y[0]:o.i.y[p],x=BezierFactory.getBezierEasing(D,T,C,M).get,o.__fnct[p]=x)):o.__fnct?x=o.__fnct:(D=o.o.x,T=o.o.y,C=o.i.x,M=o.i.y,x=BezierFactory.getBezierEasing(D,T,C,M).get,o.__fnct=x),u=x((t-b)/(k-b)))),v=h.s||o.e,w=1===o.h?o.s[p]:o.s[p]+(v[p]-o.s[p])*u,"multidimensional"===this.propType?s[p]=w:s=w}return a.lastIndex=l,s}function e(t,e,i){var r,a,s,n,o,h=[],l=t[0],p=t[1],c=t[2],m=t[3],f=e[0],d=e[1],u=e[2],y=e[3];return a=l*f+p*d+c*u+m*y,a<0&&(a=-a,f=-f,d=-d,u=-u,y=-y),1-a>1e-6?(r=Math.acos(a),s=Math.sin(r),n=Math.sin((1-i)*r)/s,o=Math.sin(i*r)/s):(n=1-i,o=i),h[0]=n*l+o*f,h[1]=n*p+o*d,h[2]=n*c+o*u,h[3]=n*m+o*y,h}function i(t,e){var i=e[0],r=e[1],a=e[2],s=e[3],n=Math.atan2(2*r*s-2*i*a,1-2*r*r-2*a*a),o=Math.asin(2*i*r+2*a*s),h=Math.atan2(2*i*s-2*r*a,1-2*i*i-2*a*a);t[0]=n/degToRads,t[1]=o/degToRads,t[2]=h/degToRads}function r(t){var e=t[0]*degToRads,i=t[1]*degToRads,r=t[2]*degToRads,a=Math.cos(e/2),s=Math.cos(i/2),n=Math.cos(r/2),o=Math.sin(e/2),h=Math.sin(i/2),l=Math.sin(r/2);return[o*h*n+a*s*l,o*s*n+a*h*l,a*h*n-o*s*l,a*s*n-o*h*l]}function a(){var t=this.comp.renderedFrame-this.offsetTime,e=this.keyframes[0].t-this.offsetTime,i=this.keyframes[this.keyframes.length-1].t-this.offsetTime;if(!(t===this._caching.lastFrame||this._caching.lastFrame!==f&&(this._caching.lastFrame>=i&&t>=i||this._caching.lastFrame<e&&t<e))){this._caching.lastFrame>=t&&(this._caching._lastKeyframeIndex=-1,this._caching.lastIndex=0);var r=this.interpolateValue(t,this._caching);this.pv=r}return this._caching.lastFrame=t,this.pv}function s(t){var e;if("unidimensional"===this.propType)e=t*this.mult,d(this.v-e)>1e-5&&(this.v=e,this._mdf=!0);else for(var i=0,r=this.v.length;i<r;)e=t[i]*this.mult,d(this.v[i]-e)>1e-5&&(this.v[i]=e,this._mdf=!0),i+=1}function n(){if(this.elem.globalData.frameId!==this.frameId&&this.effectsSequence.length){if(this.lock)return void this.setVValue(this.pv);this.lock=!0,this._mdf=this._isFirstFrame;var t,e=this.effectsSequence.length,i=this.kf?this.pv:this.data.k;for(t=0;t<e;t+=1)i=this.effectsSequence[t](i);this.setVValue(i),this._isFirstFrame=!1,this.lock=!1,this.frameId=this.elem.globalData.frameId}}function o(t){this.effectsSequence.push(t),this.container.addDynamicProperty(this)}function h(t,e,i,r){this.propType="unidimensional",this.mult=i||1,this.data=e,this.v=i?e.k*i:e.k,this.pv=e.k,this._mdf=!1,this.elem=t,this.container=r,this.comp=t.comp,this.k=!1,this.kf=!1,this.vel=0,this.effectsSequence=[],this._isFirstFrame=!0,this.getValue=n,this.setVValue=s,this.addEffect=o}function l(t,e,i,r){this.propType="multidimensional",this.mult=i||1,this.data=e,this._mdf=!1,this.elem=t,this.container=r,this.comp=t.comp,this.k=!1,this.kf=!1,this.frameId=-1;var a,h=e.k.length;this.v=createTypedArray("float32",h),this.pv=createTypedArray("float32",h);createTypedArray("float32",h);for(this.vel=createTypedArray("float32",h),a=0;a<h;a+=1)this.v[a]=e.k[a]*this.mult,this.pv[a]=e.k[a];this._isFirstFrame=!0,this.effectsSequence=[],this.getValue=n,this.setVValue=s,this.addEffect=o}function p(e,i,r,h){this.propType="unidimensional",this.keyframes=i.k,this.offsetTime=e.data.st,this.frameId=-1,this._caching={lastFrame:f,lastIndex:0,value:0,_lastKeyframeIndex:-1},this.k=!0,this.kf=!0,this.data=i,this.mult=r||1,this.elem=e,this.container=h,this.comp=e.comp,this.v=f,this.pv=f,this._isFirstFrame=!0,this.getValue=n,this.setVValue=s,this.interpolateValue=t,this.effectsSequence=[a.bind(this)],this.addEffect=o}function c(e,i,r,h){this.propType="multidimensional";var l,p,c,m,d,u=i.k.length;for(l=0;l<u-1;l+=1)i.k[l].to&&i.k[l].s&&i.k[l].e&&(p=i.k[l].s,c=i.k[l].e,m=i.k[l].to,d=i.k[l].ti,(2===p.length&&(p[0]!==c[0]||p[1]!==c[1])&&bez.pointOnLine2D(p[0],p[1],c[0],c[1],p[0]+m[0],p[1]+m[1])&&bez.pointOnLine2D(p[0],p[1],c[0],c[1],c[0]+d[0],c[1]+d[1])||3===p.length&&(p[0]!==c[0]||p[1]!==c[1]||p[2]!==c[2])&&bez.pointOnLine3D(p[0],p[1],p[2],c[0],c[1],c[2],p[0]+m[0],p[1]+m[1],p[2]+m[2])&&bez.pointOnLine3D(p[0],p[1],p[2],c[0],c[1],c[2],c[0]+d[0],c[1]+d[1],c[2]+d[2]))&&(i.k[l].to=null,i.k[l].ti=null),p[0]===c[0]&&p[1]===c[1]&&0===m[0]&&0===m[1]&&0===d[0]&&0===d[1]&&(2===p.length||p[2]===c[2]&&0===m[2]&&0===d[2])&&(i.k[l].to=null,i.k[l].ti=null));this.effectsSequence=[a.bind(this)],this.keyframes=i.k,this.offsetTime=e.data.st,this.k=!0,this.kf=!0,this._isFirstFrame=!0,this.mult=r||1,this.elem=e,this.container=h,this.comp=e.comp,this.getValue=n,this.setVValue=s,this.interpolateValue=t,this.frameId=-1;var y=i.k[0].s.length;for(this.v=createTypedArray("float32",y),this.pv=createTypedArray("float32",y),l=0;l<y;l+=1)this.v[l]=f,this.pv[l]=f;this._caching={lastFrame:f,lastIndex:0,value:createTypedArray("float32",y)},this.addEffect=o}function m(t,e,i,r,a){var s;if(e.k.length)if("number"==typeof e.k[0])s=new l(t,e,r,a);else switch(i){case 0:s=new p(t,e,r,a);break;case 1:s=new c(t,e,r,a)}else s=new h(t,e,r,a);return s.effectsSequence.length&&a.addDynamicProperty(s),s}var f=initialDefaultFrame,d=Math.abs;return{getProp:m}}(),TransformPropertyFactory=function(){function t(t){var e=this._mdf;this.iterateDynamicProperties(),this._mdf=this._mdf||e,this.a&&t.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.s&&t.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.sk&&t.skewFromAxis(-this.sk.v,this.sa.v),this.r?t.rotate(-this.r.v):t.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.data.p.s?this.data.p.z?t.translate(this.px.v,this.py.v,-this.pz.v):t.translate(this.px.v,this.py.v,0):t.translate(this.p.v[0],this.p.v[1],-this.p.v[2])}function e(t){if(this.elem.globalData.frameId!==this.frameId){if(this._isDirty&&(this.precalculateMatrix(),this._isDirty=!1),this.iterateDynamicProperties(),this._mdf||t){if(this.v.cloneFromProps(this.pre.props),this.appliedTransformations<1&&this.v.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.appliedTransformations<2&&this.v.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.sk&&this.appliedTransformations<3&&this.v.skewFromAxis(-this.sk.v,this.sa.v),this.r&&this.appliedTransformations<4?this.v.rotate(-this.r.v):!this.r&&this.appliedTransformations<4&&this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.autoOriented){var e,i,r=this.elem.globalData.frameRate;if(this.p&&this.p.keyframes&&this.p.getValueAtTime)this.p._caching.lastFrame+this.p.offsetTime<=this.p.keyframes[0].t?(e=this.p.getValueAtTime((this.p.keyframes[0].t+.01)/r,0),i=this.p.getValueAtTime(this.p.keyframes[0].t/r,0)):this.p._caching.lastFrame+this.p.offsetTime>=this.p.keyframes[this.p.keyframes.length-1].t?(e=this.p.getValueAtTime(this.p.keyframes[this.p.keyframes.length-1].t/r,0),i=this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length-1].t-.05)/r,0)):(e=this.p.pv,i=this.p.getValueAtTime((this.p._caching.lastFrame+this.p.offsetTime-.01)/r,this.p.offsetTime));else if(this.px&&this.px.keyframes&&this.py.keyframes&&this.px.getValueAtTime&&this.py.getValueAtTime){e=[],i=[];var r,a=this.px,s=this.py;a._caching.lastFrame+a.offsetTime<=a.keyframes[0].t?(e[0]=a.getValueAtTime((a.keyframes[0].t+.01)/r,0),e[1]=s.getValueAtTime((s.keyframes[0].t+.01)/r,0),i[0]=a.getValueAtTime(a.keyframes[0].t/r,0),i[1]=s.getValueAtTime(s.keyframes[0].t/r,0)):a._caching.lastFrame+a.offsetTime>=a.keyframes[a.keyframes.length-1].t?(e[0]=a.getValueAtTime(a.keyframes[a.keyframes.length-1].t/r,0),e[1]=s.getValueAtTime(s.keyframes[s.keyframes.length-1].t/r,0),i[0]=a.getValueAtTime((a.keyframes[a.keyframes.length-1].t-.01)/r,0),i[1]=s.getValueAtTime((s.keyframes[s.keyframes.length-1].t-.01)/r,0)):(e=[a.pv,s.pv],i[0]=a.getValueAtTime((a._caching.lastFrame+a.offsetTime-.01)/r,a.offsetTime),i[1]=s.getValueAtTime((s._caching.lastFrame+s.offsetTime-.01)/r,s.offsetTime))}this.v.rotate(-Math.atan2(e[1]-i[1],e[0]-i[0]))}this.data.p&&this.data.p.s?this.data.p.z?this.v.translate(this.px.v,this.py.v,-this.pz.v):this.v.translate(this.px.v,this.py.v,0):this.v.translate(this.p.v[0],this.p.v[1],-this.p.v[2])}this.frameId=this.elem.globalData.frameId}}function i(){if(!this.a.k&&(this.pre.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.appliedTransformations=1,!this.s.effectsSequence.length)){if(this.pre.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.appliedTransformations=2,this.sk){if(this.sk.effectsSequence.length||this.sa.effectsSequence.length)return;this.pre.skewFromAxis(-this.sk.v,this.sa.v),this.appliedTransformations=3}if(this.r){if(this.r.effectsSequence.length)return;this.pre.rotate(-this.r.v),this.appliedTransformations=4}else this.rz.effectsSequence.length||this.ry.effectsSequence.length||this.rx.effectsSequence.length||this.or.effectsSequence.length||(this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.appliedTransformations=4)}}function r(){}function a(t){this._addDynamicProperty(t),this.elem.addDynamicProperty(t),this._isDirty=!0}function s(t,e,i){if(this.elem=t,this.frameId=-1,this.propType="transform",this.data=e,this.v=new Matrix,this.pre=new Matrix,this.appliedTransformations=0,this.initDynamicPropertyContainer(i||t),e.p&&e.p.s?(this.px=PropertyFactory.getProp(t,e.p.x,0,0,this),this.py=PropertyFactory.getProp(t,e.p.y,0,0,this),e.p.z&&(this.pz=PropertyFactory.getProp(t,e.p.z,0,0,this))):this.p=PropertyFactory.getProp(t,e.p||{k:[0,0,0]},1,0,this),e.rx){if(this.rx=PropertyFactory.getProp(t,e.rx,0,degToRads,this),this.ry=PropertyFactory.getProp(t,e.ry,0,degToRads,this),this.rz=PropertyFactory.getProp(t,e.rz,0,degToRads,this),e.or.k[0].ti){var r,a=e.or.k.length;for(r=0;r<a;r+=1)e.or.k[r].to=e.or.k[r].ti=null}this.or=PropertyFactory.getProp(t,e.or,1,degToRads,this),this.or.sh=!0}else this.r=PropertyFactory.getProp(t,e.r||{k:0},0,degToRads,this);e.sk&&(this.sk=PropertyFactory.getProp(t,e.sk,0,degToRads,this),this.sa=PropertyFactory.getProp(t,e.sa,0,degToRads,this)),this.a=PropertyFactory.getProp(t,e.a||{k:[0,0,0]},1,0,this),this.s=PropertyFactory.getProp(t,e.s||{k:[100,100,100]},1,.01,this),e.o?this.o=PropertyFactory.getProp(t,e.o,0,.01,t):this.o={_mdf:!1,v:1},this._isDirty=!0,this.dynamicProperties.length||this.getValue(!0)}function n(t,e,i){return new s(t,e,i)}return s.prototype={applyToMatrix:t,getValue:e,precalculateMatrix:i,autoOrient:r},extendPrototype([DynamicPropertyContainer],s),s.prototype.addDynamicProperty=a,s.prototype._addDynamicProperty=DynamicPropertyContainer.prototype.addDynamicProperty,{getTransformProperty:n}}();ShapePath.prototype.setPathData=function(t,e){this.c=t,this.setLength(e);for(var i=0;i<e;)this.v[i]=point_pool.newElement(),this.o[i]=point_pool.newElement(),this.i[i]=point_pool.newElement(),i+=1},ShapePath.prototype.setLength=function(t){for(;this._maxLength<t;)this.doubleArrayLength();this._length=t},ShapePath.prototype.doubleArrayLength=function(){this.v=this.v.concat(createSizedArray(this._maxLength)),this.i=this.i.concat(createSizedArray(this._maxLength)),this.o=this.o.concat(createSizedArray(this._maxLength)),this._maxLength*=2},ShapePath.prototype.setXYAt=function(t,e,i,r,a){var s;switch(this._length=Math.max(this._length,r+1),this._length>=this._maxLength&&this.doubleArrayLength(),i){case"v":s=this.v;break;case"i":s=this.i;break;case"o":s=this.o}(!s[r]||s[r]&&!a)&&(s[r]=point_pool.newElement()),s[r][0]=t,s[r][1]=e},ShapePath.prototype.setTripleAt=function(t,e,i,r,a,s,n,o){this.setXYAt(t,e,"v",n,o),this.setXYAt(i,r,"o",n,o),this.setXYAt(a,s,"i",n,o)},ShapePath.prototype.reverse=function(){var t=new ShapePath;t.setPathData(this.c,this._length);var e=this.v,i=this.o,r=this.i,a=0;this.c&&(t.setTripleAt(e[0][0],e[0][1],r[0][0],r[0][1],i[0][0],i[0][1],0,!1),a=1);var s,n=this._length-1,o=this._length;for(s=a;s<o;s+=1)t.setTripleAt(e[n][0],e[n][1],r[n][0],r[n][1],i[n][0],i[n][1],s,!1),n-=1;return t};var ShapePropertyFactory=function(){function t(t,e,i){var r,a,s,n,o,h,l,p,c,m=i.lastIndex,f=this.keyframes;if(t<f[0].t-this.offsetTime)r=f[0].s[0],s=!0,m=0;else if(t>=f[f.length-1].t-this.offsetTime)r=f[f.length-1].s?f[f.length-1].s[0]:f[f.length-2].e[0],s=!0;else{for(var d,u,y=m,g=f.length-1,x=!0;x&&(d=f[y],u=f[y+1],!(u.t-this.offsetTime>t));)y<g-1?y+=1:x=!1;if(s=1===d.h,m=y,!s){if(t>=u.t-this.offsetTime)p=1;else if(t<d.t-this.offsetTime)p=0;else{var v;d.__fnct?v=d.__fnct:(v=BezierFactory.getBezierEasing(d.o.x,d.o.y,d.i.x,d.i.y).get,d.__fnct=v),p=v((t-(d.t-this.offsetTime))/(u.t-this.offsetTime-(d.t-this.offsetTime)))}a=u.s?u.s[0]:d.e[0]}r=d.s[0]}for(h=e._length,l=r.i[0].length,i.lastIndex=m,n=0;n<h;n+=1)for(o=0;o<l;o+=1)c=s?r.i[n][o]:r.i[n][o]+(a.i[n][o]-r.i[n][o])*p,e.i[n][o]=c,c=s?r.o[n][o]:r.o[n][o]+(a.o[n][o]-r.o[n][o])*p,e.o[n][o]=c,c=s?r.v[n][o]:r.v[n][o]+(a.v[n][o]-r.v[n][o])*p,e.v[n][o]=c}function e(){var t=this.comp.renderedFrame-this.offsetTime,e=this.keyframes[0].t-this.offsetTime,i=this.keyframes[this.keyframes.length-1].t-this.offsetTime,r=this._caching.lastFrame;return r!==m&&(r<e&&t<e||r>i&&t>i)||(this._caching.lastIndex=r<t?this._caching.lastIndex:0,this.interpolateShape(t,this.pv,this._caching)),this._caching.lastFrame=t,this.pv}function i(){this.paths=this.localShapeCollection}function r(t,e){if(t._length!==e._length||t.c!==e.c)return!1;var i,r=t._length;for(i=0;i<r;i+=1)if(t.v[i][0]!==e.v[i][0]||t.v[i][1]!==e.v[i][1]||t.o[i][0]!==e.o[i][0]||t.o[i][1]!==e.o[i][1]||t.i[i][0]!==e.i[i][0]||t.i[i][1]!==e.i[i][1])return!1;return!0}function a(t){r(this.v,t)||(this.v=shape_pool.clone(t),this.localShapeCollection.releaseShapes(),this.localShapeCollection.addShape(this.v),this._mdf=!0,this.paths=this.localShapeCollection)}function s(){if(this.elem.globalData.frameId!==this.frameId){if(!this.effectsSequence.length)return void(this._mdf=!1);if(this.lock)return void this.setVValue(this.pv);this.lock=!0,this._mdf=!1;var t,e=this.kf?this.pv:this.data.ks?this.data.ks.k:this.data.pt.k,i=this.effectsSequence.length;for(t=0;t<i;t+=1)e=this.effectsSequence[t](e);this.setVValue(e),this.lock=!1,this.frameId=this.elem.globalData.frameId}}function n(t,e,r){this.propType="shape",this.comp=t.comp,this.container=t,this.elem=t,this.data=e,this.k=!1,this.kf=!1,this._mdf=!1;var a=3===r?e.pt.k:e.ks.k;this.v=shape_pool.clone(a),this.pv=shape_pool.clone(this.v),this.localShapeCollection=shapeCollection_pool.newShapeCollection(),this.paths=this.localShapeCollection,this.paths.addShape(this.v),this.reset=i,this.effectsSequence=[]}function o(t){this.effectsSequence.push(t),this.container.addDynamicProperty(this)}function h(t,r,a){this.propType="shape",this.comp=t.comp,this.elem=t,this.container=t,this.offsetTime=t.data.st,this.keyframes=3===a?r.pt.k:r.ks.k,this.k=!0,this.kf=!0;var s=this.keyframes[0].s[0].i.length;this.keyframes[0].s[0].i[0].length;this.v=shape_pool.newElement(),this.v.setPathData(this.keyframes[0].s[0].c,s),this.pv=shape_pool.clone(this.v),this.localShapeCollection=shapeCollection_pool.newShapeCollection(),this.paths=this.localShapeCollection,this.paths.addShape(this.v),this.lastFrame=m,this.reset=i,this._caching={lastFrame:m,lastIndex:0},this.effectsSequence=[e.bind(this)]}function l(t,e,i){var r;if(3===i||4===i){r=(3===i?e.pt:e.ks).k.length?new h(t,e,i):new n(t,e,i)}else 5===i?r=new u(t,e):6===i?r=new f(t,e):7===i&&(r=new d(t,e));return r.k&&t.addDynamicProperty(r),r}function p(){return n}function c(){return h}var m=-999999;n.prototype.interpolateShape=t,n.prototype.getValue=s,n.prototype.setVValue=a,n.prototype.addEffect=o,h.prototype.getValue=s,h.prototype.interpolateShape=t,h.prototype.setVValue=a,h.prototype.addEffect=o;var f=function(){function t(t,e){this.v=shape_pool.newElement(),this.v.setPathData(!0,4),this.localShapeCollection=shapeCollection_pool.newShapeCollection(),this.paths=this.localShapeCollection,this.localShapeCollection.addShape(this.v),this.d=e.d,this.elem=t,this.comp=t.comp,this.frameId=-1,this.initDynamicPropertyContainer(t),this.p=PropertyFactory.getProp(t,e.p,1,0,this),this.s=PropertyFactory.getProp(t,e.s,1,0,this),this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertEllToPath())}var e=roundCorner;return t.prototype={reset:i,getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertEllToPath())},convertEllToPath:function(){var t=this.p.v[0],i=this.p.v[1],r=this.s.v[0]/2,a=this.s.v[1]/2,s=3!==this.d,n=this.v;n.v[0][0]=t,n.v[0][1]=i-a,n.v[1][0]=s?t+r:t-r,n.v[1][1]=i,n.v[2][0]=t,n.v[2][1]=i+a,n.v[3][0]=s?t-r:t+r,n.v[3][1]=i,n.i[0][0]=s?t-r*e:t+r*e,n.i[0][1]=i-a,n.i[1][0]=s?t+r:t-r,n.i[1][1]=i-a*e,n.i[2][0]=s?t+r*e:t-r*e,n.i[2][1]=i+a,n.i[3][0]=s?t-r:t+r,n.i[3][1]=i+a*e,n.o[0][0]=s?t+r*e:t-r*e,n.o[0][1]=i-a,n.o[1][0]=s?t+r:t-r,n.o[1][1]=i+a*e,n.o[2][0]=s?t-r*e:t+r*e,n.o[2][1]=i+a,n.o[3][0]=s?t-r:t+r,n.o[3][1]=i-a*e}},extendPrototype([DynamicPropertyContainer],t),t}(),d=function(){function t(t,e){this.v=shape_pool.newElement(),this.v.setPathData(!0,0),this.elem=t,this.comp=t.comp,this.data=e,this.frameId=-1,this.d=e.d,this.initDynamicPropertyContainer(t),1===e.sy?(this.ir=PropertyFactory.getProp(t,e.ir,0,0,this),this.is=PropertyFactory.getProp(t,e.is,0,.01,this),this.convertToPath=this.convertStarToPath):this.convertToPath=this.convertPolygonToPath,this.pt=PropertyFactory.getProp(t,e.pt,0,0,this),this.p=PropertyFactory.getProp(t,e.p,1,0,this),this.r=PropertyFactory.getProp(t,e.r,0,degToRads,this),this.or=PropertyFactory.getProp(t,e.or,0,0,this),this.os=PropertyFactory.getProp(t,e.os,0,.01,this),this.localShapeCollection=shapeCollection_pool.newShapeCollection(),this.localShapeCollection.addShape(this.v),this.paths=this.localShapeCollection,this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertToPath())}return t.prototype={reset:i,getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertToPath())},convertStarToPath:function(){var t,e,i,r,a=2*Math.floor(this.pt.v),s=2*Math.PI/a,n=!0,o=this.or.v,h=this.ir.v,l=this.os.v,p=this.is.v,c=2*Math.PI*o/(2*a),m=2*Math.PI*h/(2*a),f=-Math.PI/2;f+=this.r.v;var d=3===this.data.d?-1:1;for(this.v._length=0,t=0;t<a;t+=1){e=n?o:h,i=n?l:p,r=n?c:m;var u=e*Math.cos(f),y=e*Math.sin(f),g=0===u&&0===y?0:y/Math.sqrt(u*u+y*y),x=0===u&&0===y?0:-u/Math.sqrt(u*u+y*y);u+=+this.p.v[0],y+=+this.p.v[1],this.v.setTripleAt(u,y,u-g*r*i*d,y-x*r*i*d,u+g*r*i*d,y+x*r*i*d,t,!0),n=!n,f+=s*d}},convertPolygonToPath:function(){var t,e=Math.floor(this.pt.v),i=2*Math.PI/e,r=this.or.v,a=this.os.v,s=2*Math.PI*r/(4*e),n=-Math.PI/2,o=3===this.data.d?-1:1;for(n+=this.r.v,this.v._length=0,t=0;t<e;t+=1){var h=r*Math.cos(n),l=r*Math.sin(n),p=0===h&&0===l?0:l/Math.sqrt(h*h+l*l),c=0===h&&0===l?0:-h/Math.sqrt(h*h+l*l);h+=+this.p.v[0],l+=+this.p.v[1],this.v.setTripleAt(h,l,h-p*s*a*o,l-c*s*a*o,h+p*s*a*o,l+c*s*a*o,t,!0),n+=i*o}this.paths.length=0,this.paths[0]=this.v}},extendPrototype([DynamicPropertyContainer],t),t}(),u=function(){function t(t,e){this.v=shape_pool.newElement(),this.v.c=!0,this.localShapeCollection=shapeCollection_pool.newShapeCollection(),this.localShapeCollection.addShape(this.v),this.paths=this.localShapeCollection,this.elem=t,this.comp=t.comp,this.frameId=-1,this.d=e.d,this.initDynamicPropertyContainer(t),this.p=PropertyFactory.getProp(t,e.p,1,0,this),this.s=PropertyFactory.getProp(t,e.s,1,0,this),this.r=PropertyFactory.getProp(t,e.r,0,0,this),this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertRectToPath())}return t.prototype={convertRectToPath:function(){var t=this.p.v[0],e=this.p.v[1],i=this.s.v[0]/2,r=this.s.v[1]/2,a=bm_min(i,r,this.r.v),s=a*(1-roundCorner);this.v._length=0,2===this.d||1===this.d?(this.v.setTripleAt(t+i,e-r+a,t+i,e-r+a,t+i,e-r+s,0,!0),this.v.setTripleAt(t+i,e+r-a,t+i,e+r-s,t+i,e+r-a,1,!0),0!==a?(this.v.setTripleAt(t+i-a,e+r,t+i-a,e+r,t+i-s,e+r,2,!0),this.v.setTripleAt(t-i+a,e+r,t-i+s,e+r,t-i+a,e+r,3,!0),this.v.setTripleAt(t-i,e+r-a,t-i,e+r-a,t-i,e+r-s,4,!0),this.v.setTripleAt(t-i,e-r+a,t-i,e-r+s,t-i,e-r+a,5,!0),this.v.setTripleAt(t-i+a,e-r,t-i+a,e-r,t-i+s,e-r,6,!0),this.v.setTripleAt(t+i-a,e-r,t+i-s,e-r,t+i-a,e-r,7,!0)):(this.v.setTripleAt(t-i,e+r,t-i+s,e+r,t-i,e+r,2),this.v.setTripleAt(t-i,e-r,t-i,e-r+s,t-i,e-r,3))):(this.v.setTripleAt(t+i,e-r+a,t+i,e-r+s,t+i,e-r+a,0,!0),0!==a?(this.v.setTripleAt(t+i-a,e-r,t+i-a,e-r,t+i-s,e-r,1,!0),this.v.setTripleAt(t-i+a,e-r,t-i+s,e-r,t-i+a,e-r,2,!0),this.v.setTripleAt(t-i,e-r+a,t-i,e-r+a,t-i,e-r+s,3,!0),this.v.setTripleAt(t-i,e+r-a,t-i,e+r-s,t-i,e+r-a,4,!0),this.v.setTripleAt(t-i+a,e+r,t-i+a,e+r,t-i+s,e+r,5,!0),this.v.setTripleAt(t+i-a,e+r,t+i-s,e+r,t+i-a,e+r,6,!0),this.v.setTripleAt(t+i,e+r-a,t+i,e+r-a,t+i,e+r-s,7,!0)):(this.v.setTripleAt(t-i,e-r,t-i+s,e-r,t-i,e-r,1,!0),this.v.setTripleAt(t-i,e+r,t-i,e+r-s,t-i,e+r,2,!0),this.v.setTripleAt(t+i,e+r,t+i-s,e+r,t+i,e+r,3,!0)))},getValue:function(t){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertRectToPath())},reset:i},extendPrototype([DynamicPropertyContainer],t),t}(),y={};return y.getShapeProp=l,y.getConstructorFunction=p,y.getKeyframedConstructorFunction=c,y}(),ShapeModifiers=function(){function t(t,e){r[t]||(r[t]=e)}function e(t,e,i){return new r[t](e,i)}var i={},r={};return i.registerModifier=t,i.getModifier=e,i}();ShapeModifier.prototype.initModifierProperties=function(){},ShapeModifier.prototype.addShapeToModifier=function(){},ShapeModifier.prototype.addShape=function(t){if(!this.closed){t.sh.container.addDynamicProperty(t.sh);var e={shape:t.sh,data:t,localShapeCollection:shapeCollection_pool.newShapeCollection()};this.shapes.push(e),this.addShapeToModifier(e),this._isAnimated&&t.setAsAnimated()}},ShapeModifier.prototype.init=function(t,e){this.shapes=[],this.elem=t,this.initDynamicPropertyContainer(t),this.initModifierProperties(t,e),this.frameId=initialDefaultFrame,this.closed=!1,this.k=!1,this.dynamicProperties.length?this.k=!0:this.getValue(!0)},ShapeModifier.prototype.processKeys=function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties())},extendPrototype([DynamicPropertyContainer],ShapeModifier),extendPrototype([ShapeModifier],TrimModifier),TrimModifier.prototype.initModifierProperties=function(t,e){this.s=PropertyFactory.getProp(t,e.s,0,.01,this),this.e=PropertyFactory.getProp(t,e.e,0,.01,this),this.o=PropertyFactory.getProp(t,e.o,0,0,this),this.sValue=0,this.eValue=0,this.getValue=this.processKeys,this.m=e.m,this._isAnimated=!!this.s.effectsSequence.length||!!this.e.effectsSequence.length||!!this.o.effectsSequence.length},TrimModifier.prototype.addShapeToModifier=function(t){t.pathsData=[]},TrimModifier.prototype.calculateShapeEdges=function(t,e,i,r,a){var s=[];e<=1?s.push({s:t,e:e}):t>=1?s.push({s:t-1,e:e-1}):(s.push({s:t,e:1}),s.push({s:0,e:e-1}));var n,o,h=[],l=s.length;for(n=0;n<l;n+=1)if(o=s[n],o.e*a<r||o.s*a>r+i);else{var p,c;p=o.s*a<=r?0:(o.s*a-r)/i,c=o.e*a>=r+i?1:(o.e*a-r)/i,h.push([p,c])}return h.length||h.push([0,0]),h},TrimModifier.prototype.releasePathsData=function(t){var e,i=t.length;for(e=0;e<i;e+=1)segments_length_pool.release(t[e]);return t.length=0,t},TrimModifier.prototype.processShapes=function(t){var e,i;if(this._mdf||t){var r=this.o.v%360/360;if(r<0&&(r+=1),e=(this.s.v>1?1:this.s.v<0?0:this.s.v)+r,i=(this.e.v>1?1:this.e.v<0?0:this.e.v)+r,e>i){var a=e;e=i,i=a}e=1e-4*Math.round(1e4*e),i=1e-4*Math.round(1e4*i),this.sValue=e,this.eValue=i}else e=this.sValue,i=this.eValue;var s,n,o,h,l,p,c,m=this.shapes.length,f=0;if(i===e)for(n=0;n<m;n+=1)this.shapes[n].localShapeCollection.releaseShapes(),this.shapes[n].shape._mdf=!0,this.shapes[n].shape.paths=this.shapes[n].localShapeCollection;else if(1===i&&0===e||0===i&&1===e){if(this._mdf)for(n=0;n<m;n+=1)this.shapes[n].pathsData.length=0,this.shapes[n].shape._mdf=!0}else{var d,u,y=[];for(n=0;n<m;n+=1)if(d=this.shapes[n],d.shape._mdf||this._mdf||t||2===this.m){if(s=d.shape.paths,h=s._length,c=0,!d.shape._mdf&&d.pathsData.length)c=d.totalShapeLength;else{for(l=this.releasePathsData(d.pathsData),o=0;o<h;o+=1)p=bez.getSegmentsLength(s.shapes[o]),l.push(p),c+=p.totalLength;d.totalShapeLength=c,d.pathsData=l}f+=c,d.shape._mdf=!0}else d.shape.paths=d.localShapeCollection;var g,x=e,v=i,k=0;for(n=m-1;n>=0;n-=1)if(d=this.shapes[n],d.shape._mdf){for(u=d.localShapeCollection,u.releaseShapes(),2===this.m&&m>1?(g=this.calculateShapeEdges(e,i,d.totalShapeLength,k,f),k+=d.totalShapeLength):g=[[x,v]],h=g.length,o=0;o<h;o+=1){x=g[o][0],v=g[o][1],y.length=0,v<=1?y.push({s:d.totalShapeLength*x,e:d.totalShapeLength*v}):x>=1?y.push({s:d.totalShapeLength*(x-1),e:d.totalShapeLength*(v-1)}):(y.push({s:d.totalShapeLength*x,e:d.totalShapeLength}),y.push({s:0,e:d.totalShapeLength*(v-1)}));var b=this.addShapes(d,y[0]);if(y[0].s!==y[0].e){if(y.length>1){var E=d.shape.paths.shapes[d.shape.paths._length-1];if(E.c){var P=b.pop();this.addPaths(b,u),b=this.addShapes(d,y[1],P)}else this.addPaths(b,u),b=this.addShapes(d,y[1])}this.addPaths(b,u)}}d.shape.paths=u}}},TrimModifier.prototype.addPaths=function(t,e){var i,r=t.length;for(i=0;i<r;i+=1)e.addShape(t[i])},TrimModifier.prototype.addSegment=function(t,e,i,r,a,s,n){a.setXYAt(e[0],e[1],"o",s),a.setXYAt(i[0],i[1],"i",s+1),n&&a.setXYAt(t[0],t[1],"v",s),a.setXYAt(r[0],r[1],"v",s+1)},TrimModifier.prototype.addSegmentFromArray=function(t,e,i,r){e.setXYAt(t[1],t[5],"o",i),e.setXYAt(t[2],t[6],"i",i+1),r&&e.setXYAt(t[0],t[4],"v",i),e.setXYAt(t[3],t[7],"v",i+1)},TrimModifier.prototype.addShapes=function(t,e,i){var r,a,s,n,o,h,l,p,c=t.pathsData,m=t.shape.paths.shapes,f=t.shape.paths._length,d=0,u=[],y=!0;for(i?(o=i._length,p=i._length):(i=shape_pool.newElement(),o=0,p=0),u.push(i),r=0;r<f;r+=1){for(h=c[r].lengths,i.c=m[r].c,s=m[r].c?h.length:h.length+1,a=1;a<s;a+=1)if(n=h[a-1],d+n.addedLength<e.s)d+=n.addedLength,i.c=!1;else{if(d>e.e){i.c=!1;break}e.s<=d&&e.e>=d+n.addedLength?(this.addSegment(m[r].v[a-1],m[r].o[a-1],m[r].i[a],m[r].v[a],i,o,y),y=!1):(l=bez.getNewSegment(m[r].v[a-1],m[r].v[a],m[r].o[a-1],m[r].i[a],(e.s-d)/n.addedLength,(e.e-d)/n.addedLength,h[a-1]),this.addSegmentFromArray(l,i,o,y),y=!1,i.c=!1),d+=n.addedLength,o+=1}if(m[r].c&&h.length){if(n=h[a-1],d<=e.e){var g=h[a-1].addedLength;e.s<=d&&e.e>=d+g?(this.addSegment(m[r].v[a-1],m[r].o[a-1],m[r].i[0],m[r].v[0],i,o,y),y=!1):(l=bez.getNewSegment(m[r].v[a-1],m[r].v[0],m[r].o[a-1],m[r].i[0],(e.s-d)/g,(e.e-d)/g,h[a-1]),this.addSegmentFromArray(l,i,o,y),y=!1,i.c=!1)}else i.c=!1;d+=n.addedLength,o+=1}if(i._length&&(i.setXYAt(i.v[p][0],i.v[p][1],"i",p),i.setXYAt(i.v[i._length-1][0],i.v[i._length-1][1],"o",i._length-1)),d>e.e)break;r<f-1&&(i=shape_pool.newElement(),y=!0,u.push(i),o=0)}return u},ShapeModifiers.registerModifier("tm",TrimModifier),extendPrototype([ShapeModifier],RoundCornersModifier),RoundCornersModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.rd=PropertyFactory.getProp(t,e.r,0,null,this),this._isAnimated=!!this.rd.effectsSequence.length},RoundCornersModifier.prototype.processPath=function(t,e){var i=shape_pool.newElement();i.c=t.c;var r,a,s,n,o,h,l,p,c,m,f,d,u,y=t._length,g=0;for(r=0;r<y;r+=1)a=t.v[r],n=t.o[r],s=t.i[r],a[0]===n[0]&&a[1]===n[1]&&a[0]===s[0]&&a[1]===s[1]?0!==r&&r!==y-1||t.c?(o=0===r?t.v[y-1]:t.v[r-1],h=Math.sqrt(Math.pow(a[0]-o[0],2)+Math.pow(a[1]-o[1],2)),l=h?Math.min(h/2,e)/h:0,p=d=a[0]+(o[0]-a[0])*l,c=u=a[1]-(a[1]-o[1])*l,m=p-(p-a[0])*roundCorner,f=c-(c-a[1])*roundCorner,i.setTripleAt(p,c,m,f,d,u,g),g+=1,o=r===y-1?t.v[0]:t.v[r+1],h=Math.sqrt(Math.pow(a[0]-o[0],2)+Math.pow(a[1]-o[1],2)),l=h?Math.min(h/2,e)/h:0,p=m=a[0]+(o[0]-a[0])*l,c=f=a[1]+(o[1]-a[1])*l,d=p-(p-a[0])*roundCorner,u=c-(c-a[1])*roundCorner,i.setTripleAt(p,c,m,f,d,u,g),g+=1):(i.setTripleAt(a[0],a[1],n[0],n[1],s[0],s[1],g),g+=1):(i.setTripleAt(t.v[r][0],t.v[r][1],t.o[r][0],t.o[r][1],t.i[r][0],t.i[r][1],g),g+=1);return i},RoundCornersModifier.prototype.processShapes=function(t){var e,i,r,a,s=this.shapes.length,n=this.rd.v;if(0!==n){var o,h;for(i=0;i<s;i+=1){if(o=this.shapes[i],o.shape.paths,h=o.localShapeCollection,o.shape._mdf||this._mdf||t)for(h.releaseShapes(),o.shape._mdf=!0,e=o.shape.paths.shapes,a=o.shape.paths._length,r=0;r<a;r+=1)h.addShape(this.processPath(e[r],n));o.shape.paths=o.localShapeCollection}}this.dynamicProperties.length||(this._mdf=!1)},ShapeModifiers.registerModifier("rd",RoundCornersModifier),extendPrototype([ShapeModifier],RepeaterModifier),RepeaterModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.c=PropertyFactory.getProp(t,e.c,0,null,this),this.o=PropertyFactory.getProp(t,e.o,0,null,this),this.tr=TransformPropertyFactory.getTransformProperty(t,e.tr,this),this.so=PropertyFactory.getProp(t,e.tr.so,0,.01,this),this.eo=PropertyFactory.getProp(t,e.tr.eo,0,.01,this),this.data=e,this.dynamicProperties.length||this.getValue(!0),this._isAnimated=!!this.dynamicProperties.length,this.pMatrix=new Matrix,this.rMatrix=new Matrix,this.sMatrix=new Matrix,this.tMatrix=new Matrix,this.matrix=new Matrix},RepeaterModifier.prototype.applyTransforms=function(t,e,i,r,a,s){var n=s?-1:1,o=r.s.v[0]+(1-r.s.v[0])*(1-a),h=r.s.v[1]+(1-r.s.v[1])*(1-a);t.translate(r.p.v[0]*n*a,r.p.v[1]*n*a,r.p.v[2]),e.translate(-r.a.v[0],-r.a.v[1],r.a.v[2]),e.rotate(-r.r.v*n*a),e.translate(r.a.v[0],r.a.v[1],r.a.v[2]),i.translate(-r.a.v[0],-r.a.v[1],r.a.v[2]),i.scale(s?1/o:o,s?1/h:h),i.translate(r.a.v[0],r.a.v[1],r.a.v[2])},RepeaterModifier.prototype.init=function(t,e,i,r){this.elem=t,this.arr=e,this.pos=i,this.elemsData=r,this._currentCopies=0,this._elements=[],this._groups=[],this.frameId=-1,this.initDynamicPropertyContainer(t),this.initModifierProperties(t,e[i]);for(var a=0;i>0;)i-=1,this._elements.unshift(e[i]),a+=1;this.dynamicProperties.length?this.k=!0:this.getValue(!0)},RepeaterModifier.prototype.resetElements=function(t){var e,i=t.length;for(e=0;e<i;e+=1)t[e]._processed=!1,"gr"===t[e].ty&&this.resetElements(t[e].it)},RepeaterModifier.prototype.cloneElements=function(t){var e=(t.length,JSON.parse(JSON.stringify(t)));return this.resetElements(e),e},RepeaterModifier.prototype.changeGroupRender=function(t,e){var i,r=t.length;for(i=0;i<r;i+=1)t[i]._render=e,"gr"===t[i].ty&&this.changeGroupRender(t[i].it,e)},RepeaterModifier.prototype.processShapes=function(t){var e,i,r,a,s;if(this._mdf||t){var n=Math.ceil(this.c.v);if(this._groups.length<n){for(;this._groups.length<n;){var o={it:this.cloneElements(this._elements),ty:"gr"};o.it.push({a:{a:0,ix:1,k:[0,0]},nm:"Transform",o:{a:0,ix:7,k:100},p:{a:0,ix:2,k:[0,0]},r:{a:1,ix:6,k:[{s:0,e:0,t:0},{s:0,e:0,t:1}]},s:{a:0,ix:3,k:[100,100]},sa:{a:0,ix:5,k:0},sk:{a:0,ix:4,k:0},ty:"tr"}),this.arr.splice(0,0,o),this._groups.splice(0,0,o),this._currentCopies+=1}this.elem.reloadShapes()}s=0;var h;for(r=0;r<=this._groups.length-1;r+=1)h=s<n,this._groups[r]._render=h,this.changeGroupRender(this._groups[r].it,h),s+=1;this._currentCopies=n;var l=this.o.v,p=l%1,c=l>0?Math.floor(l):Math.ceil(l),m=(this.tr.v.props,this.pMatrix.props),f=this.rMatrix.props,d=this.sMatrix.props;this.pMatrix.reset(),this.rMatrix.reset(),this.sMatrix.reset(),this.tMatrix.reset(),this.matrix.reset();var u=0;if(l>0){for(;u<c;)this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!1),u+=1;p&&(this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,p,!1),u+=p)}else if(l<0){for(;u>c;)this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!0),u-=1;p&&(this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,-p,!0),u-=p)}r=1===this.data.m?0:this._currentCopies-1,a=1===this.data.m?1:-1,s=this._currentCopies;for(var y,g;s;){if(e=this.elemsData[r].it,i=e[e.length-1].transform.mProps.v.props,g=i.length,e[e.length-1].transform.mProps._mdf=!0,e[e.length-1].transform.op._mdf=!0,e[e.length-1].transform.op.v=this.so.v+(this.eo.v-this.so.v)*(r/(this._currentCopies-1)),0!==u){for((0!==r&&1===a||r!==this._currentCopies-1&&-1===a)&&this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!1),this.matrix.transform(f[0],f[1],f[2],f[3],f[4],f[5],f[6],f[7],f[8],f[9],f[10],f[11],f[12],f[13],f[14],f[15]),this.matrix.transform(d[0],d[1],d[2],d[3],d[4],d[5],d[6],d[7],d[8],d[9],d[10],d[11],d[12],d[13],d[14],d[15]),this.matrix.transform(m[0],m[1],m[2],m[3],m[4],m[5],m[6],m[7],m[8],m[9],m[10],m[11],m[12],m[13],m[14],m[15]),y=0;y<g;y+=1)i[y]=this.matrix.props[y];this.matrix.reset()}else for(this.matrix.reset(),y=0;y<g;y+=1)i[y]=this.matrix.props[y];u+=1,s-=1,r+=a}}else for(s=this._currentCopies,r=0,a=1;s;)e=this.elemsData[r].it,i=e[e.length-1].transform.mProps.v.props,e[e.length-1].transform.mProps._mdf=!1,e[e.length-1].transform.op._mdf=!1,s-=1,r+=a},RepeaterModifier.prototype.addShape=function(){},ShapeModifiers.registerModifier("rp",RepeaterModifier),ShapeCollection.prototype.addShape=function(t){this._length===this._maxLength&&(this.shapes=this.shapes.concat(createSizedArray(this._maxLength)),this._maxLength*=2),this.shapes[this._length]=t,this._length+=1},ShapeCollection.prototype.releaseShapes=function(){var t;for(t=0;t<this._length;t+=1)shape_pool.release(this.shapes[t]);this._length=0},DashProperty.prototype.getValue=function(t){if((this.elem.globalData.frameId!==this.frameId||t)&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf=this._mdf||t,this._mdf)){var e=0,i=this.dataProps.length;for("svg"===this.renderer&&(this.dashStr=""),e=0;e<i;e+=1)"o"!=this.dataProps[e].n?"svg"===this.renderer?this.dashStr+=" "+this.dataProps[e].p.v:this.dashArray[e]=this.dataProps[e].p.v:this.dashoffset[0]=this.dataProps[e].p.v}},extendPrototype([DynamicPropertyContainer],DashProperty),GradientProperty.prototype.comparePoints=function(t,e){for(var i=0,r=this.o.length/2;i<r;){if(Math.abs(t[4*i]-t[4*e+2*i])>.01)return!1;i+=1}return!0},GradientProperty.prototype.checkCollapsable=function(){if(this.o.length/2!=this.c.length/4)return!1;if(this.data.k.k[0].s)for(var t=0,e=this.data.k.k.length;t<e;){if(!this.comparePoints(this.data.k.k[t].s,this.data.p))return!1;t+=1}else if(!this.comparePoints(this.data.k.k,this.data.p))return!1;return!0},GradientProperty.prototype.getValue=function(t){if(this.prop.getValue(),this._mdf=!1,this._cmdf=!1,this._omdf=!1,this.prop._mdf||t){var e,i,r,a=4*this.data.p;for(e=0;e<a;e+=1)i=e%4==0?100:255,r=Math.round(this.prop.v[e]*i),this.c[e]!==r&&(this.c[e]=r,this._cmdf=!t);if(this.o.length)for(a=this.prop.v.length,e=4*this.data.p;e<a;e+=1)i=e%2==0?100:1,r=e%2==0?Math.round(100*this.prop.v[e]):this.prop.v[e],this.o[e-4*this.data.p]!==r&&(this.o[e-4*this.data.p]=r,this._omdf=!t);this._mdf=!t}},extendPrototype([DynamicPropertyContainer],GradientProperty);var buildShapeString=function(t,e,i,r){if(0===e)return"";var a,s=t.o,n=t.i,o=t.v,h=" M"+r.applyToPointStringified(o[0][0],o[0][1]);for(a=1;a<e;a+=1)h+=" C"+r.applyToPointStringified(s[a-1][0],s[a-1][1])+" "+r.applyToPointStringified(n[a][0],n[a][1])+" "+r.applyToPointStringified(o[a][0],o[a][1]);return i&&e&&(h+=" C"+r.applyToPointStringified(s[a-1][0],s[a-1][1])+" "+r.applyToPointStringified(n[0][0],n[0][1])+" "+r.applyToPointStringified(o[0][0],o[0][1]),h+="z"),h},ImagePreloader=function(){function t(){this.loadedAssets+=1,this.loadedAssets===this.totalImages&&this.imagesLoadedCb&&this.imagesLoadedCb(null)}function e(t,e,i){var r="";if(t.e)r=t.p;else if(e){var a=t.p;-1!==a.indexOf("images/")&&(a=a.split("/")[1]),r=e+a}else r=i,r+=t.u?t.u:"",r+=t.p;return r}function i(t){var i=e(t,this.assetsPath,this.path),r=createTag("img");r.crossOrigin="anonymous",r.addEventListener("load",this._imageLoaded.bind(this),!1),r.addEventListener("error",function(){a.img=l,this._imageLoaded()}.bind(this),!1),r.src=i;var a={img:r,assetData:t};return a}function r(t,e){this.imagesLoadedCb=e;var i,r=t.length;for(i=0;i<r;i+=1)t[i].layers||(this.totalImages+=1,this.images.push(this._createImageData(t[i])))}function a(t){this.path=t||""}function s(t){this.assetsPath=t||""}function n(t){for(var e=0,i=this.images.length;e<i;){if(this.images[e].assetData===t)return this.images[e].img;e+=1}}function o(){this.imagesLoadedCb=null,this.images.length=0}function h(){return this.totalImages===this.loadedAssets}var l=function(){var t=createTag("canvas");t.width=1,t.height=1;var e=t.getContext("2d");return e.fillStyle="rgba(0,0,0,0)",e.fillRect(0,0,1,1),t}();return function(){this.loadAssets=r,this.setAssetsPath=s,this.setPath=a,this.loaded=h,this.destroy=o,this.getImage=n,this._createImageData=i,this._imageLoaded=t,this.assetsPath="",this.path="",this.totalImages=0,this.loadedAssets=0,this.imagesLoadedCb=null,this.images=[]}}(),featureSupport=function(){var t={maskType:!0};return(/MSIE 10/i.test(navigator.userAgent)||/MSIE 9/i.test(navigator.userAgent)||/rv:11.0/i.test(navigator.userAgent)||/Edge\/\d./i.test(navigator.userAgent))&&(t.maskType=!1),t}(),filtersFactory=function(){function t(t){var e=createNS("filter");return e.setAttribute("id",t),e.setAttribute("filterUnits","objectBoundingBox"),e.setAttribute("x","0%"),e.setAttribute("y","0%"),e.setAttribute("width","100%"),e.setAttribute("height","100%"),e}function e(){var t=createNS("feColorMatrix");return t.setAttribute("type","matrix"),t.setAttribute("color-interpolation-filters","sRGB"),t.setAttribute("values","0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1"),t}var i={};return i.createFilter=t,i.createAlphaToLuminanceFilter=e,i}(),assetLoader=function(){function t(t){return t.response&&"object"==typeof t.response?t.response:t.response&&"string"==typeof t.response?JSON.parse(t.response):t.responseText?JSON.parse(t.responseText):void 0}function e(e,i,r){var a,s=new XMLHttpRequest;s.open("GET",e,!0);try{s.responseType="json"}catch(t){}s.send(),s.onreadystatechange=function(){if(4==s.readyState)if(200==s.status)a=t(s),i(a);else try{a=t(s),i(a)}catch(t){r&&r(t)}}}return{load:e}}();TextAnimatorProperty.prototype.searchProperties=function(){var t,e,i=this._textData.a.length,r=PropertyFactory.getProp;for(t=0;t<i;t+=1)e=this._textData.a[t],this._animatorsData[t]=new TextAnimatorDataProperty(this._elem,e,this);this._textData.p&&"m"in this._textData.p?(this._pathData={f:r(this._elem,this._textData.p.f,0,0,this),l:r(this._elem,this._textData.p.l,0,0,this),r:this._textData.p.r,m:this._elem.maskManager.getMaskProperty(this._textData.p.m)},this._hasMaskedPath=!0):this._hasMaskedPath=!1,this._moreOptions.alignment=r(this._elem,this._textData.m.a,1,0,this)},TextAnimatorProperty.prototype.getMeasures=function(t,e){if(this.lettersChangedFlag=e,this._mdf||this._isFirstFrame||e||this._hasMaskedPath&&this._pathData.m._mdf){this._isFirstFrame=!1;var i,r,a,s,n,o,h,l,p,c,m,f,d,u,y,g,x,v,k,b=this._moreOptions.alignment.v,E=this._animatorsData,P=this._textData,A=this.mHelper,_=this._renderType,S=this.renderedLetters.length,D=(this.data,t.l);if(this._hasMaskedPath){if(k=this._pathData.m,!this._pathData.n||this._pathData._mdf){var T=k.v;this._pathData.r&&(T=T.reverse()),n={tLength:0,segments:[]},s=T._length-1;var C;for(g=0,a=0;a<s;a+=1)C=bez.buildBezierData(T.v[a],T.v[a+1],[T.o[a][0]-T.v[a][0],T.o[a][1]-T.v[a][1]],[T.i[a+1][0]-T.v[a+1][0],T.i[a+1][1]-T.v[a+1][1]]),n.tLength+=C.segmentLength,n.segments.push(C),g+=C.segmentLength;a=s,k.v.c&&(C=bez.buildBezierData(T.v[a],T.v[0],[T.o[a][0]-T.v[a][0],T.o[a][1]-T.v[a][1]],[T.i[0][0]-T.v[0][0],T.i[0][1]-T.v[0][1]]),n.tLength+=C.segmentLength,n.segments.push(C),g+=C.segmentLength),this._pathData.pi=n}if(n=this._pathData.pi,o=this._pathData.f.v,m=0,c=1,l=0,p=!0,u=n.segments,o<0&&k.v.c)for(n.tLength<Math.abs(o)&&(o=-Math.abs(o)%n.tLength),m=u.length-1,d=u[m].points,c=d.length-1;o<0;)o+=d[c].partialLength,(c-=1)<0&&(m-=1,d=u[m].points,c=d.length-1);d=u[m].points,f=d[c-1],h=d[c],y=h.partialLength}s=D.length,i=0,r=0;var M,w,F,B,V,G=1.2*t.finalSize*.714,I=!0;B=E.length;var O,R,L,j,z,N,H,q,W,Y,X,K,$,U=-1,Q=o,J=m,Z=c,tt=-1,et=0,it="",rt=this.defaultPropsArray;if(2===t.j||1===t.j){var at=0,st=0,nt=2===t.j?-.5:-1,ot=0,ht=!0;for(a=0;a<s;a+=1)if(D[a].n){for(at&&(at+=st);ot<a;)D[ot].animatorJustifyOffset=at,ot+=1;at=0,ht=!0}else{for(F=0;F<B;F+=1)M=E[F].a,M.t.propType&&(ht&&2===t.j&&(st+=M.t.v*nt),w=E[F].s,O=w.getMult(D[a].anIndexes[F],P.a[F].s.totalChars),O.length?at+=M.t.v*O[0]*nt:at+=M.t.v*O*nt);ht=!1}for(at&&(at+=st);ot<a;)D[ot].animatorJustifyOffset=at,ot+=1}for(a=0;a<s;a+=1){if(A.reset(),z=1,D[a].n)i=0,r+=t.yOffset,r+=I?1:0,o=Q,I=!1,et=0,this._hasMaskedPath&&(m=J,c=Z,d=u[m].points,f=d[c-1],h=d[c],y=h.partialLength,l=0),$=Y=K=it="",rt=this.defaultPropsArray;else{if(this._hasMaskedPath){if(tt!==D[a].line){switch(t.j){case 1:o+=g-t.lineWidths[D[a].line];break;case 2:o+=(g-t.lineWidths[D[a].line])/2}tt=D[a].line}U!==D[a].ind&&(D[U]&&(o+=D[U].extra),o+=D[a].an/2,U=D[a].ind),o+=b[0]*D[a].an/200;var lt=0;for(F=0;F<B;F+=1)M=E[F].a,M.p.propType&&(w=E[F].s,O=w.getMult(D[a].anIndexes[F],P.a[F].s.totalChars),O.length?lt+=M.p.v[0]*O[0]:lt+=M.p.v[0]*O),M.a.propType&&(w=E[F].s,O=w.getMult(D[a].anIndexes[F],P.a[F].s.totalChars),O.length?lt+=M.a.v[0]*O[0]:lt+=M.a.v[0]*O);for(p=!0;p;)l+y>=o+lt||!d?(x=(o+lt-l)/h.partialLength,L=f.point[0]+(h.point[0]-f.point[0])*x,j=f.point[1]+(h.point[1]-f.point[1])*x,A.translate(-b[0]*D[a].an/200,-b[1]*G/100),p=!1):d&&(l+=h.partialLength,c+=1,c>=d.length&&(c=0,m+=1,u[m]?d=u[m].points:k.v.c?(c=0,m=0,d=u[m].points):(l-=h.partialLength,d=null)),d&&(f=h,h=d[c],y=h.partialLength));R=D[a].an/2-D[a].add,A.translate(-R,0,0)}else R=D[a].an/2-D[a].add,A.translate(-R,0,0),A.translate(-b[0]*D[a].an/200,-b[1]*G/100,0);for(et+=D[a].l/2,F=0;F<B;F+=1)M=E[F].a,M.t.propType&&(w=E[F].s,O=w.getMult(D[a].anIndexes[F],P.a[F].s.totalChars),0===i&&0===t.j||(this._hasMaskedPath?O.length?o+=M.t.v*O[0]:o+=M.t.v*O:O.length?i+=M.t.v*O[0]:i+=M.t.v*O));for(et+=D[a].l/2,t.strokeWidthAnim&&(H=t.sw||0),t.strokeColorAnim&&(N=t.sc?[t.sc[0],t.sc[1],t.sc[2]]:[0,0,0]),t.fillColorAnim&&t.fc&&(q=[t.fc[0],t.fc[1],t.fc[2]]),F=0;F<B;F+=1)M=E[F].a,M.a.propType&&(w=E[F].s,O=w.getMult(D[a].anIndexes[F],P.a[F].s.totalChars),O.length?A.translate(-M.a.v[0]*O[0],-M.a.v[1]*O[1],M.a.v[2]*O[2]):A.translate(-M.a.v[0]*O,-M.a.v[1]*O,M.a.v[2]*O));for(F=0;F<B;F+=1)M=E[F].a,M.s.propType&&(w=E[F].s,O=w.getMult(D[a].anIndexes[F],P.a[F].s.totalChars),O.length?A.scale(1+(M.s.v[0]-1)*O[0],1+(M.s.v[1]-1)*O[1],1):A.scale(1+(M.s.v[0]-1)*O,1+(M.s.v[1]-1)*O,1));for(F=0;F<B;F+=1){if(M=E[F].a,w=E[F].s,O=w.getMult(D[a].anIndexes[F],P.a[F].s.totalChars),M.sk.propType&&(O.length?A.skewFromAxis(-M.sk.v*O[0],M.sa.v*O[1]):A.skewFromAxis(-M.sk.v*O,M.sa.v*O)),M.r.propType&&(O.length?A.rotateZ(-M.r.v*O[2]):A.rotateZ(-M.r.v*O)),M.ry.propType&&(O.length?A.rotateY(M.ry.v*O[1]):A.rotateY(M.ry.v*O)),M.rx.propType&&(O.length?A.rotateX(M.rx.v*O[0]):A.rotateX(M.rx.v*O)),M.o.propType&&(O.length?z+=(M.o.v*O[0]-z)*O[0]:z+=(M.o.v*O-z)*O),t.strokeWidthAnim&&M.sw.propType&&(O.length?H+=M.sw.v*O[0]:H+=M.sw.v*O),t.strokeColorAnim&&M.sc.propType)for(W=0;W<3;W+=1)O.length?N[W]=N[W]+(M.sc.v[W]-N[W])*O[0]:N[W]=N[W]+(M.sc.v[W]-N[W])*O;if(t.fillColorAnim&&t.fc){if(M.fc.propType)for(W=0;W<3;W+=1)O.length?q[W]=q[W]+(M.fc.v[W]-q[W])*O[0]:q[W]=q[W]+(M.fc.v[W]-q[W])*O;M.fh.propType&&(q=O.length?addHueToRGB(q,M.fh.v*O[0]):addHueToRGB(q,M.fh.v*O)),M.fs.propType&&(q=O.length?addSaturationToRGB(q,M.fs.v*O[0]):addSaturationToRGB(q,M.fs.v*O)),M.fb.propType&&(q=O.length?addBrightnessToRGB(q,M.fb.v*O[0]):addBrightnessToRGB(q,M.fb.v*O))}}for(F=0;F<B;F+=1)M=E[F].a,M.p.propType&&(w=E[F].s,O=w.getMult(D[a].anIndexes[F],P.a[F].s.totalChars),this._hasMaskedPath?O.length?A.translate(0,M.p.v[1]*O[0],-M.p.v[2]*O[1]):A.translate(0,M.p.v[1]*O,-M.p.v[2]*O):O.length?A.translate(M.p.v[0]*O[0],M.p.v[1]*O[1],-M.p.v[2]*O[2]):A.translate(M.p.v[0]*O,M.p.v[1]*O,-M.p.v[2]*O));if(t.strokeWidthAnim&&(Y=H<0?0:H),t.strokeColorAnim&&(X="rgb("+Math.round(255*N[0])+","+Math.round(255*N[1])+","+Math.round(255*N[2])+")"),t.fillColorAnim&&t.fc&&(K="rgb("+Math.round(255*q[0])+","+Math.round(255*q[1])+","+Math.round(255*q[2])+")"),this._hasMaskedPath){if(A.translate(0,-t.ls),A.translate(0,b[1]*G/100+r,0),P.p.p){v=(h.point[1]-f.point[1])/(h.point[0]-f.point[0]);var pt=180*Math.atan(v)/Math.PI;h.point[0]<f.point[0]&&(pt+=180),A.rotate(-pt*Math.PI/180)}A.translate(L,j,0),o-=b[0]*D[a].an/200,D[a+1]&&U!==D[a+1].ind&&(o+=D[a].an/2,o+=t.tr/1e3*t.finalSize)}else{switch(A.translate(i,r,0),t.ps&&A.translate(t.ps[0],t.ps[1]+t.ascent,0),t.j){case 1:A.translate(D[a].animatorJustifyOffset+t.justifyOffset+(t.boxWidth-t.lineWidths[D[a].line]),0,0);break;case 2:A.translate(D[a].animatorJustifyOffset+t.justifyOffset+(t.boxWidth-t.lineWidths[D[a].line])/2,0,0)}A.translate(0,-t.ls),A.translate(R,0,0),A.translate(b[0]*D[a].an/200,b[1]*G/100,0),i+=D[a].l+t.tr/1e3*t.finalSize}"html"===_?it=A.toCSS():"svg"===_?it=A.to2dCSS():rt=[A.props[0],A.props[1],A.props[2],A.props[3],A.props[4],A.props[5],A.props[6],A.props[7],A.props[8],A.props[9],A.props[10],A.props[11],A.props[12],A.props[13],A.props[14],A.props[15]],$=z}S<=a?(V=new LetterProps($,Y,X,K,it,rt),this.renderedLetters.push(V),S+=1,this.lettersChangedFlag=!0):(V=this.renderedLetters[a],this.lettersChangedFlag=V.update($,Y,X,K,it,rt)||this.lettersChangedFlag)}}},TextAnimatorProperty.prototype.getValue=function(){this._elem.globalData.frameId!==this._frameId&&(this._frameId=this._elem.globalData.frameId,this.iterateDynamicProperties())},TextAnimatorProperty.prototype.mHelper=new Matrix,TextAnimatorProperty.prototype.defaultPropsArray=[],extendPrototype([DynamicPropertyContainer],TextAnimatorProperty),LetterProps.prototype.update=function(t,e,i,r,a,s){this._mdf.o=!1,this._mdf.sw=!1,this._mdf.sc=!1,this._mdf.fc=!1,this._mdf.m=!1,this._mdf.p=!1;var n=!1;return this.o!==t&&(this.o=t,this._mdf.o=!0,n=!0),this.sw!==e&&(this.sw=e,this._mdf.sw=!0,n=!0),this.sc!==i&&(this.sc=i,this._mdf.sc=!0,n=!0),this.fc!==r&&(this.fc=r,this._mdf.fc=!0,n=!0),this.m!==a&&(this.m=a,this._mdf.m=!0,n=!0),!s.length||this.p[0]===s[0]&&this.p[1]===s[1]&&this.p[4]===s[4]&&this.p[5]===s[5]&&this.p[12]===s[12]&&this.p[13]===s[13]||(this.p=s,this._mdf.p=!0,n=!0),n},TextProperty.prototype.defaultBoxWidth=[0,0],TextProperty.prototype.copyData=function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i]);return t},TextProperty.prototype.setCurrentData=function(t){t.__complete||this.completeTextData(t),this.currentData=t,this.currentData.boxWidth=this.currentData.boxWidth||this.defaultBoxWidth,this._mdf=!0},TextProperty.prototype.searchProperty=function(){return this.searchKeyframes()},TextProperty.prototype.searchKeyframes=function(){return this.kf=this.data.d.k.length>1,this.kf&&this.addEffect(this.getKeyframeValue.bind(this)),this.kf},TextProperty.prototype.addEffect=function(t){this.effectsSequence.push(t),this.elem.addDynamicProperty(this)},TextProperty.prototype.getValue=function(t){if(this.elem.globalData.frameId!==this.frameId&&this.effectsSequence.length||t){this.currentData.t=this.data.d.k[this.keysIndex].s.t;var e=this.currentData,i=this.keysIndex;if(this.lock)return void this.setCurrentData(this.currentData);this.lock=!0,this._mdf=!1;var r,a=this.effectsSequence.length,s=t||this.data.d.k[this.keysIndex].s;for(r=0;r<a;r+=1)s=i!==this.keysIndex?this.effectsSequence[r](s,s.t):this.effectsSequence[r](this.currentData,s.t);e!==s&&this.setCurrentData(s),this.pv=this.v=this.currentData,this.lock=!1,this.frameId=this.elem.globalData.frameId}},TextProperty.prototype.getKeyframeValue=function(){for(var t=this.data.d.k,e=this.elem.comp.renderedFrame,i=0,r=t.length;i<=r-1&&(t[i].s,!(i===r-1||t[i+1].t>e));)i+=1;return this.keysIndex!==i&&(this.keysIndex=i),this.data.d.k[this.keysIndex].s},TextProperty.prototype.buildFinalText=function(t){for(var e,i=FontManager.getCombinedCharacterCodes(),r=[],a=0,s=t.length;a<s;)e=t.charCodeAt(a),-1!==i.indexOf(e)?r[r.length-1]+=t.charAt(a):e>=55296&&e<=56319?(e=t.charCodeAt(a+1),e>=56320&&e<=57343?(r.push(t.substr(a,2)),++a):r.push(t.charAt(a))):r.push(t.charAt(a)),a+=1;return r},TextProperty.prototype.completeTextData=function(t){t.__complete=!0;var e,i,r,a,s,n,o,h=this.elem.globalData.fontManager,l=this.data,p=[],c=0,m=l.m.g,f=0,d=0,u=0,y=[],g=0,x=0,v=h.getFontByName(t.f),k=0,b=v.fStyle?v.fStyle.split(" "):[],E="normal",P="normal";i=b.length;for(e=0;e<i;e+=1)switch(b[e].toLowerCase()){case"italic":P="italic";break;case"bold":E="700";break;case"black":E="900";break;case"medium":E="500";break;case"regular":case"normal":E="400";break;case"light":case"thin":E="200"}t.fWeight=v.fWeight||E,t.fStyle=P,t.finalSize=t.s,t.finalText=this.buildFinalText(t.t),i=t.finalText.length,t.finalLineHeight=t.lh;var A,_=t.tr/1e3*t.finalSize;if(t.sz)for(var S,D,T=!0,C=t.sz[0],M=t.sz[1];T;){D=this.buildFinalText(t.t),S=0,g=0,i=D.length,_=t.tr/1e3*t.finalSize;var w=-1;for(e=0;e<i;e+=1)A=D[e].charCodeAt(0),r=!1," "===D[e]?w=e:13!==A&&3!==A||(g=0,r=!0,S+=t.finalLineHeight||1.2*t.finalSize),h.chars?(o=h.getCharData(D[e],v.fStyle,v.fFamily),k=r?0:o.w*t.finalSize/100):k=h.measureText(D[e],t.f,t.finalSize),g+k>C&&" "!==D[e]?(-1===w?i+=1:e=w,S+=t.finalLineHeight||1.2*t.finalSize,D.splice(e,w===e?1:0,"\r"),w=-1,g=0):(g+=k,g+=_);S+=v.ascent*t.finalSize/100,this.canResize&&t.finalSize>this.minimumFontSize&&M<S?(t.finalSize-=1,t.finalLineHeight=t.finalSize*t.lh/t.s):(t.finalText=D,i=t.finalText.length,T=!1)}g=-_,k=0;var F,B=0;for(e=0;e<i;e+=1)if(r=!1,F=t.finalText[e],A=F.charCodeAt(0)," "===F?a=" ":13===A||3===A?(B=0,y.push(g),x=g>x?g:x,g=-2*_,a="",r=!0,u+=1):a=t.finalText[e],h.chars?(o=h.getCharData(F,v.fStyle,h.getFontByName(t.f).fFamily),k=r?0:o.w*t.finalSize/100):k=h.measureText(a,t.f,t.finalSize)," "===F?B+=k+_:(g+=k+_+B,B=0),p.push({l:k,an:k,add:f,n:r,anIndexes:[],val:a,line:u,animatorJustifyOffset:0}),2==m){if(f+=k,""===a||" "===a||e===i-1){for(""!==a&&" "!==a||(f-=k);d<=e;)p[d].an=f,p[d].ind=c,p[d].extra=k,d+=1;c+=1,f=0}}else if(3==m){if(f+=k,""===a||e===i-1){for(""===a&&(f-=k);d<=e;)p[d].an=f,p[d].ind=c,p[d].extra=k,d+=1;f=0,c+=1}}else p[c].ind=c,p[c].extra=0,c+=1;if(t.l=p,x=g>x?g:x,y.push(g),t.sz)t.boxWidth=t.sz[0],t.justifyOffset=0;else switch(t.boxWidth=x,t.j){case 1:t.justifyOffset=-t.boxWidth;break;case 2:t.justifyOffset=-t.boxWidth/2;break;default:t.justifyOffset=0}t.lineWidths=y;var V,G,I=l.a;n=I.length;var O,R,L=[];for(s=0;s<n;s+=1){for(V=I[s],V.a.sc&&(t.strokeColorAnim=!0),V.a.sw&&(t.strokeWidthAnim=!0),(V.a.fc||V.a.fh||V.a.fs||V.a.fb)&&(t.fillColorAnim=!0),R=0,O=V.s.b,e=0;e<i;e+=1)G=p[e],G.anIndexes[s]=R,(1==O&&""!==G.val||2==O&&""!==G.val&&" "!==G.val||3==O&&(G.n||" "==G.val||e==i-1)||4==O&&(G.n||e==i-1))&&(1===V.s.rn&&L.push(R),R+=1);l.a[s].s.totalChars=R;var j,z=-1;if(1===V.s.rn)for(e=0;e<i;e+=1)G=p[e],z!=G.anIndexes[s]&&(z=G.anIndexes[s],j=L.splice(Math.floor(Math.random()*L.length),1)[0]),G.anIndexes[s]=j}t.yOffset=t.finalLineHeight||1.2*t.finalSize,t.ls=t.ls||0,t.ascent=v.ascent*t.finalSize/100},TextProperty.prototype.updateDocumentData=function(t,e){e=void 0===e?this.keysIndex:e;var i=this.copyData({},this.data.d.k[e].s);i=this.copyData(i,t),this.data.d.k[e].s=i,this.recalculate(e),this.elem.addDynamicProperty(this)},TextProperty.prototype.recalculate=function(t){var e=this.data.d.k[t].s;e.__complete=!1,this.keysIndex=0,this._isFirstFrame=!0,this.getValue(e)},TextProperty.prototype.canResizeFont=function(t){this.canResize=t,this.recalculate(this.keysIndex),this.elem.addDynamicProperty(this)},TextProperty.prototype.setMinimumFontSize=function(t){this.minimumFontSize=Math.floor(t)||1,this.recalculate(this.keysIndex),this.elem.addDynamicProperty(this)};var TextSelectorProp=function(){function t(t,e){this._currentTextLength=-1,this.k=!1,this.data=e,this.elem=t,this.comp=t.comp,this.finalS=0,this.finalE=0,this.initDynamicPropertyContainer(t),this.s=PropertyFactory.getProp(t,e.s||{k:0},0,0,this),this.e="e"in e?PropertyFactory.getProp(t,e.e,0,0,this):{v:100},this.o=PropertyFactory.getProp(t,e.o||{k:0},0,0,this),this.xe=PropertyFactory.getProp(t,e.xe||{k:0},0,0,this),this.ne=PropertyFactory.getProp(t,e.ne||{k:0},0,0,this),this.a=PropertyFactory.getProp(t,e.a,0,.01,this),this.dynamicProperties.length||this.getValue()}function e(e,i,r){return new t(e,i,r)}var i=Math.max,r=Math.min,a=Math.floor;return t.prototype={getMult:function(t){this._currentTextLength!==this.elem.textProperty.currentData.l.length&&this.getValue();var e=BezierFactory.getBezierEasing(this.ne.v/100,0,1-this.xe.v/100,1).get,s=0,n=this.finalS,o=this.finalE,h=this.data.sh;if(2==h)s=o===n?t>=o?1:0:i(0,r(.5/(o-n)+(t-n)/(o-n),1)),s=e(s);else if(3==h)s=o===n?t>=o?0:1:1-i(0,r(.5/(o-n)+(t-n)/(o-n),1)),s=e(s);else if(4==h)o===n?s=0:(s=i(0,r(.5/(o-n)+(t-n)/(o-n),1)),s<.5?s*=2:s=1-2*(s-.5)),s=e(s);else if(5==h){if(o===n)s=0;else{var l=o-n;t=r(i(0,t+.5-n),o-n);var p=-l/2+t,c=l/2;s=Math.sqrt(1-p*p/(c*c))}s=e(s)}else 6==h?(o===n?s=0:(t=r(i(0,t+.5-n),o-n),s=(1+Math.cos(Math.PI+2*Math.PI*t/(o-n)))/2),s=e(s)):(t>=a(n)&&(s=t-n<0?1-(n-t):i(0,r(o-t,1))),s=e(s));return s*this.a.v},getValue:function(t){this.iterateDynamicProperties(),this._mdf=t||this._mdf,this._currentTextLength=this.elem.textProperty.currentData.l.length||0,t&&2===this.data.r&&(this.e.v=this._currentTextLength);var e=2===this.data.r?1:100/this.data.totalChars,i=this.o.v/e,r=this.s.v/e+i,a=this.e.v/e+i;if(r>a){var s=r;r=a,a=s}this.finalS=r,this.finalE=a}},extendPrototype([DynamicPropertyContainer],t),{getTextSelectorProp:e}}(),pool_factory=function(){return function(t,e,i,r){function a(){var t;return n?(n-=1,t=h[n]):t=e(),t}function s(t){n===o&&(h=pooling.double(h),o*=2),i&&i(t),h[n]=t,n+=1}var n=0,o=t,h=createSizedArray(o);return{newElement:a,release:s}}}(),pooling=function(){function t(t){return t.concat(createSizedArray(t.length))}return{double:t}}(),point_pool=function(){function t(){return createTypedArray("float32",2)}return pool_factory(8,t)}(),shape_pool=function(){function t(){return new ShapePath}function e(t){var e,i=t._length;for(e=0;e<i;e+=1)point_pool.release(t.v[e]),point_pool.release(t.i[e]),point_pool.release(t.o[e]),t.v[e]=null,t.i[e]=null,t.o[e]=null;t._length=0,t.c=!1}function i(t){var e,i=r.newElement(),a=void 0===t._length?t.v.length:t._length;i.setLength(a),i.c=t.c;for(e=0;e<a;e+=1)i.setTripleAt(t.v[e][0],t.v[e][1],t.o[e][0],t.o[e][1],t.i[e][0],t.i[e][1],e);return i}var r=pool_factory(4,t,e);return r.clone=i,r}(),shapeCollection_pool=function(){function t(){var t;return r?(r-=1,t=s[r]):t=new ShapeCollection,t}function e(t){var e,i=t._length;for(e=0;e<i;e+=1)shape_pool.release(t.shapes[e]);t._length=0,r===a&&(s=pooling.double(s),a*=2),s[r]=t,r+=1}var i={newShapeCollection:t,release:e},r=0,a=4,s=createSizedArray(a);return i}(),segments_length_pool=function(){function t(){return{lengths:[],totalLength:0}}function e(t){var e,i=t.lengths.length;for(e=0;e<i;e+=1)bezier_length_pool.release(t.lengths[e]);t.lengths.length=0}return pool_factory(8,t,e)}(),bezier_length_pool=function(){function t(){return{addedLength:0,percents:createTypedArray("float32",defaultCurveSegments),lengths:createTypedArray("float32",defaultCurveSegments)}}return pool_factory(8,t)}();BaseRenderer.prototype.checkLayers=function(t){var e,i,r=this.layers.length;for(this.completeLayers=!0,e=r-1;e>=0;e--)this.elements[e]||(i=this.layers[e],i.ip-i.st<=t-this.layers[e].st&&i.op-i.st>t-this.layers[e].st&&this.buildItem(e)),this.completeLayers=!!this.elements[e]&&this.completeLayers;this.checkPendingElements()},BaseRenderer.prototype.createItem=function(t){switch(t.ty){case 2:return this.createImage(t);case 0:return this.createComp(t);case 1:return this.createSolid(t);case 3:return this.createNull(t);case 4:return this.createShape(t);case 5:return this.createText(t);case 13:return this.createCamera(t)}return this.createNull(t)},BaseRenderer.prototype.createCamera=function(){throw new Error("You're using a 3d camera. Try the html renderer.")},BaseRenderer.prototype.buildAllItems=function(){var t,e=this.layers.length;for(t=0;t<e;t+=1)this.buildItem(t);this.checkPendingElements()},BaseRenderer.prototype.includeLayers=function(t){this.completeLayers=!1;var e,i,r=t.length,a=this.layers.length;for(e=0;e<r;e+=1)for(i=0;i<a;){if(this.layers[i].id==t[e].id){this.layers[i]=t[e];break}i+=1}},BaseRenderer.prototype.setProjectInterface=function(t){this.globalData.projectInterface=t},BaseRenderer.prototype.initItems=function(){this.globalData.progressiveLoad||this.buildAllItems()},BaseRenderer.prototype.buildElementParenting=function(t,e,i){for(var r=this.elements,a=this.layers,s=0,n=a.length;s<n;)a[s].ind==e&&(r[s]&&!0!==r[s]?(i.push(r[s]),r[s].setAsParent(),void 0!==a[s].parent?this.buildElementParenting(t,a[s].parent,i):t.setHierarchy(i)):(this.buildItem(s),this.addPendingElement(t))),s+=1},BaseRenderer.prototype.addPendingElement=function(t){this.pendingElements.push(t)},BaseRenderer.prototype.searchExtraCompositions=function(t){var e,i=t.length;for(e=0;e<i;e+=1)if(t[e].xt){var r=this.createComp(t[e]);r.initExpressions(),this.globalData.projectInterface.registerComposition(r)}},BaseRenderer.prototype.setupGlobalData=function(t,e){this.globalData.fontManager=new FontManager,this.globalData.fontManager.addChars(t.chars),this.globalData.fontManager.addFonts(t.fonts,e),this.globalData.getAssetData=this.animationItem.getAssetData.bind(this.animationItem),this.globalData.getAssetsPath=this.animationItem.getAssetsPath.bind(this.animationItem),this.globalData.imageLoader=this.animationItem.imagePreloader,this.globalData.frameId=0,this.globalData.frameRate=t.fr,this.globalData.nm=t.nm,this.globalData.compSize={w:t.w,h:t.h}},extendPrototype([BaseRenderer],SVGRenderer),SVGRenderer.prototype.createNull=function(t){return new NullElement(t,this.globalData,this)},SVGRenderer.prototype.createShape=function(t){return new SVGShapeElement(t,this.globalData,this)},SVGRenderer.prototype.createText=function(t){return new SVGTextElement(t,this.globalData,this)},SVGRenderer.prototype.createImage=function(t){return new IImageElement(t,this.globalData,this)},SVGRenderer.prototype.createComp=function(t){return new SVGCompElement(t,this.globalData,this)},SVGRenderer.prototype.createSolid=function(t){return new ISolidElement(t,this.globalData,this)},SVGRenderer.prototype.configAnimation=function(t){this.svgElement.setAttribute("xmlns","http://www.w3.org/2000/svg"),this.renderConfig.viewBoxSize?this.svgElement.setAttribute("viewBox",this.renderConfig.viewBoxSize):this.svgElement.setAttribute("viewBox","0 0 "+t.w+" "+t.h),this.renderConfig.viewBoxOnly||(this.svgElement.setAttribute("width",t.w),this.svgElement.setAttribute("height",t.h),this.svgElement.style.width="100%",this.svgElement.style.height="100%",this.svgElement.style.transform="translate3d(0,0,0)"),this.renderConfig.className&&this.svgElement.setAttribute("class",this.renderConfig.className),void 0!==this.renderConfig.focusable&&this.svgElement.setAttribute("focusable",this.renderConfig.focusable),this.svgElement.setAttribute("preserveAspectRatio",this.renderConfig.preserveAspectRatio),this.animationItem.wrapper.appendChild(this.svgElement);var e=this.globalData.defs;this.setupGlobalData(t,e),this.globalData.progressiveLoad=this.renderConfig.progressiveLoad,this.data=t;var i=createNS("clipPath"),r=createNS("rect");r.setAttribute("width",t.w),r.setAttribute("height",t.h),r.setAttribute("x",0),r.setAttribute("y",0);var a=createElementID();i.setAttribute("id",a),i.appendChild(r),this.layerElement.setAttribute("clip-path","url("+locationHref+"#"+a+")"),e.appendChild(i),this.layers=t.layers,this.elements=createSizedArray(t.layers.length)},SVGRenderer.prototype.destroy=function(){this.animationItem.wrapper.innerHTML="",this.layerElement=null,this.globalData.defs=null;var t,e=this.layers?this.layers.length:0;for(t=0;t<e;t++)this.elements[t]&&this.elements[t].destroy();this.elements.length=0,this.destroyed=!0,this.animationItem=null},SVGRenderer.prototype.updateContainerSize=function(){},SVGRenderer.prototype.buildItem=function(t){var e=this.elements;if(!e[t]&&99!=this.layers[t].ty){e[t]=!0;var i=this.createItem(this.layers[t]);e[t]=i,expressionsPlugin&&(0===this.layers[t].ty&&this.globalData.projectInterface.registerComposition(i),i.initExpressions()),this.appendElementInPos(i,t),this.layers[t].tt&&(this.elements[t-1]&&!0!==this.elements[t-1]?i.setMatte(e[t-1].layerId):(this.buildItem(t-1),this.addPendingElement(i)))}},SVGRenderer.prototype.checkPendingElements=function(){for(;this.pendingElements.length;){var t=this.pendingElements.pop();if(t.checkParenting(),t.data.tt)for(var e=0,i=this.elements.length;e<i;){if(this.elements[e]===t){t.setMatte(this.elements[e-1].layerId);break}e+=1}}},SVGRenderer.prototype.renderFrame=function(t){if(this.renderedFrame!==t&&!this.destroyed){null===t?t=this.renderedFrame:this.renderedFrame=t,this.globalData.frameNum=t,this.globalData.frameId+=1,this.globalData.projectInterface.currentFrame=t,this.globalData._mdf=!1;var e,i=this.layers.length;for(this.completeLayers||this.checkLayers(t),e=i-1;e>=0;e--)(this.completeLayers||this.elements[e])&&this.elements[e].prepareFrame(t-this.layers[e].st);if(this.globalData._mdf)for(e=0;e<i;e+=1)(this.completeLayers||this.elements[e])&&this.elements[e].renderFrame()}},SVGRenderer.prototype.appendElementInPos=function(t,e){var i=t.getBaseElement();if(i){for(var r,a=0;a<e;)this.elements[a]&&!0!==this.elements[a]&&this.elements[a].getBaseElement()&&(r=this.elements[a].getBaseElement()),a+=1;r?this.layerElement.insertBefore(i,r):this.layerElement.appendChild(i)}},SVGRenderer.prototype.hide=function(){this.layerElement.style.display="none"},SVGRenderer.prototype.show=function(){this.layerElement.style.display="block"},extendPrototype([BaseRenderer],CanvasRenderer),CanvasRenderer.prototype.createShape=function(t){return new CVShapeElement(t,this.globalData,this)},CanvasRenderer.prototype.createText=function(t){return new CVTextElement(t,this.globalData,this)},CanvasRenderer.prototype.createImage=function(t){return new CVImageElement(t,this.globalData,this)},CanvasRenderer.prototype.createComp=function(t){return new CVCompElement(t,this.globalData,this)},CanvasRenderer.prototype.createSolid=function(t){return new CVSolidElement(t,this.globalData,this)},CanvasRenderer.prototype.createNull=SVGRenderer.prototype.createNull,CanvasRenderer.prototype.ctxTransform=function(t){if(1!==t[0]||0!==t[1]||0!==t[4]||1!==t[5]||0!==t[12]||0!==t[13]){if(!this.renderConfig.clearCanvas)return void this.canvasContext.transform(t[0],t[1],t[4],t[5],t[12],t[13]);this.transformMat.cloneFromProps(t);var e=this.contextData.cTr.props;this.transformMat.transform(e[0],e[1],e[2],e[3],e[4],e[5],e[6],e[7],e[8],e[9],e[10],e[11],e[12],e[13],e[14],e[15]),this.contextData.cTr.cloneFromProps(this.transformMat.props);var i=this.contextData.cTr.props;this.canvasContext.setTransform(i[0],i[1],i[4],i[5],i[12],i[13])}},CanvasRenderer.prototype.ctxOpacity=function(t){if(!this.renderConfig.clearCanvas)return this.canvasContext.globalAlpha*=t<0?0:t,void(this.globalData.currentGlobalAlpha=this.contextData.cO);this.contextData.cO*=t<0?0:t,this.globalData.currentGlobalAlpha!==this.contextData.cO&&(this.canvasContext.globalAlpha=this.contextData.cO,this.globalData.currentGlobalAlpha=this.contextData.cO)},CanvasRenderer.prototype.reset=function(){if(!this.renderConfig.clearCanvas)return void this.canvasContext.restore();this.contextData.reset()},CanvasRenderer.prototype.save=function(t){if(!this.renderConfig.clearCanvas)return void this.canvasContext.save();t&&this.canvasContext.save();var e=this.contextData.cTr.props;this.contextData._length<=this.contextData.cArrPos&&this.contextData.duplicate();var i,r=this.contextData.saved[this.contextData.cArrPos];for(i=0;i<16;i+=1)r[i]=e[i];this.contextData.savedOp[this.contextData.cArrPos]=this.contextData.cO,this.contextData.cArrPos+=1},CanvasRenderer.prototype.restore=function(t){if(!this.renderConfig.clearCanvas)return void this.canvasContext.restore();t&&(this.canvasContext.restore(),this.globalData.blendMode="source-over"),this.contextData.cArrPos-=1;var e,i=this.contextData.saved[this.contextData.cArrPos],r=this.contextData.cTr.props;for(e=0;e<16;e+=1)r[e]=i[e];this.canvasContext.setTransform(i[0],i[1],i[4],i[5],i[12],i[13]),i=this.contextData.savedOp[this.contextData.cArrPos],this.contextData.cO=i,this.globalData.currentGlobalAlpha!==i&&(this.canvasContext.globalAlpha=i,this.globalData.currentGlobalAlpha=i)},CanvasRenderer.prototype.configAnimation=function(t){this.animationItem.wrapper?(this.animationItem.container=createTag("canvas"),this.animationItem.container.style.width="100%",this.animationItem.container.style.height="100%",this.animationItem.container.style.transformOrigin=this.animationItem.container.style.mozTransformOrigin=this.animationItem.container.style.webkitTransformOrigin=this.animationItem.container.style["-webkit-transform"]="0px 0px 0px",this.animationItem.wrapper.appendChild(this.animationItem.container),this.canvasContext=this.animationItem.container.getContext("2d"),this.renderConfig.className&&this.animationItem.container.setAttribute("class",this.renderConfig.className)):this.canvasContext=this.renderConfig.context,this.data=t,this.layers=t.layers,this.transformCanvas={w:t.w,h:t.h,sx:0,sy:0,tx:0,ty:0},this.setupGlobalData(t,document.body),this.globalData.canvasContext=this.canvasContext,this.globalData.renderer=this,this.globalData.isDashed=!1,this.globalData.progressiveLoad=this.renderConfig.progressiveLoad,this.globalData.transformCanvas=this.transformCanvas,this.elements=createSizedArray(t.layers.length),this.updateContainerSize()},CanvasRenderer.prototype.updateContainerSize=function(){this.reset();var t,e;this.animationItem.wrapper&&this.animationItem.container?(t=this.animationItem.wrapper.offsetWidth,e=this.animationItem.wrapper.offsetHeight,this.animationItem.container.setAttribute("width",t*this.renderConfig.dpr),this.animationItem.container.setAttribute("height",e*this.renderConfig.dpr)):(t=this.canvasContext.canvas.width*this.renderConfig.dpr,e=this.canvasContext.canvas.height*this.renderConfig.dpr);var i,r;if(-1!==this.renderConfig.preserveAspectRatio.indexOf("meet")||-1!==this.renderConfig.preserveAspectRatio.indexOf("slice")){var a=this.renderConfig.preserveAspectRatio.split(" "),s=a[1]||"meet",n=a[0]||"xMidYMid",o=n.substr(0,4),h=n.substr(4);i=t/e,r=this.transformCanvas.w/this.transformCanvas.h,r>i&&"meet"===s||r<i&&"slice"===s?(this.transformCanvas.sx=t/(this.transformCanvas.w/this.renderConfig.dpr),this.transformCanvas.sy=t/(this.transformCanvas.w/this.renderConfig.dpr)):(this.transformCanvas.sx=e/(this.transformCanvas.h/this.renderConfig.dpr),this.transformCanvas.sy=e/(this.transformCanvas.h/this.renderConfig.dpr)),this.transformCanvas.tx="xMid"===o&&(r<i&&"meet"===s||r>i&&"slice"===s)?(t-this.transformCanvas.w*(e/this.transformCanvas.h))/2*this.renderConfig.dpr:"xMax"===o&&(r<i&&"meet"===s||r>i&&"slice"===s)?(t-this.transformCanvas.w*(e/this.transformCanvas.h))*this.renderConfig.dpr:0,this.transformCanvas.ty="YMid"===h&&(r>i&&"meet"===s||r<i&&"slice"===s)?(e-this.transformCanvas.h*(t/this.transformCanvas.w))/2*this.renderConfig.dpr:"YMax"===h&&(r>i&&"meet"===s||r<i&&"slice"===s)?(e-this.transformCanvas.h*(t/this.transformCanvas.w))*this.renderConfig.dpr:0}else"none"==this.renderConfig.preserveAspectRatio?(this.transformCanvas.sx=t/(this.transformCanvas.w/this.renderConfig.dpr),this.transformCanvas.sy=e/(this.transformCanvas.h/this.renderConfig.dpr),this.transformCanvas.tx=0,this.transformCanvas.ty=0):(this.transformCanvas.sx=this.renderConfig.dpr,this.transformCanvas.sy=this.renderConfig.dpr,this.transformCanvas.tx=0,this.transformCanvas.ty=0);this.transformCanvas.props=[this.transformCanvas.sx,0,0,0,0,this.transformCanvas.sy,0,0,0,0,1,0,this.transformCanvas.tx,this.transformCanvas.ty,0,1],this.ctxTransform(this.transformCanvas.props),this.canvasContext.beginPath(),this.canvasContext.rect(0,0,this.transformCanvas.w,this.transformCanvas.h),this.canvasContext.closePath(),this.canvasContext.clip(),this.renderFrame(this.renderedFrame,!0)},CanvasRenderer.prototype.destroy=function(){this.renderConfig.clearCanvas&&(this.animationItem.wrapper.innerHTML="");var t,e=this.layers?this.layers.length:0;for(t=e-1;t>=0;t-=1)this.elements[t]&&this.elements[t].destroy();this.elements.length=0,this.globalData.canvasContext=null,this.animationItem.container=null,this.destroyed=!0},CanvasRenderer.prototype.renderFrame=function(t,e){if((this.renderedFrame!==t||!0!==this.renderConfig.clearCanvas||e)&&!this.destroyed&&-1!==t){this.renderedFrame=t,this.globalData.frameNum=t-this.animationItem._isFirstFrame,this.globalData.frameId+=1,this.globalData._mdf=!this.renderConfig.clearCanvas||e,this.globalData.projectInterface.currentFrame=t;var i,r=this.layers.length;for(this.completeLayers||this.checkLayers(t),i=0;i<r;i++)(this.completeLayers||this.elements[i])&&this.elements[i].prepareFrame(t-this.layers[i].st);if(this.globalData._mdf){for(!0===this.renderConfig.clearCanvas?this.canvasContext.clearRect(0,0,this.transformCanvas.w,this.transformCanvas.h):this.save(),i=r-1;i>=0;i-=1)(this.completeLayers||this.elements[i])&&this.elements[i].renderFrame();!0!==this.renderConfig.clearCanvas&&this.restore()}}},CanvasRenderer.prototype.buildItem=function(t){var e=this.elements;if(!e[t]&&99!=this.layers[t].ty){var i=this.createItem(this.layers[t],this,this.globalData);e[t]=i,i.initExpressions()}},CanvasRenderer.prototype.checkPendingElements=function(){for(;this.pendingElements.length;){this.pendingElements.pop().checkParenting()}},CanvasRenderer.prototype.hide=function(){this.animationItem.container.style.display="none"},CanvasRenderer.prototype.show=function(){this.animationItem.container.style.display="block"},extendPrototype([BaseRenderer],HybridRenderer),HybridRenderer.prototype.buildItem=SVGRenderer.prototype.buildItem,HybridRenderer.prototype.checkPendingElements=function(){for(;this.pendingElements.length;){this.pendingElements.pop().checkParenting()}},HybridRenderer.prototype.appendElementInPos=function(t,e){var i=t.getBaseElement();if(i){var r=this.layers[e];if(r.ddd&&this.supports3d)this.addTo3dContainer(i,e);else if(this.threeDElements)this.addTo3dContainer(i,e);else{for(var a,s,n,o=0;o<e;)this.elements[o]&&!0!==this.elements[o]&&this.elements[o].getBaseElement&&(s=this.elements[o],n=this.layers[o].ddd?this.getThreeDContainerByPos(o):s.getBaseElement(),a=n||a),o+=1;a?r.ddd&&this.supports3d||this.layerElement.insertBefore(i,a):r.ddd&&this.supports3d||this.layerElement.appendChild(i)}}},HybridRenderer.prototype.createShape=function(t){return this.supports3d?new HShapeElement(t,this.globalData,this):new SVGShapeElement(t,this.globalData,this)},HybridRenderer.prototype.createText=function(t){return this.supports3d?new HTextElement(t,this.globalData,this):new SVGTextElement(t,this.globalData,this)},HybridRenderer.prototype.createCamera=function(t){return this.camera=new HCameraElement(t,this.globalData,this),this.camera},HybridRenderer.prototype.createImage=function(t){return this.supports3d?new HImageElement(t,this.globalData,this):new IImageElement(t,this.globalData,this)},HybridRenderer.prototype.createComp=function(t){return this.supports3d?new HCompElement(t,this.globalData,this):new SVGCompElement(t,this.globalData,this)},HybridRenderer.prototype.createSolid=function(t){return this.supports3d?new HSolidElement(t,this.globalData,this):new ISolidElement(t,this.globalData,this)},HybridRenderer.prototype.createNull=SVGRenderer.prototype.createNull,HybridRenderer.prototype.getThreeDContainerByPos=function(t){for(var e=0,i=this.threeDElements.length;e<i;){if(this.threeDElements[e].startPos<=t&&this.threeDElements[e].endPos>=t)return this.threeDElements[e].perspectiveElem;e+=1}},HybridRenderer.prototype.createThreeDContainer=function(t,e){var i=createTag("div");styleDiv(i);var r=createTag("div");styleDiv(r),"3d"===e&&(i.style.width=this.globalData.compSize.w+"px",i.style.height=this.globalData.compSize.h+"px",i.style.transformOrigin=i.style.mozTransformOrigin=i.style.webkitTransformOrigin="50% 50%",r.style.transform=r.style.webkitTransform="matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)"),i.appendChild(r);var a={container:r,perspectiveElem:i,startPos:t,endPos:t,type:e};return this.threeDElements.push(a),a},HybridRenderer.prototype.build3dContainers=function(){var t,e,i=this.layers.length,r="";for(t=0;t<i;t+=1)this.layers[t].ddd&&3!==this.layers[t].ty?("3d"!==r&&(r="3d",e=this.createThreeDContainer(t,"3d")),e.endPos=Math.max(e.endPos,t)):("2d"!==r&&(r="2d",e=this.createThreeDContainer(t,"2d")),e.endPos=Math.max(e.endPos,t));for(i=this.threeDElements.length,t=i-1;t>=0;t--)this.resizerElem.appendChild(this.threeDElements[t].perspectiveElem)},HybridRenderer.prototype.addTo3dContainer=function(t,e){for(var i=0,r=this.threeDElements.length;i<r;){if(e<=this.threeDElements[i].endPos){for(var a,s=this.threeDElements[i].startPos;s<e;)this.elements[s]&&this.elements[s].getBaseElement&&(a=this.elements[s].getBaseElement()),s+=1;a?this.threeDElements[i].container.insertBefore(t,a):this.threeDElements[i].container.appendChild(t);break}i+=1}},HybridRenderer.prototype.configAnimation=function(t){var e=createTag("div"),i=this.animationItem.wrapper;e.style.width=t.w+"px",e.style.height=t.h+"px",this.resizerElem=e,styleDiv(e),e.style.transformStyle=e.style.webkitTransformStyle=e.style.mozTransformStyle="flat",this.renderConfig.className&&e.setAttribute("class",this.renderConfig.className),i.appendChild(e),e.style.overflow="hidden";var r=createNS("svg");r.setAttribute("width","1"),r.setAttribute("height","1"),styleDiv(r),this.resizerElem.appendChild(r);var a=createNS("defs");r.appendChild(a),this.data=t,this.setupGlobalData(t,r),this.globalData.defs=a,this.layers=t.layers,this.layerElement=this.resizerElem,this.build3dContainers(),this.updateContainerSize()},HybridRenderer.prototype.destroy=function(){this.animationItem.wrapper.innerHTML="",this.animationItem.container=null,this.globalData.defs=null;var t,e=this.layers?this.layers.length:0;for(t=0;t<e;t++)this.elements[t].destroy();this.elements.length=0,this.destroyed=!0,this.animationItem=null},HybridRenderer.prototype.updateContainerSize=function(){var t,e,i,r,a=this.animationItem.wrapper.offsetWidth,s=this.animationItem.wrapper.offsetHeight,n=a/s,o=this.globalData.compSize.w/this.globalData.compSize.h;o>n?(t=a/this.globalData.compSize.w,e=a/this.globalData.compSize.w,i=0,r=(s-this.globalData.compSize.h*(a/this.globalData.compSize.w))/2):(t=s/this.globalData.compSize.h,e=s/this.globalData.compSize.h,i=(a-this.globalData.compSize.w*(s/this.globalData.compSize.h))/2,r=0),this.resizerElem.style.transform=this.resizerElem.style.webkitTransform="matrix3d("+t+",0,0,0,0,"+e+",0,0,0,0,1,0,"+i+","+r+",0,1)"},HybridRenderer.prototype.renderFrame=SVGRenderer.prototype.renderFrame,HybridRenderer.prototype.hide=function(){this.resizerElem.style.display="none"},HybridRenderer.prototype.show=function(){this.resizerElem.style.display="block"},HybridRenderer.prototype.initItems=function(){if(this.buildAllItems(),this.camera)this.camera.setup();else{var t,e=this.globalData.compSize.w,i=this.globalData.compSize.h,r=this.threeDElements.length;for(t=0;t<r;t+=1)this.threeDElements[t].perspectiveElem.style.perspective=this.threeDElements[t].perspectiveElem.style.webkitPerspective=Math.sqrt(Math.pow(e,2)+Math.pow(i,2))+"px"}},HybridRenderer.prototype.searchExtraCompositions=function(t){var e,i=t.length,r=createTag("div");for(e=0;e<i;e+=1)if(t[e].xt){var a=this.createComp(t[e],r,this.globalData.comp,null);a.initExpressions(),this.globalData.projectInterface.registerComposition(a)}},MaskElement.prototype.getMaskProperty=function(t){return this.viewData[t].prop},MaskElement.prototype.renderFrame=function(t){var e,i=this.element.finalTransform.mat,r=this.masksProperties.length;for(e=0;e<r;e++)if((this.viewData[e].prop._mdf||t)&&this.drawPath(this.masksProperties[e],this.viewData[e].prop.v,this.viewData[e]),(this.viewData[e].op._mdf||t)&&this.viewData[e].elem.setAttribute("fill-opacity",this.viewData[e].op.v),"n"!==this.masksProperties[e].mode&&(this.viewData[e].invRect&&(this.element.finalTransform.mProp._mdf||t)&&(this.viewData[e].invRect.setAttribute("x",-i.props[12]),this.viewData[e].invRect.setAttribute("y",-i.props[13])),this.storedData[e].x&&(this.storedData[e].x._mdf||t))){var a=this.storedData[e].expan;this.storedData[e].x.v<0?("erode"!==this.storedData[e].lastOperator&&(this.storedData[e].lastOperator="erode",this.storedData[e].elem.setAttribute("filter","url("+locationHref+"#"+this.storedData[e].filterId+")")),a.setAttribute("radius",-this.storedData[e].x.v)):("dilate"!==this.storedData[e].lastOperator&&(this.storedData[e].lastOperator="dilate",this.storedData[e].elem.setAttribute("filter",null)),this.storedData[e].elem.setAttribute("stroke-width",2*this.storedData[e].x.v))}},MaskElement.prototype.getMaskelement=function(){return this.maskElement},MaskElement.prototype.createLayerSolidPath=function(){var t="M0,0 ";return t+=" h"+this.globalData.compSize.w,t+=" v"+this.globalData.compSize.h,t+=" h-"+this.globalData.compSize.w,t+=" v-"+this.globalData.compSize.h+" "},MaskElement.prototype.drawPath=function(t,e,i){var r,a,s=" M"+e.v[0][0]+","+e.v[0][1];for(a=e._length,r=1;r<a;r+=1)s+=" C"+e.o[r-1][0]+","+e.o[r-1][1]+" "+e.i[r][0]+","+e.i[r][1]+" "+e.v[r][0]+","+e.v[r][1];if(e.c&&a>1&&(s+=" C"+e.o[r-1][0]+","+e.o[r-1][1]+" "+e.i[0][0]+","+e.i[0][1]+" "+e.v[0][0]+","+e.v[0][1]),i.lastPath!==s){var n="";i.elem&&(e.c&&(n=t.inv?this.solidPath+s:s),i.elem.setAttribute("d",n)),i.lastPath=s}},MaskElement.prototype.destroy=function(){this.element=null,this.globalData=null,this.maskElement=null,this.data=null,this.masksProperties=null},HierarchyElement.prototype={initHierarchy:function(){this.hierarchy=[],this._isParent=!1,this.checkParenting()},setHierarchy:function(t){this.hierarchy=t},setAsParent:function(){this._isParent=!0},checkParenting:function(){void 0!==this.data.parent&&this.comp.buildElementParenting(this,this.data.parent,[])}},FrameElement.prototype={initFrame:function(){this._isFirstFrame=!1,this.dynamicProperties=[],this._mdf=!1},prepareProperties:function(t,e){var i,r=this.dynamicProperties.length;for(i=0;i<r;i+=1)(e||this._isParent&&"transform"===this.dynamicProperties[i].propType)&&(this.dynamicProperties[i].getValue(),this.dynamicProperties[i]._mdf&&(this.globalData._mdf=!0,this._mdf=!0))},addDynamicProperty:function(t){-1===this.dynamicProperties.indexOf(t)&&this.dynamicProperties.push(t)}},TransformElement.prototype={initTransform:function(){this.finalTransform={mProp:this.data.ks?TransformPropertyFactory.getTransformProperty(this,this.data.ks,this):{o:0},_matMdf:!1,_opMdf:!1,mat:new Matrix},this.data.ao&&(this.finalTransform.mProp.autoOriented=!0),this.data.ty},renderTransform:function(){if(this.finalTransform._opMdf=this.finalTransform.mProp.o._mdf||this._isFirstFrame,this.finalTransform._matMdf=this.finalTransform.mProp._mdf||this._isFirstFrame,this.hierarchy){var t,e=this.finalTransform.mat,i=0,r=this.hierarchy.length;if(!this.finalTransform._matMdf)for(;i<r;){if(this.hierarchy[i].finalTransform.mProp._mdf){this.finalTransform._matMdf=!0;break}i+=1}if(this.finalTransform._matMdf)for(t=this.finalTransform.mProp.v.props,e.cloneFromProps(t),i=0;i<r;i+=1)t=this.hierarchy[i].finalTransform.mProp.v.props,e.transform(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15])}},globalToLocal:function(t){var e=[];e.push(this.finalTransform);for(var i=!0,r=this.comp;i;)r.finalTransform?(r.data.hasMask&&e.splice(0,0,r.finalTransform),r=r.comp):i=!1;var a,s,n=e.length;for(a=0;a<n;a+=1)s=e[a].mat.applyToPointArray(0,0,0),t=[t[0]-s[0],t[1]-s[1],0];return t},mHelper:new Matrix},RenderableElement.prototype={initRenderable:function(){this.isInRange=!1,this.hidden=!1,this.isTransparent=!1,this.renderableComponents=[]},addRenderableComponent:function(t){-1===this.renderableComponents.indexOf(t)&&this.renderableComponents.push(t)},removeRenderableComponent:function(t){-1!==this.renderableComponents.indexOf(t)&&this.renderableComponents.splice(this.renderableComponents.indexOf(t),1)},prepareRenderableFrame:function(t){this.checkLayerLimits(t)},checkTransparency:function(){this.finalTransform.mProp.o.v<=0?!this.isTransparent&&this.globalData.renderConfig.hideOnTransparent&&(this.isTransparent=!0,this.hide()):this.isTransparent&&(this.isTransparent=!1,this.show())},checkLayerLimits:function(t){this.data.ip-this.data.st<=t&&this.data.op-this.data.st>t?!0!==this.isInRange&&(this.globalData._mdf=!0,this._mdf=!0,this.isInRange=!0,this.show()):!1!==this.isInRange&&(this.globalData._mdf=!0,this.isInRange=!1,this.hide())},renderRenderable:function(){var t,e=this.renderableComponents.length;for(t=0;t<e;t+=1)this.renderableComponents[t].renderFrame(this._isFirstFrame)},sourceRectAtTime:function(){return{top:0,left:0,width:100,height:100}},getLayerSize:function(){return 5===this.data.ty?{w:this.data.textData.width,h:this.data.textData.height}:{w:this.data.width,h:this.data.height}}},function(){extendPrototype([RenderableElement,createProxyFunction({initElement:function(t,e,i){this.initFrame(),this.initBaseData(t,e,i),this.initTransform(t,e,i),this.initHierarchy(),this.initRenderable(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),this.createContent(),this.hide()},hide:function(){if(!this.hidden&&(!this.isInRange||this.isTransparent)){(this.baseElement||this.layerElement).style.display="none",this.hidden=!0}},show:function(){if(this.isInRange&&!this.isTransparent){if(!this.data.hd){(this.baseElement||this.layerElement).style.display="block"}this.hidden=!1,this._isFirstFrame=!0}},renderFrame:function(){this.data.hd||this.hidden||(this.renderTransform(),this.renderRenderable(),this.renderElement(),this.renderInnerContent(),this._isFirstFrame&&(this._isFirstFrame=!1))},renderInnerContent:function(){},prepareFrame:function(t){this._mdf=!1,this.prepareRenderableFrame(t),this.prepareProperties(t,this.isInRange),this.checkTransparency()},destroy:function(){this.innerElem=null,this.destroyBaseElement()}})],RenderableDOMElement)}(),SVGStyleData.prototype.reset=function(){this.d="",this._mdf=!1},SVGShapeData.prototype.setAsAnimated=function(){this._isAnimated=!0},extendPrototype([DynamicPropertyContainer],SVGStrokeStyleData),extendPrototype([DynamicPropertyContainer],SVGFillStyleData),SVGGradientFillStyleData.prototype.initGradientData=function(t,e,i){this.o=PropertyFactory.getProp(t,e.o,0,.01,this),this.s=PropertyFactory.getProp(t,e.s,1,null,this),this.e=PropertyFactory.getProp(t,e.e,1,null,this),this.h=PropertyFactory.getProp(t,e.h||{k:0},0,.01,this),this.a=PropertyFactory.getProp(t,e.a||{k:0},0,degToRads,this),this.g=new GradientProperty(t,e.g,this),this.style=i,this.stops=[],this.setGradientData(i.pElem,e),this.setGradientOpacity(e,i),this._isAnimated=!!this._isAnimated},SVGGradientFillStyleData.prototype.setGradientData=function(t,e){var i=createElementID(),r=createNS(1===e.t?"linearGradient":"radialGradient");r.setAttribute("id",i),r.setAttribute("spreadMethod","pad"),r.setAttribute("gradientUnits","userSpaceOnUse");var a,s,n,o=[];for(n=4*e.g.p,s=0;s<n;s+=4)a=createNS("stop"),r.appendChild(a),o.push(a);t.setAttribute("gf"===e.ty?"fill":"stroke","url("+locationHref+"#"+i+")"),this.gf=r,this.cst=o},SVGGradientFillStyleData.prototype.setGradientOpacity=function(t,e){if(this.g._hasOpacity&&!this.g._collapsable){var i,r,a,s=createNS("mask"),n=createNS("path");s.appendChild(n);var o=createElementID(),h=createElementID();s.setAttribute("id",h);var l=createNS(1===t.t?"linearGradient":"radialGradient");l.setAttribute("id",o),l.setAttribute("spreadMethod","pad"),l.setAttribute("gradientUnits","userSpaceOnUse"),a=t.g.k.k[0].s?t.g.k.k[0].s.length:t.g.k.k.length;var p=this.stops;for(r=4*t.g.p;r<a;r+=2)i=createNS("stop"),i.setAttribute("stop-color","rgb(255,255,255)"),l.appendChild(i),p.push(i);n.setAttribute("gf"===t.ty?"fill":"stroke","url("+locationHref+"#"+o+")"),this.of=l,this.ms=s,this.ost=p,this.maskId=h,e.msElem=n}},extendPrototype([DynamicPropertyContainer],SVGGradientFillStyleData),extendPrototype([SVGGradientFillStyleData,DynamicPropertyContainer],SVGGradientStrokeStyleData);var SVGElementsRenderer=function(){function t(t){t.ty;switch(t.ty){case"fl":return r;case"gf":return s;case"gs":return a;case"st":return n;case"sh":case"el":case"rc":case"sr":return i;case"tr":return e}}function e(t,e,i){(i||e.transform.op._mdf)&&e.transform.container.setAttribute("opacity",e.transform.op.v),(i||e.transform.mProps._mdf)&&e.transform.container.setAttribute("transform",e.transform.mProps.v.to2dCSS())}function i(t,e,i){var r,a,s,n,l,p,c,m,f,d,u,y=e.styles.length,g=e.lvl;for(p=0;p<y;p+=1){if(n=e.sh._mdf||i,e.styles[p].lvl<g){for(m=h.reset(),d=g-e.styles[p].lvl,u=e.transformers.length-1;!n&&d>0;)n=e.transformers[u].mProps._mdf||n,d--,u--;if(n)for(d=g-e.styles[p].lvl,u=e.transformers.length-1;d>0;)f=e.transformers[u].mProps.v.props,m.transform(f[0],f[1],f[2],f[3],f[4],f[5],f[6],f[7],f[8],f[9],f[10],f[11],f[12],f[13],f[14],f[15]),d--,u--}else m=o;if(c=e.sh.paths,a=c._length,n){for(s="",r=0;r<a;r+=1)(l=c.shapes[r])&&l._length&&(s+=buildShapeString(l,l._length,l.c,m));e.caches[p]=s}else s=e.caches[p];e.styles[p].d+=!0===t.hd?"":s,e.styles[p]._mdf=n||e.styles[p]._mdf}}function r(t,e,i){var r=e.style;(e.c._mdf||i)&&r.pElem.setAttribute("fill","rgb("+bm_floor(e.c.v[0])+","+bm_floor(e.c.v[1])+","+bm_floor(e.c.v[2])+")"),(e.o._mdf||i)&&r.pElem.setAttribute("fill-opacity",e.o.v)}function a(t,e,i){s(t,e,i),n(t,e,i)}function s(t,e,i){var r=e.gf,a=e.g._hasOpacity,s=e.s.v,n=e.e.v;if(e.o._mdf||i){var o="gf"===t.ty?"fill-opacity":"stroke-opacity";e.style.pElem.setAttribute(o,e.o.v)}if(e.s._mdf||i){var h=1===t.t?"x1":"cx",l="x1"===h?"y1":"cy";r.setAttribute(h,s[0]),r.setAttribute(l,s[1]),a&&!e.g._collapsable&&(e.of.setAttribute(h,s[0]),e.of.setAttribute(l,s[1]))}var p,c,m,f;if(e.g._cmdf||i){p=e.cst;var d=e.g.c;for(m=p.length,c=0;c<m;c+=1)f=p[c],f.setAttribute("offset",d[4*c]+"%"),f.setAttribute("stop-color","rgb("+d[4*c+1]+","+d[4*c+2]+","+d[4*c+3]+")")}if(a&&(e.g._omdf||i)){var u=e.g.o;for(p=e.g._collapsable?e.cst:e.ost,m=p.length,c=0;c<m;c+=1)f=p[c],e.g._collapsable||f.setAttribute("offset",u[2*c]+"%"),f.setAttribute("stop-opacity",u[2*c+1])}if(1===t.t)(e.e._mdf||i)&&(r.setAttribute("x2",n[0]),r.setAttribute("y2",n[1]),a&&!e.g._collapsable&&(e.of.setAttribute("x2",n[0]),e.of.setAttribute("y2",n[1])));else{var y;if((e.s._mdf||e.e._mdf||i)&&(y=Math.sqrt(Math.pow(s[0]-n[0],2)+Math.pow(s[1]-n[1],2)),r.setAttribute("r",y),a&&!e.g._collapsable&&e.of.setAttribute("r",y)),e.e._mdf||e.h._mdf||e.a._mdf||i){y||(y=Math.sqrt(Math.pow(s[0]-n[0],2)+Math.pow(s[1]-n[1],2)));var g=Math.atan2(n[1]-s[1],n[0]-s[0]),x=e.h.v>=1?.99:e.h.v<=-1?-.99:e.h.v,v=y*x,k=Math.cos(g+e.a.v)*v+s[0],b=Math.sin(g+e.a.v)*v+s[1];r.setAttribute("fx",k),r.setAttribute("fy",b),a&&!e.g._collapsable&&(e.of.setAttribute("fx",k),e.of.setAttribute("fy",b))}}}function n(t,e,i){var r=e.style,a=e.d;a&&(a._mdf||i)&&a.dashStr&&(r.pElem.setAttribute("stroke-dasharray",a.dashStr),r.pElem.setAttribute("stroke-dashoffset",a.dashoffset[0])),e.c&&(e.c._mdf||i)&&r.pElem.setAttribute("stroke","rgb("+bm_floor(e.c.v[0])+","+bm_floor(e.c.v[1])+","+bm_floor(e.c.v[2])+")"),(e.o._mdf||i)&&r.pElem.setAttribute("stroke-opacity",e.o.v),(e.w._mdf||i)&&(r.pElem.setAttribute("stroke-width",e.w.v),r.msElem&&r.msElem.setAttribute("stroke-width",e.w.v))}var o=new Matrix,h=new Matrix;return{createRenderFunction:t}}();ShapeTransformManager.prototype={addTransformSequence:function(t){var e,i=t.length,r="_";for(e=0;e<i;e+=1)r+=t[e].transform.key+"_";var a=this.sequences[r];return a||(a={transforms:[].concat(t),finalTransform:new Matrix,_mdf:!1},this.sequences[r]=a,this.sequenceList.push(a)),a},processSequence:function(t,e){for(var i=0,r=t.transforms.length,a=e;i<r&&!e;){if(t.transforms[i].transform.mProps._mdf){a=!0;break}i+=1}if(a){var s;for(t.finalTransform.reset(),i=r-1;i>=0;i-=1)s=t.transforms[i].transform.mProps.v.props,t.finalTransform.transform(s[0],s[1],s[2],s[3],s[4],s[5],s[6],s[7],s[8],s[9],s[10],s[11],s[12],s[13],s[14],s[15])}t._mdf=a},processSequences:function(t){var e,i=this.sequenceList.length;for(e=0;e<i;e+=1)this.processSequence(this.sequenceList[e],t)},getNewKey:function(){return"_"+this.transform_key_count++}},CVShapeData.prototype.setAsAnimated=SVGShapeData.prototype.setAsAnimated,BaseElement.prototype={checkMasks:function(){if(!this.data.hasMask)return!1;for(var t=0,e=this.data.masksProperties.length;t<e;){if("n"!==this.data.masksProperties[t].mode&&!1!==this.data.masksProperties[t].cl)return!0;t+=1}return!1},initExpressions:function(){this.layerInterface=LayerExpressionInterface(this),this.data.hasMask&&this.maskManager&&this.layerInterface.registerMaskInterface(this.maskManager);var t=EffectsExpressionInterface.createEffectsInterface(this,this.layerInterface);this.layerInterface.registerEffectsInterface(t),0===this.data.ty||this.data.xt?this.compInterface=CompExpressionInterface(this):4===this.data.ty?(this.layerInterface.shapeInterface=ShapeExpressionInterface(this.shapesData,this.itemsData,this.layerInterface),this.layerInterface.content=this.layerInterface.shapeInterface):5===this.data.ty&&(this.layerInterface.textInterface=TextExpressionInterface(this),this.layerInterface.text=this.layerInterface.textInterface)},setBlendMode:function(){var t=getBlendMode(this.data.bm);(this.baseElement||this.layerElement).style["mix-blend-mode"]=t},initBaseData:function(t,e,i){this.globalData=e,this.comp=i,this.data=t,this.layerId=createElementID(),this.data.sr||(this.data.sr=1),this.effectsManager=new EffectsManager(this.data,this,this.dynamicProperties)},getType:function(){return this.type},sourceRectAtTime:function(){}},NullElement.prototype.prepareFrame=function(t){this.prepareProperties(t,!0)},NullElement.prototype.renderFrame=function(){},NullElement.prototype.getBaseElement=function(){return null},NullElement.prototype.destroy=function(){},NullElement.prototype.sourceRectAtTime=function(){},NullElement.prototype.hide=function(){},extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement],NullElement),SVGBaseElement.prototype={initRendererElement:function(){this.layerElement=createNS("g")},createContainerElements:function(){this.matteElement=createNS("g"),this.transformedElement=this.layerElement,this.maskedElement=this.layerElement,this._sizeChanged=!1;var t,e,i,r=null;if(this.data.td){if(3==this.data.td||1==this.data.td){var a=createNS("mask");a.setAttribute("id",this.layerId),a.setAttribute("mask-type",3==this.data.td?"luminance":"alpha"),a.appendChild(this.layerElement),r=a,this.globalData.defs.appendChild(a),featureSupport.maskType||1!=this.data.td||(a.setAttribute("mask-type","luminance"),t=createElementID(),e=filtersFactory.createFilter(t),this.globalData.defs.appendChild(e),e.appendChild(filtersFactory.createAlphaToLuminanceFilter()),i=createNS("g"),i.appendChild(this.layerElement),r=i,a.appendChild(i),i.setAttribute("filter","url("+locationHref+"#"+t+")"))}else if(2==this.data.td){var s=createNS("mask");s.setAttribute("id",this.layerId),s.setAttribute("mask-type","alpha");var n=createNS("g");s.appendChild(n),t=createElementID(),e=filtersFactory.createFilter(t);var o=createNS("feComponentTransfer");o.setAttribute("in","SourceGraphic"),e.appendChild(o);var h=createNS("feFuncA");h.setAttribute("type","table"),h.setAttribute("tableValues","1.0 0.0"),o.appendChild(h),this.globalData.defs.appendChild(e);var l=createNS("rect");l.setAttribute("width",this.comp.data.w),l.setAttribute("height",this.comp.data.h),l.setAttribute("x","0"),l.setAttribute("y","0"),l.setAttribute("fill","#ffffff"),l.setAttribute("opacity","0"),n.setAttribute("filter","url("+locationHref+"#"+t+")"),n.appendChild(l),n.appendChild(this.layerElement),r=n,featureSupport.maskType||(s.setAttribute("mask-type","luminance"),e.appendChild(filtersFactory.createAlphaToLuminanceFilter()),i=createNS("g"),n.appendChild(l),i.appendChild(this.layerElement),r=i,n.appendChild(i)),this.globalData.defs.appendChild(s)}}else this.data.tt?(this.matteElement.appendChild(this.layerElement),r=this.matteElement,this.baseElement=this.matteElement):this.baseElement=this.layerElement;if(this.data.ln&&this.layerElement.setAttribute("id",this.data.ln),this.data.cl&&this.layerElement.setAttribute("class",this.data.cl),0===this.data.ty&&!this.data.hd){var p=createNS("clipPath"),c=createNS("path");c.setAttribute("d","M0,0 L"+this.data.w+",0 L"+this.data.w+","+this.data.h+" L0,"+this.data.h+"z");var m=createElementID();if(p.setAttribute("id",m),p.appendChild(c),this.globalData.defs.appendChild(p),this.checkMasks()){var f=createNS("g");f.setAttribute("clip-path","url("+locationHref+"#"+m+")"),f.appendChild(this.layerElement),this.transformedElement=f,r?r.appendChild(this.transformedElement):this.baseElement=this.transformedElement}else this.layerElement.setAttribute("clip-path","url("+locationHref+"#"+m+")")}0!==this.data.bm&&this.setBlendMode()},renderElement:function(){this.finalTransform._matMdf&&this.transformedElement.setAttribute("transform",this.finalTransform.mat.to2dCSS()),this.finalTransform._opMdf&&this.transformedElement.setAttribute("opacity",this.finalTransform.mProp.o.v)},destroyBaseElement:function(){this.layerElement=null,this.matteElement=null,this.maskManager.destroy()},getBaseElement:function(){return this.data.hd?null:this.baseElement},createRenderableComponents:function(){this.maskManager=new MaskElement(this.data,this,this.globalData),this.renderableEffectsManager=new SVGEffects(this)},setMatte:function(t){this.matteElement&&this.matteElement.setAttribute("mask","url("+locationHref+"#"+t+")")}},IShapeElement.prototype={addShapeToModifiers:function(t){var e,i=this.shapeModifiers.length;for(e=0;e<i;e+=1)this.shapeModifiers[e].addShape(t)},isShapeInAnimatedModifiers:function(t){for(var e=this.shapeModifiers.length;0<e;)if(this.shapeModifiers[0].isAnimatedWithShape(t))return!0;return!1},renderModifiers:function(){if(this.shapeModifiers.length){var t,e=this.shapes.length;for(t=0;t<e;t+=1)this.shapes[t].sh.reset();for(e=this.shapeModifiers.length,t=e-1;t>=0;t-=1)this.shapeModifiers[t].processShapes(this._isFirstFrame)}},lcEnum:{1:"butt",2:"round",3:"square"},ljEnum:{1:"miter",2:"round",3:"bevel"},searchProcessedElement:function(t){for(var e=this.processedElements,i=0,r=e.length;i<r;){if(e[i].elem===t)return e[i].pos;i+=1}return 0},addProcessedElement:function(t,e){for(var i=this.processedElements,r=i.length;r;)if(r-=1,i[r].elem===t)return void(i[r].pos=e);i.push(new ProcessedElement(t,e))},prepareFrame:function(t){this.prepareRenderableFrame(t),this.prepareProperties(t,this.isInRange)}},ITextElement.prototype.initElement=function(t,e,i){this.lettersChangedFlag=!0,this.initFrame(),this.initBaseData(t,e,i),this.textProperty=new TextProperty(this,t.t,this.dynamicProperties),this.textAnimator=new TextAnimatorProperty(t.t,this.renderType,this),this.initTransform(t,e,i),this.initHierarchy(),this.initRenderable(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),this.createContent(),this.hide(),this.textAnimator.searchProperties(this.dynamicProperties)},ITextElement.prototype.prepareFrame=function(t){this._mdf=!1,this.prepareRenderableFrame(t),this.prepareProperties(t,this.isInRange),(this.textProperty._mdf||this.textProperty._isFirstFrame)&&(this.buildNewText(),this.textProperty._isFirstFrame=!1,this.textProperty._mdf=!1)},ITextElement.prototype.createPathShape=function(t,e){var i,r,a=e.length,s="";for(i=0;i<a;i+=1)r=e[i].ks.k,s+=buildShapeString(r,r.i.length,!0,t);return s},ITextElement.prototype.updateDocumentData=function(t,e){this.textProperty.updateDocumentData(t,e)},ITextElement.prototype.canResizeFont=function(t){this.textProperty.canResizeFont(t)},ITextElement.prototype.setMinimumFontSize=function(t){this.textProperty.setMinimumFontSize(t)},ITextElement.prototype.applyTextPropertiesToMatrix=function(t,e,i,r,a){switch(t.ps&&e.translate(t.ps[0],t.ps[1]+t.ascent,0),e.translate(0,-t.ls,0),t.j){case 1:e.translate(t.justifyOffset+(t.boxWidth-t.lineWidths[i]),0,0);break;case 2:e.translate(t.justifyOffset+(t.boxWidth-t.lineWidths[i])/2,0,0)}e.translate(r,a,0)},ITextElement.prototype.buildColor=function(t){return"rgb("+Math.round(255*t[0])+","+Math.round(255*t[1])+","+Math.round(255*t[2])+")"},ITextElement.prototype.emptyProp=new LetterProps,ITextElement.prototype.destroy=function(){},extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement,RenderableDOMElement],ICompElement),ICompElement.prototype.initElement=function(t,e,i){this.initFrame(),this.initBaseData(t,e,i),this.initTransform(t,e,i),this.initRenderable(),this.initHierarchy(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),!this.data.xt&&e.progressiveLoad||this.buildAllItems(),this.hide()},ICompElement.prototype.prepareFrame=function(t){if(this._mdf=!1,this.prepareRenderableFrame(t),this.prepareProperties(t,this.isInRange),this.isInRange||this.data.xt){if(this.tm._placeholder)this.renderedFrame=t/this.data.sr;else{var e=this.tm.v;e===this.data.op&&(e=this.data.op-1),this.renderedFrame=e}var i,r=this.elements.length;for(this.completeLayers||this.checkLayers(this.renderedFrame),i=r-1;i>=0;i-=1)(this.completeLayers||this.elements[i])&&(this.elements[i].prepareFrame(this.renderedFrame-this.layers[i].st),this.elements[i]._mdf&&(this._mdf=!0))}},ICompElement.prototype.renderInnerContent=function(){var t,e=this.layers.length;for(t=0;t<e;t+=1)(this.completeLayers||this.elements[t])&&this.elements[t].renderFrame()},ICompElement.prototype.setElements=function(t){this.elements=t},ICompElement.prototype.getElements=function(){return this.elements},ICompElement.prototype.destroyElements=function(){var t,e=this.layers.length;for(t=0;t<e;t+=1)this.elements[t]&&this.elements[t].destroy()},ICompElement.prototype.destroy=function(){this.destroyElements(),this.destroyBaseElement()},extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],IImageElement),IImageElement.prototype.createContent=function(){var t=this.globalData.getAssetsPath(this.assetData);this.innerElem=createNS("image"),this.innerElem.setAttribute("width",this.assetData.w+"px"),this.innerElem.setAttribute("height",this.assetData.h+"px"),this.innerElem.setAttribute("preserveAspectRatio",this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio),this.innerElem.setAttributeNS("http://www.w3.org/1999/xlink","href",t),this.layerElement.appendChild(this.innerElem)},IImageElement.prototype.sourceRectAtTime=function(){return this.sourceRect},extendPrototype([IImageElement],ISolidElement),ISolidElement.prototype.createContent=function(){var t=createNS("rect");t.setAttribute("width",this.data.sw),t.setAttribute("height",this.data.sh),t.setAttribute("fill",this.data.sc),this.layerElement.appendChild(t)},extendPrototype([SVGRenderer,ICompElement,SVGBaseElement],SVGCompElement),extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],SVGTextElement),SVGTextElement.prototype.createContent=function(){this.data.singleShape&&!this.globalData.fontManager.chars&&(this.textContainer=createNS("text"))},SVGTextElement.prototype.buildTextContents=function(t){for(var e=0,i=t.length,r=[],a="";e<i;)t[e]===String.fromCharCode(13)||t[e]===String.fromCharCode(3)?(r.push(a),a=""):a+=t[e],e+=1;return r.push(a),r},SVGTextElement.prototype.buildNewText=function(){var t,e,i=this.textProperty.currentData;this.renderedLetters=createSizedArray(i?i.l.length:0),i.fc?this.layerElement.setAttribute("fill",this.buildColor(i.fc)):this.layerElement.setAttribute("fill","rgba(0,0,0,0)"),i.sc&&(this.layerElement.setAttribute("stroke",this.buildColor(i.sc)),this.layerElement.setAttribute("stroke-width",i.sw)),this.layerElement.setAttribute("font-size",i.finalSize);var r=this.globalData.fontManager.getFontByName(i.f);if(r.fClass)this.layerElement.setAttribute("class",r.fClass);else{this.layerElement.setAttribute("font-family",r.fFamily);var a=i.fWeight,s=i.fStyle;this.layerElement.setAttribute("font-style",s),this.layerElement.setAttribute("font-weight",a)}this.layerElement.setAttribute("aria-label",i.t);var n=i.l||[],o=!!this.globalData.fontManager.chars;e=n.length;var h,l,p=this.mHelper,c="",m=this.data.singleShape,f=0,d=0,u=!0,y=i.tr/1e3*i.finalSize;if(!m||o||i.sz){var g,x,v=this.textSpans.length;for(t=0;t<e;t+=1)o&&m&&0!==t||(h=v>t?this.textSpans[t]:createNS(o?"path":"text"),v<=t&&(h.setAttribute("stroke-linecap","butt"),h.setAttribute("stroke-linejoin","round"),h.setAttribute("stroke-miterlimit","4"),this.textSpans[t]=h,this.layerElement.appendChild(h)),h.style.display="inherit"),p.reset(),p.scale(i.finalSize/100,i.finalSize/100),m&&(n[t].n&&(f=-y,d+=i.yOffset,d+=u?1:0,u=!1),this.applyTextPropertiesToMatrix(i,p,n[t].line,f,d),f+=n[t].l||0,f+=y),o?(x=this.globalData.fontManager.getCharData(i.finalText[t],r.fStyle,this.globalData.fontManager.getFontByName(i.f).fFamily),g=x&&x.data||{},l=g.shapes?g.shapes[0].it:[],m?c+=this.createPathShape(p,l):h.setAttribute("d",this.createPathShape(p,l))):(m&&h.setAttribute("transform","translate("+p.props[12]+","+p.props[13]+")"),h.textContent=n[t].val,h.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"));m&&h&&h.setAttribute("d",c)}else{var k=this.textContainer,b="start";switch(i.j){case 1:b="end";break;case 2:b="middle"}k.setAttribute("text-anchor",b),k.setAttribute("letter-spacing",y);var E=this.buildTextContents(i.finalText);for(e=E.length,d=i.ps?i.ps[1]+i.ascent:0,t=0;t<e;t+=1)h=this.textSpans[t]||createNS("tspan"),h.textContent=E[t],h.setAttribute("x",0),h.setAttribute("y",d),h.style.display="inherit",k.appendChild(h),this.textSpans[t]=h,d+=i.finalLineHeight;this.layerElement.appendChild(k)}for(;t<this.textSpans.length;)this.textSpans[t].style.display="none",t+=1;this._sizeChanged=!0},SVGTextElement.prototype.sourceRectAtTime=function(t){if(this.prepareFrame(this.comp.renderedFrame-this.data.st),this.renderInnerContent(),this._sizeChanged){this._sizeChanged=!1;var e=this.layerElement.getBBox();this.bbox={top:e.y,left:e.x,width:e.width,height:e.height}}return this.bbox},SVGTextElement.prototype.renderInnerContent=function(){if(!this.data.singleShape&&(this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag),this.lettersChangedFlag||this.textAnimator.lettersChangedFlag)){this._sizeChanged=!0;var t,e,i=this.textAnimator.renderedLetters,r=this.textProperty.currentData.l;e=r.length;var a,s;for(t=0;t<e;t+=1)r[t].n||(a=i[t],s=this.textSpans[t],a._mdf.m&&s.setAttribute("transform",a.m),a._mdf.o&&s.setAttribute("opacity",a.o),a._mdf.sw&&s.setAttribute("stroke-width",a.sw),a._mdf.sc&&s.setAttribute("stroke",a.sc),a._mdf.fc&&s.setAttribute("fill",a.fc))}},extendPrototype([BaseElement,TransformElement,SVGBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableDOMElement],SVGShapeElement),SVGShapeElement.prototype.initSecondaryElement=function(){},SVGShapeElement.prototype.identityMatrix=new Matrix,SVGShapeElement.prototype.buildExpressionInterface=function(){},SVGShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],!0),this.filterUniqueShapes()},SVGShapeElement.prototype.filterUniqueShapes=function(){var t,e,i,r,a=this.shapes.length,s=this.stylesList.length,n=[],o=!1;for(i=0;i<s;i+=1){for(r=this.stylesList[i],o=!1,n.length=0,t=0;t<a;t+=1)e=this.shapes[t],-1!==e.styles.indexOf(r)&&(n.push(e),o=e._isAnimated||o);n.length>1&&o&&this.setShapesAsAnimated(n)}},SVGShapeElement.prototype.setShapesAsAnimated=function(t){var e,i=t.length;for(e=0;e<i;e+=1)t[e].setAsAnimated()},SVGShapeElement.prototype.createStyleElement=function(t,e){var i,r=new SVGStyleData(t,e),a=r.pElem;if("st"===t.ty)i=new SVGStrokeStyleData(this,t,r);else if("fl"===t.ty)i=new SVGFillStyleData(this,t,r);else if("gf"===t.ty||"gs"===t.ty){var s="gf"===t.ty?SVGGradientFillStyleData:SVGGradientStrokeStyleData;i=new s(this,t,r),this.globalData.defs.appendChild(i.gf),i.maskId&&(this.globalData.defs.appendChild(i.ms),this.globalData.defs.appendChild(i.of),a.setAttribute("mask","url("+locationHref+"#"+i.maskId+")"))}return"st"!==t.ty&&"gs"!==t.ty||(a.setAttribute("stroke-linecap",this.lcEnum[t.lc]||"round"),a.setAttribute("stroke-linejoin",this.ljEnum[t.lj]||"round"),a.setAttribute("fill-opacity","0"),1===t.lj&&a.setAttribute("stroke-miterlimit",t.ml)),2===t.r&&a.setAttribute("fill-rule","evenodd"),t.ln&&a.setAttribute("id",t.ln),t.cl&&a.setAttribute("class",t.cl),t.bm&&(a.style["mix-blend-mode"]=getBlendMode(t.bm)),this.stylesList.push(r),this.addToAnimatedContents(t,i),i},SVGShapeElement.prototype.createGroupElement=function(t){var e=new ShapeGroupData;return t.ln&&e.gr.setAttribute("id",t.ln),t.cl&&e.gr.setAttribute("class",t.cl),t.bm&&(e.gr.style["mix-blend-mode"]=getBlendMode(t.bm)),e},SVGShapeElement.prototype.createTransformElement=function(t,e){var i=TransformPropertyFactory.getTransformProperty(this,t,this),r=new SVGTransformData(i,i.o,e);return this.addToAnimatedContents(t,r),r},SVGShapeElement.prototype.createShapeElement=function(t,e,i){var r=4;"rc"===t.ty?r=5:"el"===t.ty?r=6:"sr"===t.ty&&(r=7);var a=ShapePropertyFactory.getShapeProp(this,t,r,this),s=new SVGShapeData(e,i,a);return this.shapes.push(s),this.addShapeToModifiers(s),this.addToAnimatedContents(t,s),s},SVGShapeElement.prototype.addToAnimatedContents=function(t,e){for(var i=0,r=this.animatedContents.length;i<r;){if(this.animatedContents[i].element===e)return;i+=1}this.animatedContents.push({fn:SVGElementsRenderer.createRenderFunction(t),element:e,data:t})},SVGShapeElement.prototype.setElementStyles=function(t){var e,i=t.styles,r=this.stylesList.length;for(e=0;e<r;e+=1)this.stylesList[e].closed||i.push(this.stylesList[e])},SVGShapeElement.prototype.reloadShapes=function(){this._isFirstFrame=!0;var t,e=this.itemsData.length;for(t=0;t<e;t+=1)this.prevViewData[t]=this.itemsData[t];for(this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],!0),this.filterUniqueShapes(),e=this.dynamicProperties.length,t=0;t<e;t+=1)this.dynamicProperties[t].getValue();this.renderModifiers()},SVGShapeElement.prototype.searchShapes=function(t,e,i,r,a,s,n){var o,h,l,p,c,m,f=[].concat(s),d=t.length-1,u=[],y=[];for(o=d;o>=0;o-=1){if(m=this.searchProcessedElement(t[o]),m?e[o]=i[m-1]:t[o]._render=n,"fl"==t[o].ty||"st"==t[o].ty||"gf"==t[o].ty||"gs"==t[o].ty)m?e[o].style.closed=!1:e[o]=this.createStyleElement(t[o],a),t[o]._render&&r.appendChild(e[o].style.pElem),u.push(e[o].style);else if("gr"==t[o].ty){if(m)for(l=e[o].it.length,h=0;h<l;h+=1)e[o].prevViewData[h]=e[o].it[h];else e[o]=this.createGroupElement(t[o]);this.searchShapes(t[o].it,e[o].it,e[o].prevViewData,e[o].gr,a+1,f,n),t[o]._render&&r.appendChild(e[o].gr)}else"tr"==t[o].ty?(m||(e[o]=this.createTransformElement(t[o],r)),p=e[o].transform,f.push(p)):"sh"==t[o].ty||"rc"==t[o].ty||"el"==t[o].ty||"sr"==t[o].ty?(m||(e[o]=this.createShapeElement(t[o],f,a)),this.setElementStyles(e[o])):"tm"==t[o].ty||"rd"==t[o].ty||"ms"==t[o].ty?(m?(c=e[o],c.closed=!1):(c=ShapeModifiers.getModifier(t[o].ty),c.init(this,t[o]),e[o]=c,this.shapeModifiers.push(c)),y.push(c)):"rp"==t[o].ty&&(m?(c=e[o],c.closed=!0):(c=ShapeModifiers.getModifier(t[o].ty),e[o]=c,c.init(this,t,o,e),this.shapeModifiers.push(c),n=!1),y.push(c));this.addProcessedElement(t[o],o+1)}for(d=u.length,o=0;o<d;o+=1)u[o].closed=!0;for(d=y.length,o=0;o<d;o+=1)y[o].closed=!0},SVGShapeElement.prototype.renderInnerContent=function(){this.renderModifiers();var t,e=this.stylesList.length;for(t=0;t<e;t+=1)this.stylesList[t].reset();for(this.renderShape(),t=0;t<e;t+=1)(this.stylesList[t]._mdf||this._isFirstFrame)&&(this.stylesList[t].msElem&&(this.stylesList[t].msElem.setAttribute("d",this.stylesList[t].d),this.stylesList[t].d="M0 0"+this.stylesList[t].d),this.stylesList[t].pElem.setAttribute("d",this.stylesList[t].d||"M0 0"))},SVGShapeElement.prototype.renderShape=function(){var t,e,i=this.animatedContents.length;for(t=0;t<i;t+=1)e=this.animatedContents[t],(this._isFirstFrame||e.element._isAnimated)&&!0!==e.data&&e.fn(e.data,e.element,this._isFirstFrame)},SVGShapeElement.prototype.destroy=function(){this.destroyBaseElement(),this.shapesData=null,this.itemsData=null},SVGTintFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=this.filterManager.effectElements[0].p.v,i=this.filterManager.effectElements[1].p.v,r=this.filterManager.effectElements[2].p.v/100;this.matrixFilter.setAttribute("values",i[0]-e[0]+" 0 0 0 "+e[0]+" "+(i[1]-e[1])+" 0 0 0 "+e[1]+" "+(i[2]-e[2])+" 0 0 0 "+e[2]+" 0 0 0 "+r+" 0")}},SVGFillFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=this.filterManager.effectElements[2].p.v,i=this.filterManager.effectElements[6].p.v;this.matrixFilter.setAttribute("values","0 0 0 0 "+e[0]+" 0 0 0 0 "+e[1]+" 0 0 0 0 "+e[2]+" 0 0 0 "+i+" 0")}},SVGGaussianBlurEffect.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=.3*this.filterManager.effectElements[0].p.v,i=this.filterManager.effectElements[1].p.v,r=3==i?0:e,a=2==i?0:e;this.feGaussianBlur.setAttribute("stdDeviation",r+" "+a);var s=1==this.filterManager.effectElements[2].p.v?"wrap":"duplicate";this.feGaussianBlur.setAttribute("edgeMode",s)}},SVGStrokeEffect.prototype.initialize=function(){var t,e,i,r,a=this.elem.layerElement.children||this.elem.layerElement.childNodes;for(1===this.filterManager.effectElements[1].p.v?(r=this.elem.maskManager.masksProperties.length,i=0):(i=this.filterManager.effectElements[0].p.v-1,r=i+1),e=createNS("g"),e.setAttribute("fill","none"),e.setAttribute("stroke-linecap","round"),e.setAttribute("stroke-dashoffset",1),i;i<r;i+=1)t=createNS("path"),e.appendChild(t),this.paths.push({p:t,m:i});if(3===this.filterManager.effectElements[10].p.v){var s=createNS("mask"),n=createElementID();s.setAttribute("id",n),s.setAttribute("mask-type","alpha"),s.appendChild(e),this.elem.globalData.defs.appendChild(s);var o=createNS("g");for(o.setAttribute("mask","url("+locationHref+"#"+n+")");a[0];)o.appendChild(a[0]);this.elem.layerElement.appendChild(o),this.masker=s,e.setAttribute("stroke","#fff")}else if(1===this.filterManager.effectElements[10].p.v||2===this.filterManager.effectElements[10].p.v){if(2===this.filterManager.effectElements[10].p.v)for(a=this.elem.layerElement.children||this.elem.layerElement.childNodes;a.length;)this.elem.layerElement.removeChild(a[0]);this.elem.layerElement.appendChild(e),this.elem.layerElement.removeAttribute("mask"),e.setAttribute("stroke","#fff")}this.initialized=!0,this.pathMasker=e},SVGStrokeEffect.prototype.renderFrame=function(t){this.initialized||this.initialize();var e,i,r,a=this.paths.length;for(e=0;e<a;e+=1)if(-1!==this.paths[e].m&&(i=this.elem.maskManager.viewData[this.paths[e].m],r=this.paths[e].p,(t||this.filterManager._mdf||i.prop._mdf)&&r.setAttribute("d",i.lastPath),t||this.filterManager.effectElements[9].p._mdf||this.filterManager.effectElements[4].p._mdf||this.filterManager.effectElements[7].p._mdf||this.filterManager.effectElements[8].p._mdf||i.prop._mdf)){var s;if(0!==this.filterManager.effectElements[7].p.v||100!==this.filterManager.effectElements[8].p.v){var n=Math.min(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v)/100,o=Math.max(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v)/100,h=r.getTotalLength();s="0 0 0 "+h*n+" ";var l,p=h*(o-n),c=1+2*this.filterManager.effectElements[4].p.v*this.filterManager.effectElements[9].p.v/100,m=Math.floor(p/c);for(l=0;l<m;l+=1)s+="1 "+2*this.filterManager.effectElements[4].p.v*this.filterManager.effectElements[9].p.v/100+" ";s+="0 "+10*h+" 0 0"}else s="1 "+2*this.filterManager.effectElements[4].p.v*this.filterManager.effectElements[9].p.v/100;r.setAttribute("stroke-dasharray",s)}if((t||this.filterManager.effectElements[4].p._mdf)&&this.pathMasker.setAttribute("stroke-width",2*this.filterManager.effectElements[4].p.v),(t||this.filterManager.effectElements[6].p._mdf)&&this.pathMasker.setAttribute("opacity",this.filterManager.effectElements[6].p.v),(1===this.filterManager.effectElements[10].p.v||2===this.filterManager.effectElements[10].p.v)&&(t||this.filterManager.effectElements[3].p._mdf)){var f=this.filterManager.effectElements[3].p.v;this.pathMasker.setAttribute("stroke","rgb("+bm_floor(255*f[0])+","+bm_floor(255*f[1])+","+bm_floor(255*f[2])+")")}},SVGTritoneFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=this.filterManager.effectElements[0].p.v,i=this.filterManager.effectElements[1].p.v,r=this.filterManager.effectElements[2].p.v,a=r[0]+" "+i[0]+" "+e[0],s=r[1]+" "+i[1]+" "+e[1],n=r[2]+" "+i[2]+" "+e[2];this.feFuncR.setAttribute("tableValues",a),this.feFuncG.setAttribute("tableValues",s),this.feFuncB.setAttribute("tableValues",n)}},SVGProLevelsFilter.prototype.createFeFunc=function(t,e){var i=createNS(t);return i.setAttribute("type","table"),e.appendChild(i),i},SVGProLevelsFilter.prototype.getTableValue=function(t,e,i,r,a){for(var s,n,o=0,h=Math.min(t,e),l=Math.max(t,e),p=Array.call(null,{length:256}),c=0,m=a-r,f=e-t;o<=256;)s=o/256,n=s<=h?f<0?a:r:s>=l?f<0?r:a:r+m*Math.pow((s-t)/f,1/i),p[c++]=n,o+=256/255;return p.join(" ")},SVGProLevelsFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e,i=this.filterManager.effectElements;this.feFuncRComposed&&(t||i[3].p._mdf||i[4].p._mdf||i[5].p._mdf||i[6].p._mdf||i[7].p._mdf)&&(e=this.getTableValue(i[3].p.v,i[4].p.v,i[5].p.v,i[6].p.v,i[7].p.v),this.feFuncRComposed.setAttribute("tableValues",e),this.feFuncGComposed.setAttribute("tableValues",e),this.feFuncBComposed.setAttribute("tableValues",e)),this.feFuncR&&(t||i[10].p._mdf||i[11].p._mdf||i[12].p._mdf||i[13].p._mdf||i[14].p._mdf)&&(e=this.getTableValue(i[10].p.v,i[11].p.v,i[12].p.v,i[13].p.v,i[14].p.v),this.feFuncR.setAttribute("tableValues",e)),this.feFuncG&&(t||i[17].p._mdf||i[18].p._mdf||i[19].p._mdf||i[20].p._mdf||i[21].p._mdf)&&(e=this.getTableValue(i[17].p.v,i[18].p.v,i[19].p.v,i[20].p.v,i[21].p.v),this.feFuncG.setAttribute("tableValues",e)),this.feFuncB&&(t||i[24].p._mdf||i[25].p._mdf||i[26].p._mdf||i[27].p._mdf||i[28].p._mdf)&&(e=this.getTableValue(i[24].p.v,i[25].p.v,i[26].p.v,i[27].p.v,i[28].p.v),this.feFuncB.setAttribute("tableValues",e)),this.feFuncA&&(t||i[31].p._mdf||i[32].p._mdf||i[33].p._mdf||i[34].p._mdf||i[35].p._mdf)&&(e=this.getTableValue(i[31].p.v,i[32].p.v,i[33].p.v,i[34].p.v,i[35].p.v),this.feFuncA.setAttribute("tableValues",e))}},SVGDropShadowEffect.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){if((t||this.filterManager.effectElements[4].p._mdf)&&this.feGaussianBlur.setAttribute("stdDeviation",this.filterManager.effectElements[4].p.v/4),t||this.filterManager.effectElements[0].p._mdf){var e=this.filterManager.effectElements[0].p.v;this.feFlood.setAttribute("flood-color",rgbToHex(Math.round(255*e[0]),Math.round(255*e[1]),Math.round(255*e[2])))}if((t||this.filterManager.effectElements[1].p._mdf)&&this.feFlood.setAttribute("flood-opacity",this.filterManager.effectElements[1].p.v/255),t||this.filterManager.effectElements[2].p._mdf||this.filterManager.effectElements[3].p._mdf){var i=this.filterManager.effectElements[3].p.v,r=(this.filterManager.effectElements[2].p.v-90)*degToRads,a=i*Math.cos(r),s=i*Math.sin(r);this.feOffset.setAttribute("dx",a),this.feOffset.setAttribute("dy",s)}}};var _svgMatteSymbols=[];SVGMatte3Effect.prototype.findSymbol=function(t){for(var e=0,i=_svgMatteSymbols.length;e<i;){if(_svgMatteSymbols[e]===t)return _svgMatteSymbols[e];e+=1}return null},SVGMatte3Effect.prototype.replaceInParent=function(t,e){var i=t.layerElement.parentNode;if(i){for(var r=i.children,a=0,s=r.length;a<s&&r[a]!==t.layerElement;)a+=1;var n;a<=s-2&&(n=r[a+1]);var o=createNS("use");o.setAttribute("href","#"+e),n?i.insertBefore(o,n):i.appendChild(o)}},SVGMatte3Effect.prototype.setElementAsMask=function(t,e){if(!this.findSymbol(e)){var i=createElementID(),r=createNS("mask");r.setAttribute("id",e.layerId),r.setAttribute("mask-type","alpha"),_svgMatteSymbols.push(e);var a=t.globalData.defs;a.appendChild(r);var s=createNS("symbol");s.setAttribute("id",i),this.replaceInParent(e,i),s.appendChild(e.layerElement),a.appendChild(s);var n=createNS("use");n.setAttribute("href","#"+i),r.appendChild(n),e.data.hd=!1,e.show()}t.setMatte(e.layerId)},SVGMatte3Effect.prototype.initialize=function(){for(var t=this.filterManager.effectElements[0].p.v,e=this.elem.comp.elements,i=0,r=e.length;i<r;)e[i]&&e[i].data.ind===t&&this.setElementAsMask(this.elem,e[i]),i+=1;this.initialized=!0},SVGMatte3Effect.prototype.renderFrame=function(){this.initialized||this.initialize()},SVGEffects.prototype.renderFrame=function(t){var e,i=this.filters.length;for(e=0;e<i;e+=1)this.filters[e].renderFrame(t)},CVContextData.prototype.duplicate=function(){var t=2*this._length,e=this.savedOp;this.savedOp=createTypedArray("float32",t),this.savedOp.set(e);var i=0;for(i=this._length;i<t;i+=1)this.saved[i]=createTypedArray("float32",16);this._length=t},CVContextData.prototype.reset=function(){this.cArrPos=0,this.cTr.reset(),this.cO=1},CVBaseElement.prototype={createElements:function(){},initRendererElement:function(){},createContainerElements:function(){this.canvasContext=this.globalData.canvasContext,this.renderableEffectsManager=new CVEffects(this)},createContent:function(){},setBlendMode:function(){var t=this.globalData;if(t.blendMode!==this.data.bm){t.blendMode=this.data.bm;var e=getBlendMode(this.data.bm);t.canvasContext.globalCompositeOperation=e}},createRenderableComponents:function(){this.maskManager=new CVMaskElement(this.data,this)},hideElement:function(){this.hidden||this.isInRange&&!this.isTransparent||(this.hidden=!0)},showElement:function(){this.isInRange&&!this.isTransparent&&(this.hidden=!1,this._isFirstFrame=!0,this.maskManager._isFirstFrame=!0)},renderFrame:function(){if(!this.hidden&&!this.data.hd){this.renderTransform(),this.renderRenderable(),this.setBlendMode();var t=0===this.data.ty;this.globalData.renderer.save(t),this.globalData.renderer.ctxTransform(this.finalTransform.mat.props),this.globalData.renderer.ctxOpacity(this.finalTransform.mProp.o.v),this.renderInnerContent(),this.globalData.renderer.restore(t),this.maskManager.hasMasks&&this.globalData.renderer.restore(!0),this._isFirstFrame&&(this._isFirstFrame=!1)}},destroy:function(){this.canvasContext=null,this.data=null,this.globalData=null,this.maskManager.destroy()},mHelper:new Matrix},CVBaseElement.prototype.hide=CVBaseElement.prototype.hideElement,CVBaseElement.prototype.show=CVBaseElement.prototype.showElement,extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVImageElement),CVImageElement.prototype.initElement=SVGShapeElement.prototype.initElement,CVImageElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame,CVImageElement.prototype.createContent=function(){if(this.img.width&&(this.assetData.w!==this.img.width||this.assetData.h!==this.img.height)){var t=createTag("canvas");t.width=this.assetData.w,t.height=this.assetData.h;var e,i,r=t.getContext("2d"),a=this.img.width,s=this.img.height,n=a/s,o=this.assetData.w/this.assetData.h,h=this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio;n>o&&"xMidYMid slice"===h||n<o&&"xMidYMid slice"!==h?(i=s,e=i*o):(e=a,i=e/o),r.drawImage(this.img,(a-e)/2,(s-i)/2,e,i,0,0,this.assetData.w,this.assetData.h),this.img=t}},CVImageElement.prototype.renderInnerContent=function(t){this.canvasContext.drawImage(this.img,0,0)},CVImageElement.prototype.destroy=function(){this.img=null},extendPrototype([CanvasRenderer,ICompElement,CVBaseElement],CVCompElement),CVCompElement.prototype.renderInnerContent=function(){var t=this.canvasContext;t.beginPath(),t.moveTo(0,0),t.lineTo(this.data.w,0),t.lineTo(this.data.w,this.data.h),t.lineTo(0,this.data.h),t.lineTo(0,0),t.clip();var e,i=this.layers.length;for(e=i-1;e>=0;e-=1)(this.completeLayers||this.elements[e])&&this.elements[e].renderFrame()},CVCompElement.prototype.destroy=function(){var t,e=this.layers.length;for(t=e-1;t>=0;t-=1)this.elements[t]&&this.elements[t].destroy();this.layers=null,this.elements=null},CVMaskElement.prototype.renderFrame=function(){if(this.hasMasks){var t,e,i,r,a=this.element.finalTransform.mat,s=this.element.canvasContext,n=this.masksProperties.length;for(s.beginPath(),t=0;t<n;t++)if("n"!==this.masksProperties[t].mode){this.masksProperties[t].inv&&(s.moveTo(0,0),s.lineTo(this.element.globalData.compSize.w,0),s.lineTo(this.element.globalData.compSize.w,this.element.globalData.compSize.h),s.lineTo(0,this.element.globalData.compSize.h),s.lineTo(0,0)),r=this.viewData[t].v,e=a.applyToPointArray(r.v[0][0],r.v[0][1],0),s.moveTo(e[0],e[1]);var o,h=r._length;for(o=1;o<h;o++)i=a.applyToTriplePoints(r.o[o-1],r.i[o],r.v[o]),s.bezierCurveTo(i[0],i[1],i[2],i[3],i[4],i[5]);i=a.applyToTriplePoints(r.o[o-1],r.i[0],r.v[0]),s.bezierCurveTo(i[0],i[1],i[2],i[3],i[4],i[5])}this.element.globalData.renderer.save(!0),s.clip()}},CVMaskElement.prototype.getMaskProperty=MaskElement.prototype.getMaskProperty,CVMaskElement.prototype.destroy=function(){this.element=null},extendPrototype([BaseElement,TransformElement,CVBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableElement],CVShapeElement),CVShapeElement.prototype.initElement=RenderableDOMElement.prototype.initElement,CVShapeElement.prototype.transformHelper={opacity:1,_opMdf:!1},CVShapeElement.prototype.dashResetter=[],CVShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,!0,[])},CVShapeElement.prototype.createStyleElement=function(t,e){var i={data:t,type:t.ty,preTransforms:this.transformsManager.addTransformSequence(e),transforms:[],elements:[],closed:!0===t.hd},r={};if("fl"==t.ty||"st"==t.ty?(r.c=PropertyFactory.getProp(this,t.c,1,255,this),r.c.k||(i.co="rgb("+bm_floor(r.c.v[0])+","+bm_floor(r.c.v[1])+","+bm_floor(r.c.v[2])+")")):"gf"!==t.ty&&"gs"!==t.ty||(r.s=PropertyFactory.getProp(this,t.s,1,null,this),r.e=PropertyFactory.getProp(this,t.e,1,null,this),r.h=PropertyFactory.getProp(this,t.h||{k:0},0,.01,this),r.a=PropertyFactory.getProp(this,t.a||{k:0},0,degToRads,this),r.g=new GradientProperty(this,t.g,this)),r.o=PropertyFactory.getProp(this,t.o,0,.01,this),"st"==t.ty||"gs"==t.ty){if(i.lc=this.lcEnum[t.lc]||"round",i.lj=this.ljEnum[t.lj]||"round",1==t.lj&&(i.ml=t.ml),r.w=PropertyFactory.getProp(this,t.w,0,null,this),r.w.k||(i.wi=r.w.v),t.d){var a=new DashProperty(this,t.d,"canvas",this);r.d=a,r.d.k||(i.da=r.d.dashArray,i.do=r.d.dashoffset[0])}}else i.r=2===t.r?"evenodd":"nonzero";return this.stylesList.push(i),r.style=i,r},CVShapeElement.prototype.createGroupElement=function(t){return{it:[],prevViewData:[]}},CVShapeElement.prototype.createTransformElement=function(t){return{transform:{opacity:1,_opMdf:!1,key:this.transformsManager.getNewKey(),op:PropertyFactory.getProp(this,t.o,0,.01,this),mProps:TransformPropertyFactory.getTransformProperty(this,t,this)}}},CVShapeElement.prototype.createShapeElement=function(t){var e=new CVShapeData(this,t,this.stylesList,this.transformsManager);return this.shapes.push(e),this.addShapeToModifiers(e),e},CVShapeElement.prototype.reloadShapes=function(){this._isFirstFrame=!0;var t,e=this.itemsData.length;for(t=0;t<e;t+=1)this.prevViewData[t]=this.itemsData[t];for(this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,!0,[]),e=this.dynamicProperties.length,t=0;t<e;t+=1)this.dynamicProperties[t].getValue();this.renderModifiers(),this.transformsManager.processSequences(this._isFirstFrame)},CVShapeElement.prototype.addTransformToStyleList=function(t){var e,i=this.stylesList.length;for(e=0;e<i;e+=1)this.stylesList[e].closed||this.stylesList[e].transforms.push(t)},CVShapeElement.prototype.removeTransformFromStyleList=function(){var t,e=this.stylesList.length;for(t=0;t<e;t+=1)this.stylesList[t].closed||this.stylesList[t].transforms.pop()},CVShapeElement.prototype.closeStyles=function(t){var e,i=t.length;for(e=0;e<i;e+=1)t[e].closed=!0},CVShapeElement.prototype.searchShapes=function(t,e,i,r,a){var s,n,o,h,l,p,c=t.length-1,m=[],f=[],d=[].concat(a);for(s=c;s>=0;s-=1){if(h=this.searchProcessedElement(t[s]),h?e[s]=i[h-1]:t[s]._shouldRender=r,"fl"==t[s].ty||"st"==t[s].ty||"gf"==t[s].ty||"gs"==t[s].ty)h?e[s].style.closed=!1:e[s]=this.createStyleElement(t[s],d),m.push(e[s].style);else if("gr"==t[s].ty){if(h)for(o=e[s].it.length,n=0;n<o;n+=1)e[s].prevViewData[n]=e[s].it[n];else e[s]=this.createGroupElement(t[s]);this.searchShapes(t[s].it,e[s].it,e[s].prevViewData,r,d)}else"tr"==t[s].ty?(h||(p=this.createTransformElement(t[s]),e[s]=p),d.push(e[s]),this.addTransformToStyleList(e[s])):"sh"==t[s].ty||"rc"==t[s].ty||"el"==t[s].ty||"sr"==t[s].ty?h||(e[s]=this.createShapeElement(t[s])):"tm"==t[s].ty||"rd"==t[s].ty?(h?(l=e[s],l.closed=!1):(l=ShapeModifiers.getModifier(t[s].ty),l.init(this,t[s]),e[s]=l,this.shapeModifiers.push(l)),f.push(l)):"rp"==t[s].ty&&(h?(l=e[s],l.closed=!0):(l=ShapeModifiers.getModifier(t[s].ty),e[s]=l,l.init(this,t,s,e),this.shapeModifiers.push(l),r=!1),f.push(l));this.addProcessedElement(t[s],s+1)}for(this.removeTransformFromStyleList(),this.closeStyles(m),c=f.length,s=0;s<c;s+=1)f[s].closed=!0},CVShapeElement.prototype.renderInnerContent=function(){this.transformHelper.opacity=1,this.transformHelper._opMdf=!1,this.renderModifiers(),this.transformsManager.processSequences(this._isFirstFrame),this.renderShape(this.transformHelper,this.shapesData,this.itemsData,!0)},CVShapeElement.prototype.renderShapeTransform=function(t,e){(t._opMdf||e.op._mdf||this._isFirstFrame)&&(e.opacity=t.opacity,e.opacity*=e.op.v,e._opMdf=!0)},CVShapeElement.prototype.drawLayer=function(){var t,e,i,r,a,s,n,o,h,l=this.stylesList.length,p=this.globalData.renderer,c=this.globalData.canvasContext;for(t=0;t<l;t+=1)if(h=this.stylesList[t],("st"!==(o=h.type)&&"gs"!==o||0!==h.wi)&&h.data._shouldRender&&0!==h.coOp&&0!==this.globalData.currentGlobalAlpha){for(p.save(),s=h.elements,"st"===o||"gs"===o?(c.strokeStyle="st"===o?h.co:h.grd,c.lineWidth=h.wi,c.lineCap=h.lc,c.lineJoin=h.lj,c.miterLimit=h.ml||0):c.fillStyle="fl"===o?h.co:h.grd,p.ctxOpacity(h.coOp),"st"!==o&&"gs"!==o&&c.beginPath(),p.ctxTransform(h.preTransforms.finalTransform.props),i=s.length,e=0;e<i;e+=1){for("st"!==o&&"gs"!==o||(c.beginPath(),h.da&&(c.setLineDash(h.da),c.lineDashOffset=h.do)),n=s[e].trNodes,a=n.length,r=0;r<a;r+=1)"m"==n[r].t?c.moveTo(n[r].p[0],n[r].p[1]):"c"==n[r].t?c.bezierCurveTo(n[r].pts[0],n[r].pts[1],n[r].pts[2],n[r].pts[3],n[r].pts[4],n[r].pts[5]):c.closePath();"st"!==o&&"gs"!==o||(c.stroke(),h.da&&c.setLineDash(this.dashResetter))}"st"!==o&&"gs"!==o&&c.fill(h.r),p.restore()}},CVShapeElement.prototype.renderShape=function(t,e,i,r){var a,s,n=e.length-1;for(s=t,a=n;a>=0;a-=1)"tr"==e[a].ty?(s=i[a].transform,this.renderShapeTransform(t,s)):"sh"==e[a].ty||"el"==e[a].ty||"rc"==e[a].ty||"sr"==e[a].ty?this.renderPath(e[a],i[a]):"fl"==e[a].ty?this.renderFill(e[a],i[a],s):"st"==e[a].ty?this.renderStroke(e[a],i[a],s):"gf"==e[a].ty||"gs"==e[a].ty?this.renderGradientFill(e[a],i[a],s):"gr"==e[a].ty?this.renderShape(s,e[a].it,i[a].it):e[a].ty;r&&this.drawLayer()},CVShapeElement.prototype.renderStyledShape=function(t,e){if(this._isFirstFrame||e._mdf||t.transforms._mdf){var i,r,a,s=t.trNodes,n=e.paths,o=n._length;s.length=0;var h=t.transforms.finalTransform;for(a=0;a<o;a+=1){var l=n.shapes[a];if(l&&l.v){for(r=l._length,i=1;i<r;i+=1)1===i&&s.push({t:"m",p:h.applyToPointArray(l.v[0][0],l.v[0][1],0)}),s.push({t:"c",pts:h.applyToTriplePoints(l.o[i-1],l.i[i],l.v[i])});1===r&&s.push({t:"m",p:h.applyToPointArray(l.v[0][0],l.v[0][1],0)}),l.c&&r&&(s.push({t:"c",pts:h.applyToTriplePoints(l.o[i-1],l.i[0],l.v[0])}),s.push({t:"z"}))}}t.trNodes=s}},CVShapeElement.prototype.renderPath=function(t,e){if(!0!==t.hd&&t._shouldRender){var i,r=e.styledShapes.length;for(i=0;i<r;i+=1)this.renderStyledShape(e.styledShapes[i],e.sh)}},CVShapeElement.prototype.renderFill=function(t,e,i){var r=e.style;(e.c._mdf||this._isFirstFrame)&&(r.co="rgb("+bm_floor(e.c.v[0])+","+bm_floor(e.c.v[1])+","+bm_floor(e.c.v[2])+")"),(e.o._mdf||i._opMdf||this._isFirstFrame)&&(r.coOp=e.o.v*i.opacity)},CVShapeElement.prototype.renderGradientFill=function(t,e,i){var r=e.style;if(!r.grd||e.g._mdf||e.s._mdf||e.e._mdf||1!==t.t&&(e.h._mdf||e.a._mdf)){var a,s=this.globalData.canvasContext,n=e.s.v,o=e.e.v;if(1===t.t)a=s.createLinearGradient(n[0],n[1],o[0],o[1]);else var h=Math.sqrt(Math.pow(n[0]-o[0],2)+Math.pow(n[1]-o[1],2)),l=Math.atan2(o[1]-n[1],o[0]-n[0]),p=e.h.v>=1?.99:e.h.v<=-1?-.99:e.h.v,c=h*p,m=Math.cos(l+e.a.v)*c+n[0],f=Math.sin(l+e.a.v)*c+n[1],a=s.createRadialGradient(m,f,0,n[0],n[1],h);var d,u=t.g.p,y=e.g.c,g=1;for(d=0;d<u;d+=1)e.g._hasOpacity&&e.g._collapsable&&(g=e.g.o[2*d+1]),a.addColorStop(y[4*d]/100,"rgba("+y[4*d+1]+","+y[4*d+2]+","+y[4*d+3]+","+g+")");r.grd=a}r.coOp=e.o.v*i.opacity},CVShapeElement.prototype.renderStroke=function(t,e,i){var r=e.style,a=e.d;a&&(a._mdf||this._isFirstFrame)&&(r.da=a.dashArray,r.do=a.dashoffset[0]),(e.c._mdf||this._isFirstFrame)&&(r.co="rgb("+bm_floor(e.c.v[0])+","+bm_floor(e.c.v[1])+","+bm_floor(e.c.v[2])+")"),(e.o._mdf||i._opMdf||this._isFirstFrame)&&(r.coOp=e.o.v*i.opacity),(e.w._mdf||this._isFirstFrame)&&(r.wi=e.w.v)},CVShapeElement.prototype.destroy=function(){this.shapesData=null,this.globalData=null,this.canvasContext=null,this.stylesList.length=0,this.itemsData.length=0},extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVSolidElement),CVSolidElement.prototype.initElement=SVGShapeElement.prototype.initElement,CVSolidElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame,CVSolidElement.prototype.renderInnerContent=function(){var t=this.canvasContext;t.fillStyle=this.data.sc,t.fillRect(0,0,this.data.sw,this.data.sh)},extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement,ITextElement],CVTextElement),CVTextElement.prototype.tHelper=createTag("canvas").getContext("2d"),CVTextElement.prototype.buildNewText=function(){var t=this.textProperty.currentData;this.renderedLetters=createSizedArray(t.l?t.l.length:0);var e=!1;t.fc?(e=!0,this.values.fill=this.buildColor(t.fc)):this.values.fill="rgba(0,0,0,0)",this.fill=e;var i=!1;t.sc&&(i=!0,this.values.stroke=this.buildColor(t.sc),this.values.sWidth=t.sw);var r,a,s=this.globalData.fontManager.getFontByName(t.f),n=t.l,o=this.mHelper;this.stroke=i,this.values.fValue=t.finalSize+"px "+this.globalData.fontManager.getFontByName(t.f).fFamily,a=t.finalText.length;var h,l,p,c,m,f,d,u,y,g,x=this.data.singleShape,v=t.tr/1e3*t.finalSize,k=0,b=0,E=!0,P=0;for(r=0;r<a;r+=1){for(h=this.globalData.fontManager.getCharData(t.finalText[r],s.fStyle,this.globalData.fontManager.getFontByName(t.f).fFamily),l=h&&h.data||{},o.reset(),x&&n[r].n&&(k=-v,b+=t.yOffset,b+=E?1:0,E=!1),m=l.shapes?l.shapes[0].it:[],d=m.length,o.scale(t.finalSize/100,t.finalSize/100),x&&this.applyTextPropertiesToMatrix(t,o,n[r].line,k,b),y=createSizedArray(d),f=0;f<d;f+=1){for(c=m[f].ks.k.i.length,u=m[f].ks.k,g=[],p=1;p<c;p+=1)1==p&&g.push(o.applyToX(u.v[0][0],u.v[0][1],0),o.applyToY(u.v[0][0],u.v[0][1],0)),g.push(o.applyToX(u.o[p-1][0],u.o[p-1][1],0),o.applyToY(u.o[p-1][0],u.o[p-1][1],0),o.applyToX(u.i[p][0],u.i[p][1],0),o.applyToY(u.i[p][0],u.i[p][1],0),o.applyToX(u.v[p][0],u.v[p][1],0),o.applyToY(u.v[p][0],u.v[p][1],0));g.push(o.applyToX(u.o[p-1][0],u.o[p-1][1],0),o.applyToY(u.o[p-1][0],u.o[p-1][1],0),o.applyToX(u.i[0][0],u.i[0][1],0),o.applyToY(u.i[0][0],u.i[0][1],0),o.applyToX(u.v[0][0],u.v[0][1],0),o.applyToY(u.v[0][0],u.v[0][1],0)),y[f]=g}x&&(k+=n[r].l,k+=v),this.textSpans[P]?this.textSpans[P].elem=y:this.textSpans[P]={elem:y},P+=1}},CVTextElement.prototype.renderInnerContent=function(){var t=this.canvasContext;this.finalTransform.mat.props;t.font=this.values.fValue,t.lineCap="butt",t.lineJoin="miter",t.miterLimit=4,this.data.singleShape||this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag);var e,i,r,a,s,n,o=this.textAnimator.renderedLetters,h=this.textProperty.currentData.l;i=h.length;var l,p,c,m=null,f=null,d=null;for(e=0;e<i;e+=1)if(!h[e].n){if(l=o[e],l&&(this.globalData.renderer.save(),this.globalData.renderer.ctxTransform(l.p),this.globalData.renderer.ctxOpacity(l.o)),this.fill){for(l&&l.fc?m!==l.fc&&(m=l.fc,t.fillStyle=l.fc):m!==this.values.fill&&(m=this.values.fill,t.fillStyle=this.values.fill),p=this.textSpans[e].elem,a=p.length,this.globalData.canvasContext.beginPath(),r=0;r<a;r+=1)for(c=p[r],n=c.length,this.globalData.canvasContext.moveTo(c[0],c[1]),s=2;s<n;s+=6)this.globalData.canvasContext.bezierCurveTo(c[s],c[s+1],c[s+2],c[s+3],c[s+4],c[s+5]);this.globalData.canvasContext.closePath(),this.globalData.canvasContext.fill()}if(this.stroke){for(l&&l.sw?d!==l.sw&&(d=l.sw,t.lineWidth=l.sw):d!==this.values.sWidth&&(d=this.values.sWidth,t.lineWidth=this.values.sWidth),l&&l.sc?f!==l.sc&&(f=l.sc,t.strokeStyle=l.sc):f!==this.values.stroke&&(f=this.values.stroke,t.strokeStyle=this.values.stroke),p=this.textSpans[e].elem,a=p.length,this.globalData.canvasContext.beginPath(),r=0;r<a;r+=1)for(c=p[r],n=c.length,this.globalData.canvasContext.moveTo(c[0],c[1]),s=2;s<n;s+=6)this.globalData.canvasContext.bezierCurveTo(c[s],c[s+1],c[s+2],c[s+3],c[s+4],c[s+5]);this.globalData.canvasContext.closePath(),this.globalData.canvasContext.stroke()}l&&this.globalData.renderer.restore()}},CVEffects.prototype.renderFrame=function(){},HBaseElement.prototype={checkBlendMode:function(){},initRendererElement:function(){this.baseElement=createTag(this.data.tg||"div"),this.data.hasMask?(this.svgElement=createNS("svg"),this.layerElement=createNS("g"),this.maskedElement=this.layerElement,this.svgElement.appendChild(this.layerElement),this.baseElement.appendChild(this.svgElement)):this.layerElement=this.baseElement,styleDiv(this.baseElement)},createContainerElements:function(){this.renderableEffectsManager=new CVEffects(this),this.transformedElement=this.baseElement,this.maskedElement=this.layerElement,this.data.ln&&this.layerElement.setAttribute("id",this.data.ln),this.data.cl&&this.layerElement.setAttribute("class",this.data.cl),0!==this.data.bm&&this.setBlendMode()},renderElement:function(){this.finalTransform._matMdf&&(this.transformedElement.style.transform=this.transformedElement.style.webkitTransform=this.finalTransform.mat.toCSS()),this.finalTransform._opMdf&&(this.transformedElement.style.opacity=this.finalTransform.mProp.o.v)},renderFrame:function(){this.data.hd||this.hidden||(this.renderTransform(),this.renderRenderable(),this.renderElement(),this.renderInnerContent(),this._isFirstFrame&&(this._isFirstFrame=!1))},destroy:function(){this.layerElement=null,this.transformedElement=null,this.matteElement&&(this.matteElement=null),this.maskManager&&(this.maskManager.destroy(),this.maskManager=null)},createRenderableComponents:function(){this.maskManager=new MaskElement(this.data,this,this.globalData)},addEffects:function(){},setMatte:function(){}},HBaseElement.prototype.getBaseElement=SVGBaseElement.prototype.getBaseElement,HBaseElement.prototype.destroyBaseElement=HBaseElement.prototype.destroy,HBaseElement.prototype.buildElementParenting=HybridRenderer.prototype.buildElementParenting,extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],HSolidElement),HSolidElement.prototype.createContent=function(){var t;this.data.hasMask?(t=createNS("rect"),t.setAttribute("width",this.data.sw),t.setAttribute("height",this.data.sh),t.setAttribute("fill",this.data.sc),this.svgElement.setAttribute("width",this.data.sw),this.svgElement.setAttribute("height",this.data.sh)):(t=createTag("div"),t.style.width=this.data.sw+"px",t.style.height=this.data.sh+"px",t.style.backgroundColor=this.data.sc),this.layerElement.appendChild(t)},extendPrototype([HybridRenderer,ICompElement,HBaseElement],HCompElement),HCompElement.prototype._createBaseContainerElements=HCompElement.prototype.createContainerElements,HCompElement.prototype.createContainerElements=function(){this._createBaseContainerElements(),this.data.hasMask?(this.svgElement.setAttribute("width",this.data.w),this.svgElement.setAttribute("height",this.data.h),this.transformedElement=this.baseElement):this.transformedElement=this.layerElement},HCompElement.prototype.addTo3dContainer=function(t,e){for(var i,r=0;r<e;)this.elements[r]&&this.elements[r].getBaseElement&&(i=this.elements[r].getBaseElement()),r+=1;i?this.layerElement.insertBefore(t,i):this.layerElement.appendChild(t)},extendPrototype([BaseElement,TransformElement,HSolidElement,SVGShapeElement,HBaseElement,HierarchyElement,FrameElement,RenderableElement],HShapeElement),HShapeElement.prototype._renderShapeFrame=HShapeElement.prototype.renderInnerContent,HShapeElement.prototype.createContent=function(){var t;if(this.baseElement.style.fontSize=0,this.data.hasMask)this.layerElement.appendChild(this.shapesContainer),t=this.svgElement;else{t=createNS("svg");var e=this.comp.data?this.comp.data:this.globalData.compSize;t.setAttribute("width",e.w),t.setAttribute("height",e.h),t.appendChild(this.shapesContainer),this.layerElement.appendChild(t)}this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.shapesContainer,0,[],!0),this.filterUniqueShapes(),this.shapeCont=t},HShapeElement.prototype.getTransformedPoint=function(t,e){var i,r=t.length;for(i=0;i<r;i+=1)e=t[i].mProps.v.applyToPointArray(e[0],e[1],0);return e},HShapeElement.prototype.calculateShapeBoundingBox=function(t,e){var i,r,a,s,n,o=t.sh.v,h=t.transformers,l=o._length;if(!(l<=1)){for(i=0;i<l-1;i+=1)r=this.getTransformedPoint(h,o.v[i]),a=this.getTransformedPoint(h,o.o[i]),s=this.getTransformedPoint(h,o.i[i+1]),n=this.getTransformedPoint(h,o.v[i+1]),this.checkBounds(r,a,s,n,e);o.c&&(r=this.getTransformedPoint(h,o.v[i]),a=this.getTransformedPoint(h,o.o[i]),s=this.getTransformedPoint(h,o.i[0]),n=this.getTransformedPoint(h,o.v[0]),this.checkBounds(r,a,s,n,e))}},HShapeElement.prototype.checkBounds=function(t,e,i,r,a){this.getBoundsOfCurve(t,e,i,r);var s=this.shapeBoundingBox;a.x=bm_min(s.left,a.x),a.xMax=bm_max(s.right,a.xMax),a.y=bm_min(s.top,a.y),a.yMax=bm_max(s.bottom,a.yMax)},HShapeElement.prototype.shapeBoundingBox={left:0,right:0,top:0,bottom:0},HShapeElement.prototype.tempBoundingBox={x:0,xMax:0,y:0,yMax:0,width:0,height:0},HShapeElement.prototype.getBoundsOfCurve=function(t,e,i,r){for(var a,s,n,o,h,l,p,c=[[t[0],r[0]],[t[1],r[1]]],m=0;m<2;++m)if(s=6*t[m]-12*e[m]+6*i[m],a=-3*t[m]+9*e[m]-9*i[m]+3*r[m],n=3*e[m]-3*t[m],s|=0,a|=0,n|=0,0!==a)(h=s*s-4*n*a)<0||(l=(-s+bm_sqrt(h))/(2*a),0<l&&l<1&&c[m].push(this.calculateF(l,t,e,i,r,m)),0<(p=(-s-bm_sqrt(h))/(2*a))&&p<1&&c[m].push(this.calculateF(p,t,e,i,r,m)));else{if(0===s)continue;0<(o=-n/s)&&o<1&&c[m].push(this.calculateF(o,t,e,i,r,m))}this.shapeBoundingBox.left=bm_min.apply(null,c[0]),this.shapeBoundingBox.top=bm_min.apply(null,c[1]),this.shapeBoundingBox.right=bm_max.apply(null,c[0]),this.shapeBoundingBox.bottom=bm_max.apply(null,c[1])},HShapeElement.prototype.calculateF=function(t,e,i,r,a,s){return bm_pow(1-t,3)*e[s]+3*bm_pow(1-t,2)*t*i[s]+3*(1-t)*bm_pow(t,2)*r[s]+bm_pow(t,3)*a[s]},HShapeElement.prototype.calculateBoundingBox=function(t,e){var i,r=t.length;for(i=0;i<r;i+=1)t[i]&&t[i].sh?this.calculateShapeBoundingBox(t[i],e):t[i]&&t[i].it&&this.calculateBoundingBox(t[i].it,e)},HShapeElement.prototype.currentBoxContains=function(t){return this.currentBBox.x<=t.x&&this.currentBBox.y<=t.y&&this.currentBBox.width+this.currentBBox.x>=t.x+t.width&&this.currentBBox.height+this.currentBBox.y>=t.y+t.height},HShapeElement.prototype.renderInnerContent=function(){if(this._renderShapeFrame(),!this.hidden&&(this._isFirstFrame||this._mdf)){var t=this.tempBoundingBox,e=999999;if(t.x=e,t.xMax=-e,t.y=e,t.yMax=-e,this.calculateBoundingBox(this.itemsData,t),t.width=t.xMax<t.x?0:t.xMax-t.x,t.height=t.yMax<t.y?0:t.yMax-t.y,this.currentBoxContains(t))return;var i=!1;this.currentBBox.w!==t.width&&(this.currentBBox.w=t.width,this.shapeCont.setAttribute("width",t.width),i=!0),this.currentBBox.h!==t.height&&(this.currentBBox.h=t.height,this.shapeCont.setAttribute("height",t.height),i=!0),(i||this.currentBBox.x!==t.x||this.currentBBox.y!==t.y)&&(this.currentBBox.w=t.width,this.currentBBox.h=t.height,this.currentBBox.x=t.x,this.currentBBox.y=t.y,this.shapeCont.setAttribute("viewBox",this.currentBBox.x+" "+this.currentBBox.y+" "+this.currentBBox.w+" "+this.currentBBox.h),this.shapeCont.style.transform=this.shapeCont.style.webkitTransform="translate("+this.currentBBox.x+"px,"+this.currentBBox.y+"px)")}},extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],HTextElement),HTextElement.prototype.createContent=function(){if(this.isMasked=this.checkMasks(),this.isMasked){this.renderType="svg",this.compW=this.comp.data.w,this.compH=this.comp.data.h,this.svgElement.setAttribute("width",this.compW),this.svgElement.setAttribute("height",this.compH);var t=createNS("g");this.maskedElement.appendChild(t),this.innerElem=t}else this.renderType="html",this.innerElem=this.layerElement;this.checkParenting()},HTextElement.prototype.buildNewText=function(){var t=this.textProperty.currentData;this.renderedLetters=createSizedArray(t.l?t.l.length:0);var e=this.innerElem.style;e.color=e.fill=t.fc?this.buildColor(t.fc):"rgba(0,0,0,0)",t.sc&&(e.stroke=this.buildColor(t.sc),e.strokeWidth=t.sw+"px");var i=this.globalData.fontManager.getFontByName(t.f);if(!this.globalData.fontManager.chars)if(e.fontSize=t.finalSize+"px",e.lineHeight=t.finalSize+"px",i.fClass)this.innerElem.className=i.fClass;else{e.fontFamily=i.fFamily;var r=t.fWeight,a=t.fStyle;e.fontStyle=a,e.fontWeight=r}var s,n,o=t.l;n=o.length;var h,l,p,c,m=this.mHelper,f="",d=0;for(s=0;s<n;s+=1){if(this.globalData.fontManager.chars?(this.textPaths[d]?h=this.textPaths[d]:(h=createNS("path"),h.setAttribute("stroke-linecap","butt"),h.setAttribute("stroke-linejoin","round"),h.setAttribute("stroke-miterlimit","4")),this.isMasked||(this.textSpans[d]?(l=this.textSpans[d],p=l.children[0]):(l=createTag("div"),l.style.lineHeight=0,p=createNS("svg"),p.appendChild(h),styleDiv(l)))):this.isMasked?h=this.textPaths[d]?this.textPaths[d]:createNS("text"):this.textSpans[d]?(l=this.textSpans[d],h=this.textPaths[d]):(l=createTag("span"),styleDiv(l),h=createTag("span"),styleDiv(h),l.appendChild(h)),this.globalData.fontManager.chars){var u,y=this.globalData.fontManager.getCharData(t.finalText[s],i.fStyle,this.globalData.fontManager.getFontByName(t.f).fFamily);if(u=y?y.data:null,m.reset(),u&&u.shapes&&(c=u.shapes[0].it,m.scale(t.finalSize/100,t.finalSize/100),f=this.createPathShape(m,c),h.setAttribute("d",f)),this.isMasked)this.innerElem.appendChild(h);else{if(this.innerElem.appendChild(l),u&&u.shapes){document.body.appendChild(p);var g=p.getBBox();p.setAttribute("width",g.width+2),p.setAttribute("height",g.height+2),p.setAttribute("viewBox",g.x-1+" "+(g.y-1)+" "+(g.width+2)+" "+(g.height+2)),p.style.transform=p.style.webkitTransform="translate("+(g.x-1)+"px,"+(g.y-1)+"px)",o[s].yOffset=g.y-1}else p.setAttribute("width",1),p.setAttribute("height",1);l.appendChild(p)}}else h.textContent=o[s].val,h.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),this.isMasked?this.innerElem.appendChild(h):(this.innerElem.appendChild(l),h.style.transform=h.style.webkitTransform="translate3d(0,"+-t.finalSize/1.2+"px,0)");this.isMasked?this.textSpans[d]=h:this.textSpans[d]=l,this.textSpans[d].style.display="block",this.textPaths[d]=h,d+=1}for(;d<this.textSpans.length;)this.textSpans[d].style.display="none",d+=1},HTextElement.prototype.renderInnerContent=function(){if(this.data.singleShape){if(!this._isFirstFrame&&!this.lettersChangedFlag)return;this.isMasked&&this.finalTransform._matMdf&&(this.svgElement.setAttribute("viewBox",-this.finalTransform.mProp.p.v[0]+" "+-this.finalTransform.mProp.p.v[1]+" "+this.compW+" "+this.compH),this.svgElement.style.transform=this.svgElement.style.webkitTransform="translate("+-this.finalTransform.mProp.p.v[0]+"px,"+-this.finalTransform.mProp.p.v[1]+"px)")}if(this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag),this.lettersChangedFlag||this.textAnimator.lettersChangedFlag){var t,e,i=0,r=this.textAnimator.renderedLetters,a=this.textProperty.currentData.l;e=a.length;var s,n,o;for(t=0;t<e;t+=1)a[t].n?i+=1:(n=this.textSpans[t],o=this.textPaths[t],s=r[i],i+=1,s._mdf.m&&(this.isMasked?n.setAttribute("transform",s.m):n.style.transform=n.style.webkitTransform=s.m),n.style.opacity=s.o,s.sw&&s._mdf.sw&&o.setAttribute("stroke-width",s.sw),s.sc&&s._mdf.sc&&o.setAttribute("stroke",s.sc),s.fc&&s._mdf.fc&&(o.setAttribute("fill",s.fc),o.style.color=s.fc));if(this.innerElem.getBBox&&!this.hidden&&(this._isFirstFrame||this._mdf)){var h=this.innerElem.getBBox();this.currentBBox.w!==h.width&&(this.currentBBox.w=h.width,this.svgElement.setAttribute("width",h.width)),this.currentBBox.h!==h.height&&(this.currentBBox.h=h.height,this.svgElement.setAttribute("height",h.height));this.currentBBox.w===h.width+2&&this.currentBBox.h===h.height+2&&this.currentBBox.x===h.x-1&&this.currentBBox.y===h.y-1||(this.currentBBox.w=h.width+2,this.currentBBox.h=h.height+2,this.currentBBox.x=h.x-1,this.currentBBox.y=h.y-1,this.svgElement.setAttribute("viewBox",this.currentBBox.x+" "+this.currentBBox.y+" "+this.currentBBox.w+" "+this.currentBBox.h),this.svgElement.style.transform=this.svgElement.style.webkitTransform="translate("+this.currentBBox.x+"px,"+this.currentBBox.y+"px)")}}},extendPrototype([BaseElement,TransformElement,HBaseElement,HSolidElement,HierarchyElement,FrameElement,RenderableElement],HImageElement),HImageElement.prototype.createContent=function(){var t=this.globalData.getAssetsPath(this.assetData),e=new Image;this.data.hasMask?(this.imageElem=createNS("image"),this.imageElem.setAttribute("width",this.assetData.w+"px"),this.imageElem.setAttribute("height",this.assetData.h+"px"),this.imageElem.setAttributeNS("http://www.w3.org/1999/xlink","href",t),this.layerElement.appendChild(this.imageElem),this.baseElement.setAttribute("width",this.assetData.w),this.baseElement.setAttribute("height",this.assetData.h)):this.layerElement.appendChild(e),e.src=t,this.data.ln&&this.baseElement.setAttribute("id",this.data.ln)},extendPrototype([BaseElement,FrameElement,HierarchyElement],HCameraElement),HCameraElement.prototype.setup=function(){var t,e,i=this.comp.threeDElements.length;for(t=0;t<i;t+=1)e=this.comp.threeDElements[t],"3d"===e.type&&(e.perspectiveElem.style.perspective=e.perspectiveElem.style.webkitPerspective=this.pe.v+"px",e.container.style.transformOrigin=e.container.style.mozTransformOrigin=e.container.style.webkitTransformOrigin="0px 0px 0px",e.perspectiveElem.style.transform=e.perspectiveElem.style.webkitTransform="matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)")},HCameraElement.prototype.createElements=function(){},HCameraElement.prototype.hide=function(){},HCameraElement.prototype.renderFrame=function(){var t,e,i=this._isFirstFrame;if(this.hierarchy)for(e=this.hierarchy.length,t=0;t<e;t+=1)i=this.hierarchy[t].finalTransform.mProp._mdf||i;if(i||this.pe._mdf||this.p&&this.p._mdf||this.px&&(this.px._mdf||this.py._mdf||this.pz._mdf)||this.rx._mdf||this.ry._mdf||this.rz._mdf||this.or._mdf||this.a&&this.a._mdf){if(this.mat.reset(),this.hierarchy){for(e=this.hierarchy.length-1,t=e;t>=0;t-=1){var r=this.hierarchy[t].finalTransform.mProp;this.mat.translate(-r.p.v[0],-r.p.v[1],r.p.v[2]),this.mat.rotateX(-r.or.v[0]).rotateY(-r.or.v[1]).rotateZ(r.or.v[2]),this.mat.rotateX(-r.rx.v).rotateY(-r.ry.v).rotateZ(r.rz.v),this.mat.scale(1/r.s.v[0],1/r.s.v[1],1/r.s.v[2]),this.mat.translate(r.a.v[0],r.a.v[1],r.a.v[2])}}if(this.p?this.mat.translate(-this.p.v[0],-this.p.v[1],this.p.v[2]):this.mat.translate(-this.px.v,-this.py.v,this.pz.v),this.a){var a;a=this.p?[this.p.v[0]-this.a.v[0],this.p.v[1]-this.a.v[1],this.p.v[2]-this.a.v[2]]:[this.px.v-this.a.v[0],this.py.v-this.a.v[1],this.pz.v-this.a.v[2]];var s=Math.sqrt(Math.pow(a[0],2)+Math.pow(a[1],2)+Math.pow(a[2],2)),n=[a[0]/s,a[1]/s,a[2]/s],o=Math.sqrt(n[2]*n[2]+n[0]*n[0]),h=Math.atan2(n[1],o),l=Math.atan2(n[0],-n[2]);this.mat.rotateY(l).rotateX(-h)}this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v),this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]),this.mat.translate(this.globalData.compSize.w/2,this.globalData.compSize.h/2,0),this.mat.translate(0,0,this.pe.v);var p=!this._prevMat.equals(this.mat);if((p||this.pe._mdf)&&this.comp.threeDElements){e=this.comp.threeDElements.length;var c;for(t=0;t<e;t+=1)c=this.comp.threeDElements[t],"3d"===c.type&&(p&&(c.container.style.transform=c.container.style.webkitTransform=this.mat.toCSS()),this.pe._mdf&&(c.perspectiveElem.style.perspective=c.perspectiveElem.style.webkitPerspective=this.pe.v+"px"));this.mat.clone(this._prevMat)}}this._isFirstFrame=!1},HCameraElement.prototype.prepareFrame=function(t){this.prepareProperties(t,!0)},HCameraElement.prototype.destroy=function(){},HCameraElement.prototype.getBaseElement=function(){return null},HEffects.prototype.renderFrame=function(){};var animationManager=function(){function t(t){for(var e=0,i=t.target;e<_;)P[e].animation===i&&(P.splice(e,1),e-=1,_-=1,i.isPaused||a()),e+=1}function e(t,e){if(!t)return null;for(var i=0;i<_;){if(P[i].elem==t&&null!==P[i].elem)return P[i].animation;i+=1}var r=new AnimationItem;return s(r,t),r.setData(t,e),r}function i(){var t,e=P.length,i=[];for(t=0;t<e;t+=1)i.push(P[t].animation);return i}function r(){S+=1,v()}function a(){S-=1}function s(e,i){e.addEventListener("destroy",t),e.addEventListener("_active",r),e.addEventListener("_idle",a),P.push({elem:i,animation:e}),_+=1}function n(t){var e=new AnimationItem;return s(e,null),e.setParams(t),e}function o(t,e){var i;for(i=0;i<_;i+=1)P[i].animation.setSpeed(t,e)}function h(t,e){var i;for(i=0;i<_;i+=1)P[i].animation.setDirection(t,e)}function l(t){var e;for(e=0;e<_;e+=1)P[e].animation.play(t)}function p(t){var e,i=t-A;for(e=0;e<_;e+=1)P[e].animation.advanceTime(i);A=t,S&&!T?window.requestAnimationFrame(p):D=!0}function c(t){A=t,window.requestAnimationFrame(p)}function m(t){var e;for(e=0;e<_;e+=1)P[e].animation.pause(t)}function f(t,e,i){var r;for(r=0;r<_;r+=1)P[r].animation.goToAndStop(t,e,i)}function d(t){var e;for(e=0;e<_;e+=1)P[e].animation.stop(t)}function u(t){var e;for(e=0;e<_;e+=1)P[e].animation.togglePause(t)}function y(t){var e;for(e=_-1;e>=0;e-=1)P[e].animation.destroy(t)}function g(t,i,r){var a,s=[].concat([].slice.call(document.getElementsByClassName("lottie")),[].slice.call(document.getElementsByClassName("bodymovin"))),n=s.length;for(a=0;a<n;a+=1)r&&s[a].setAttribute("data-bm-type",r),e(s[a],t);if(i&&0===n){r||(r="svg");var o=document.getElementsByTagName("body")[0];o.innerHTML="";var h=createTag("div");h.style.width="100%",h.style.height="100%",h.setAttribute("data-bm-type",r),o.appendChild(h),e(h,t)}}function x(){var t;for(t=0;t<_;t+=1)P[t].animation.resize()}function v(){!T&&S&&D&&(window.requestAnimationFrame(c),D=!1)}function k(){T=!0}function b(){T=!1,v()}var E={},P=[],A=0,_=0,S=0,D=!0,T=!1;return E.registerAnimation=e,E.loadAnimation=n,E.setSpeed=o,E.setDirection=h,E.play=l,E.pause=m,E.stop=d,E.togglePause=u,E.searchAnimations=g,E.resize=x,E.goToAndStop=f,E.destroy=y,E.freeze=k,E.unfreeze=b,E.getRegisteredAnimations=i,E}(),AnimationItem=function(){this._cbs=[],this.name="",this.path="",this.isLoaded=!1,this.currentFrame=0,this.currentRawFrame=0,this.totalFrames=0,this.frameRate=0,this.frameMult=0,this.playSpeed=1,this.playDirection=1,this.playCount=0,this.animationData={},this.assets=[],this.isPaused=!0,this.autoplay=!1,this.loop=!0,this.renderer=null,this.animationID=createElementID(),this.assetsPath="",this.timeCompleted=0,this.segmentPos=0,this.subframeEnabled=subframeEnabled,this.segments=[],this._idle=!0,this._completedLoop=!1,this.projectInterface=ProjectInterface(),this.imagePreloader=new ImagePreloader};extendPrototype([BaseEvent],AnimationItem),AnimationItem.prototype.setParams=function(t){t.context&&(this.context=t.context),(t.wrapper||t.container)&&(this.wrapper=t.wrapper||t.container);var e=t.animType?t.animType:t.renderer?t.renderer:"svg";switch(e){case"canvas":this.renderer=new CanvasRenderer(this,t.rendererSettings);break;case"svg":this.renderer=new SVGRenderer(this,t.rendererSettings);break;default:this.renderer=new HybridRenderer(this,t.rendererSettings)}this.renderer.setProjectInterface(this.projectInterface),this.animType=e,""===t.loop||null===t.loop||(!1===t.loop?this.loop=!1:!0===t.loop?this.loop=!0:this.loop=parseInt(t.loop)),this.autoplay=!("autoplay"in t)||t.autoplay,this.name=t.name?t.name:"",this.autoloadSegments=!t.hasOwnProperty("autoloadSegments")||t.autoloadSegments,this.assetsPath=t.assetsPath,t.animationData?this.configAnimation(t.animationData):t.path&&(-1!==t.path.lastIndexOf("\\")?this.path=t.path.substr(0,t.path.lastIndexOf("\\")+1):this.path=t.path.substr(0,t.path.lastIndexOf("/")+1),this.fileName=t.path.substr(t.path.lastIndexOf("/")+1),this.fileName=this.fileName.substr(0,this.fileName.lastIndexOf(".json")),assetLoader.load(t.path,this.configAnimation.bind(this),function(){this.trigger("data_failed")}.bind(this)))},AnimationItem.prototype.setData=function(t,e){var i={wrapper:t,animationData:e?"object"==typeof e?e:JSON.parse(e):null},r=t.attributes;i.path=r.getNamedItem("data-animation-path")?r.getNamedItem("data-animation-path").value:r.getNamedItem("data-bm-path")?r.getNamedItem("data-bm-path").value:r.getNamedItem("bm-path")?r.getNamedItem("bm-path").value:"",i.animType=r.getNamedItem("data-anim-type")?r.getNamedItem("data-anim-type").value:r.getNamedItem("data-bm-type")?r.getNamedItem("data-bm-type").value:r.getNamedItem("bm-type")?r.getNamedItem("bm-type").value:r.getNamedItem("data-bm-renderer")?r.getNamedItem("data-bm-renderer").value:r.getNamedItem("bm-renderer")?r.getNamedItem("bm-renderer").value:"canvas";var a=r.getNamedItem("data-anim-loop")?r.getNamedItem("data-anim-loop").value:r.getNamedItem("data-bm-loop")?r.getNamedItem("data-bm-loop").value:r.getNamedItem("bm-loop")?r.getNamedItem("bm-loop").value:"";""===a||(i.loop="false"!==a&&("true"===a||parseInt(a)));var s=r.getNamedItem("data-anim-autoplay")?r.getNamedItem("data-anim-autoplay").value:r.getNamedItem("data-bm-autoplay")?r.getNamedItem("data-bm-autoplay").value:!r.getNamedItem("bm-autoplay")||r.getNamedItem("bm-autoplay").value;i.autoplay="false"!==s,i.name=r.getNamedItem("data-name")?r.getNamedItem("data-name").value:r.getNamedItem("data-bm-name")?r.getNamedItem("data-bm-name").value:r.getNamedItem("bm-name")?r.getNamedItem("bm-name").value:"","false"===(r.getNamedItem("data-anim-prerender")?r.getNamedItem("data-anim-prerender").value:r.getNamedItem("data-bm-prerender")?r.getNamedItem("data-bm-prerender").value:r.getNamedItem("bm-prerender")?r.getNamedItem("bm-prerender").value:"")&&(i.prerender=!1),this.setParams(i)},AnimationItem.prototype.includeLayers=function(t){t.op>this.animationData.op&&(this.animationData.op=t.op,this.totalFrames=Math.floor(t.op-this.animationData.ip));var e,i,r=this.animationData.layers,a=r.length,s=t.layers,n=s.length;for(i=0;i<n;i+=1)for(e=0;e<a;){if(r[e].id==s[i].id){r[e]=s[i];break}e+=1}if((t.chars||t.fonts)&&(this.renderer.globalData.fontManager.addChars(t.chars),this.renderer.globalData.fontManager.addFonts(t.fonts,this.renderer.globalData.defs)),t.assets)for(a=t.assets.length,e=0;e<a;e+=1)this.animationData.assets.push(t.assets[e]);this.animationData.__complete=!1,dataManager.completeData(this.animationData,this.renderer.globalData.fontManager),this.renderer.includeLayers(t.layers),expressionsPlugin&&expressionsPlugin.initExpressions(this),this.loadNextSegment()},AnimationItem.prototype.loadNextSegment=function(){var t=this.animationData.segments;if(!t||0===t.length||!this.autoloadSegments)return this.trigger("data_ready"),void(this.timeCompleted=this.totalFrames);var e=t.shift();this.timeCompleted=e.time*this.frameRate;var i=this.path+this.fileName+"_"+this.segmentPos+".json";this.segmentPos+=1,assetLoader.load(i,this.includeLayers.bind(this),function(){this.trigger("data_failed")}.bind(this))},AnimationItem.prototype.loadSegments=function(){this.animationData.segments||(this.timeCompleted=this.totalFrames),this.loadNextSegment()},AnimationItem.prototype.imagesLoaded=function(){this.trigger("loaded_images"),this.checkLoaded()},AnimationItem.prototype.preloadImages=function(){this.imagePreloader.setAssetsPath(this.assetsPath),this.imagePreloader.setPath(this.path),this.imagePreloader.loadAssets(this.animationData.assets,this.imagesLoaded.bind(this))},AnimationItem.prototype.configAnimation=function(t){if(this.renderer)try{this.animationData=t,this.totalFrames=Math.floor(this.animationData.op-this.animationData.ip),this.renderer.configAnimation(t),t.assets||(t.assets=[]),this.assets=this.animationData.assets,this.frameRate=this.animationData.fr,this.firstFrame=Math.round(this.animationData.ip),this.frameMult=this.animationData.fr/1e3,this.renderer.searchExtraCompositions(t.assets),this.trigger("config_ready"),this.preloadImages(),this.loadSegments(),this.updaFrameModifier(),this.waitForFontsLoaded()}catch(t){this.triggerConfigError(t)}},AnimationItem.prototype.waitForFontsLoaded=function(){this.renderer&&(this.renderer.globalData.fontManager.loaded()?this.checkLoaded():setTimeout(this.waitForFontsLoaded.bind(this),20))},AnimationItem.prototype.checkLoaded=function(){this.isLoaded||!this.renderer.globalData.fontManager.loaded()||!this.imagePreloader.loaded()&&"canvas"===this.renderer.rendererType||(this.isLoaded=!0,dataManager.completeData(this.animationData,this.renderer.globalData.fontManager),expressionsPlugin&&expressionsPlugin.initExpressions(this),this.renderer.initItems(),setTimeout(function(){this.trigger("DOMLoaded")}.bind(this),0),this.gotoFrame(),this.autoplay&&this.play())},AnimationItem.prototype.resize=function(){this.renderer.updateContainerSize()},AnimationItem.prototype.setSubframe=function(t){this.subframeEnabled=!!t},AnimationItem.prototype.gotoFrame=function(){this.currentFrame=this.subframeEnabled?this.currentRawFrame:~~this.currentRawFrame,this.timeCompleted!==this.totalFrames&&this.currentFrame>this.timeCompleted&&(this.currentFrame=this.timeCompleted),this.trigger("enterFrame"),this.renderFrame()},AnimationItem.prototype.renderFrame=function(){if(!1!==this.isLoaded)try{this.renderer.renderFrame(this.currentFrame+this.firstFrame)}catch(t){this.triggerRenderFrameError(t)}},AnimationItem.prototype.play=function(t){t&&this.name!=t||!0===this.isPaused&&(this.isPaused=!1,this._idle&&(this._idle=!1,this.trigger("_active")))},AnimationItem.prototype.pause=function(t){t&&this.name!=t||!1===this.isPaused&&(this.isPaused=!0,this._idle=!0,this.trigger("_idle"))},AnimationItem.prototype.togglePause=function(t){t&&this.name!=t||(!0===this.isPaused?this.play():this.pause())},AnimationItem.prototype.stop=function(t){t&&this.name!=t||(this.pause(),this.playCount=0,this._completedLoop=!1,this.setCurrentRawFrameValue(0))},AnimationItem.prototype.goToAndStop=function(t,e,i){i&&this.name!=i||(e?this.setCurrentRawFrameValue(t):this.setCurrentRawFrameValue(t*this.frameModifier),this.pause())},AnimationItem.prototype.goToAndPlay=function(t,e,i){this.goToAndStop(t,e,i),this.play()},AnimationItem.prototype.advanceTime=function(t){if(!0!==this.isPaused&&!1!==this.isLoaded){var e=this.currentRawFrame+t*this.frameModifier,i=!1;e>=this.totalFrames-1&&this.frameModifier>0?this.loop&&this.playCount!==this.loop?e>=this.totalFrames?(this.playCount+=1,this.checkSegments(e%this.totalFrames)||(this.setCurrentRawFrameValue(e%this.totalFrames),this._completedLoop=!0,this.trigger("loopComplete"))):this.setCurrentRawFrameValue(e):this.checkSegments(e>this.totalFrames?e%this.totalFrames:0)||(i=!0,e=this.totalFrames-1):e<0?this.checkSegments(e%this.totalFrames)||(!this.loop||this.playCount--<=0&&!0!==this.loop?(i=!0,e=0):(this.setCurrentRawFrameValue(this.totalFrames+e%this.totalFrames),this._completedLoop?this.trigger("loopComplete"):this._completedLoop=!0)):this.setCurrentRawFrameValue(e),i&&(this.setCurrentRawFrameValue(e),this.pause(),this.trigger("complete"))}},AnimationItem.prototype.adjustSegment=function(t,e){this.playCount=0,t[1]<t[0]?(this.frameModifier>0&&(this.playSpeed<0?this.setSpeed(-this.playSpeed):this.setDirection(-1)),this.timeCompleted=this.totalFrames=t[0]-t[1],this.firstFrame=t[1],this.setCurrentRawFrameValue(this.totalFrames-.001-e)):t[1]>t[0]&&(this.frameModifier<0&&(this.playSpeed<0?this.setSpeed(-this.playSpeed):this.setDirection(1)),this.timeCompleted=this.totalFrames=t[1]-t[0],this.firstFrame=t[0],this.setCurrentRawFrameValue(.001+e)),this.trigger("segmentStart")},AnimationItem.prototype.setSegment=function(t,e){var i=-1;this.isPaused&&(this.currentRawFrame+this.firstFrame<t?i=t:this.currentRawFrame+this.firstFrame>e&&(i=e-t)),this.firstFrame=t,this.timeCompleted=this.totalFrames=e-t,-1!==i&&this.goToAndStop(i,!0)},AnimationItem.prototype.playSegments=function(t,e){if(e&&(this.segments.length=0),"object"==typeof t[0]){var i,r=t.length;for(i=0;i<r;i+=1)this.segments.push(t[i])}else this.segments.push(t);this.segments.length&&e&&this.adjustSegment(this.segments.shift(),0),this.isPaused&&this.play()},AnimationItem.prototype.resetSegments=function(t){this.segments.length=0,this.segments.push([this.animationData.ip,this.animationData.op]),t&&this.checkSegments(0)},AnimationItem.prototype.checkSegments=function(t){return!!this.segments.length&&(this.adjustSegment(this.segments.shift(),t),!0)},AnimationItem.prototype.destroy=function(t){t&&this.name!=t||!this.renderer||(this.renderer.destroy(),this.imagePreloader.destroy(),this.trigger("destroy"),this._cbs=null,this.onEnterFrame=this.onLoopComplete=this.onComplete=this.onSegmentStart=this.onDestroy=null,this.renderer=null)},AnimationItem.prototype.setCurrentRawFrameValue=function(t){this.currentRawFrame=t,this.gotoFrame()},AnimationItem.prototype.setSpeed=function(t){this.playSpeed=t,this.updaFrameModifier()},AnimationItem.prototype.setDirection=function(t){this.playDirection=t<0?-1:1,this.updaFrameModifier()},AnimationItem.prototype.updaFrameModifier=function(){this.frameModifier=this.frameMult*this.playSpeed*this.playDirection},AnimationItem.prototype.getPath=function(){return this.path},AnimationItem.prototype.getAssetsPath=function(t){var e="";if(t.e)e=t.p;else if(this.assetsPath){var i=t.p;-1!==i.indexOf("images/")&&(i=i.split("/")[1]),e=this.assetsPath+i}else e=this.path,e+=t.u?t.u:"",e+=t.p;return e},AnimationItem.prototype.getAssetData=function(t){for(var e=0,i=this.assets.length;e<i;){if(t==this.assets[e].id)return this.assets[e];e+=1}},AnimationItem.prototype.hide=function(){this.renderer.hide()},AnimationItem.prototype.show=function(){this.renderer.show()},AnimationItem.prototype.getDuration=function(t){return t?this.totalFrames:this.totalFrames/this.frameRate},AnimationItem.prototype.trigger=function(t){if(this._cbs&&this._cbs[t])switch(t){case"enterFrame":this.triggerEvent(t,new BMEnterFrameEvent(t,this.currentFrame,this.totalFrames,this.frameModifier));break;case"loopComplete":this.triggerEvent(t,new BMCompleteLoopEvent(t,this.loop,this.playCount,this.frameMult));break;case"complete":this.triggerEvent(t,new BMCompleteEvent(t,this.frameMult));break;case"segmentStart":this.triggerEvent(t,new BMSegmentStartEvent(t,this.firstFrame,this.totalFrames));break;case"destroy":this.triggerEvent(t,new BMDestroyEvent(t,this));break;default:this.triggerEvent(t)}"enterFrame"===t&&this.onEnterFrame&&this.onEnterFrame.call(this,new BMEnterFrameEvent(t,this.currentFrame,this.totalFrames,this.frameMult)),"loopComplete"===t&&this.onLoopComplete&&this.onLoopComplete.call(this,new BMCompleteLoopEvent(t,this.loop,this.playCount,this.frameMult)),"complete"===t&&this.onComplete&&this.onComplete.call(this,new BMCompleteEvent(t,this.frameMult)),"segmentStart"===t&&this.onSegmentStart&&this.onSegmentStart.call(this,new BMSegmentStartEvent(t,this.firstFrame,this.totalFrames)),"destroy"===t&&this.onDestroy&&this.onDestroy.call(this,new BMDestroyEvent(t,this))},AnimationItem.prototype.triggerRenderFrameError=function(t){var e=new BMRenderFrameErrorEvent(t,this.currentFrame);this.triggerEvent("error",e),this.onError&&this.onError.call(this,e)},AnimationItem.prototype.triggerConfigError=function(t){var e=new BMConfigErrorEvent(t,this.currentFrame);this.triggerEvent("error",e),this.onError&&this.onError.call(this,e)};var Expressions=function(){function t(t){function e(){s+=1}function i(){0===(s-=1)&&a()}function r(t){-1===n.indexOf(t)&&n.push(t)}function a(){var t,e=n.length;for(t=0;t<e;t+=1)n[t].release();n.length=0}var s=0,n=[];t.renderer.compInterface=CompExpressionInterface(t.renderer),t.renderer.globalData.projectInterface.registerComposition(t.renderer),t.renderer.globalData.pushExpression=e,t.renderer.globalData.popExpression=i,t.renderer.globalData.registerExpressionProperty=r}var e={};return e.initExpressions=t,e}();expressionsPlugin=Expressions;var ExpressionManager=function(){function $bm_isInstanceOfArray(t){return t.constructor===Array||t.constructor===Float32Array}function isNumerable(t,e){return"number"===t||"boolean"===t||"string"===t||e instanceof Number}function $bm_neg(t){var e=typeof t;if("number"===e||"boolean"===e||t instanceof Number)return-t;if($bm_isInstanceOfArray(t)){var i,r=t.length,a=[];for(i=0;i<r;i+=1)a[i]=-t[i];return a}return t.propType?t.v:void 0}function sum(t,e){var i=typeof t,r=typeof e;if("string"===i||"string"===r)return t+e;if(isNumerable(i,t)&&isNumerable(r,e))return t+e;if($bm_isInstanceOfArray(t)&&isNumerable(r,e))return t=t.slice(0),t[0]=t[0]+e,t;if(isNumerable(i,t)&&$bm_isInstanceOfArray(e))return e=e.slice(0),e[0]=t+e[0],e;if($bm_isInstanceOfArray(t)&&$bm_isInstanceOfArray(e)){for(var a=0,s=t.length,n=e.length,o=[];a<s||a<n;)("number"==typeof t[a]||t[a]instanceof Number)&&("number"==typeof e[a]||e[a]instanceof Number)?o[a]=t[a]+e[a]:o[a]=void 0===e[a]?t[a]:t[a]||e[a],a+=1;return o}return 0}function sub(t,e){var i=typeof t,r=typeof e;if(isNumerable(i,t)&&isNumerable(r,e))return"string"===i&&(t=parseInt(t)),"string"===r&&(e=parseInt(e)),t-e;if($bm_isInstanceOfArray(t)&&isNumerable(r,e))return t=t.slice(0),t[0]=t[0]-e,t;if(isNumerable(i,t)&&$bm_isInstanceOfArray(e))return e=e.slice(0),e[0]=t-e[0],e;if($bm_isInstanceOfArray(t)&&$bm_isInstanceOfArray(e)){for(var a=0,s=t.length,n=e.length,o=[];a<s||a<n;)("number"==typeof t[a]||t[a]instanceof Number)&&("number"==typeof e[a]||e[a]instanceof Number)?o[a]=t[a]-e[a]:o[a]=void 0===e[a]?t[a]:t[a]||e[a],a+=1;return o}return 0}function mul(t,e){var i,r=typeof t,a=typeof e;if(isNumerable(r,t)&&isNumerable(a,e))return t*e;var s,n;if($bm_isInstanceOfArray(t)&&isNumerable(a,e)){for(n=t.length,i=createTypedArray("float32",n),s=0;s<n;s+=1)i[s]=t[s]*e;return i}if(isNumerable(r,t)&&$bm_isInstanceOfArray(e)){for(n=e.length,i=createTypedArray("float32",n),s=0;s<n;s+=1)i[s]=t*e[s];return i}return 0}function div(t,e){var i,r=typeof t,a=typeof e;if(isNumerable(r,t)&&isNumerable(a,e))return t/e;var s,n;if($bm_isInstanceOfArray(t)&&isNumerable(a,e)){for(n=t.length,i=createTypedArray("float32",n),s=0;s<n;s+=1)i[s]=t[s]/e;return i}if(isNumerable(r,t)&&$bm_isInstanceOfArray(e)){for(n=e.length,i=createTypedArray("float32",n),s=0;s<n;s+=1)i[s]=t/e[s];return i}return 0}function mod(t,e){return"string"==typeof t&&(t=parseInt(t)),"string"==typeof e&&(e=parseInt(e)),t%e}function clamp(t,e,i){if(e>i){var r=i;i=e,e=r}return Math.min(Math.max(t,e),i)}function radiansToDegrees(t){return t/degToRads}function degreesToRadians(t){return t*degToRads}function length(t,e){if("number"==typeof t||t instanceof Number)return e=e||0,Math.abs(t-e);e||(e=helperLengthArray);var i,r=Math.min(t.length,e.length),a=0;for(i=0;i<r;i+=1)a+=Math.pow(e[i]-t[i],2);return Math.sqrt(a)}function normalize(t){return div(t,length(t))}function rgbToHsl(t){var e,i,r=t[0],a=t[1],s=t[2],n=Math.max(r,a,s),o=Math.min(r,a,s),h=(n+o)/2;if(n==o)e=i=0;else{var l=n-o;switch(i=h>.5?l/(2-n-o):l/(n+o),n){case r:e=(a-s)/l+(a<s?6:0);break;case a:e=(s-r)/l+2;break;case s:e=(r-a)/l+4}e/=6}return[e,i,h,t[3]]}function hue2rgb(t,e,i){return i<0&&(i+=1),i>1&&(i-=1),i<1/6?t+6*(e-t)*i:i<.5?e:i<2/3?t+(e-t)*(2/3-i)*6:t}function hslToRgb(t){var e,i,r,a=t[0],s=t[1],n=t[2];if(0===s)e=i=r=n;else{var o=n<.5?n*(1+s):n+s-n*s,h=2*n-o;e=hue2rgb(h,o,a+1/3),i=hue2rgb(h,o,a),r=hue2rgb(h,o,a-1/3)}return[e,i,r,t[3]]}function linear(t,e,i,r,a){if(void 0!==r&&void 0!==a||(r=e,a=i,e=0,i=1),i<e){var s=i;i=e,e=s}if(t<=e)return r;if(t>=i)return a;var n=i===e?0:(t-e)/(i-e);if(!r.length)return r+(a-r)*n;var o,h=r.length,l=createTypedArray("float32",h);for(o=0;o<h;o+=1)l[o]=r[o]+(a[o]-r[o])*n;return l}function random(t,e){if(void 0===e&&(void 0===t?(t=0,e=1):(e=t,t=void 0)),e.length){var i,r=e.length;t||(t=createTypedArray("float32",r));var a=createTypedArray("float32",r),s=BMMath.random();for(i=0;i<r;i+=1)a[i]=t[i]+s*(e[i]-t[i]);return a}return void 0===t&&(t=0),t+BMMath.random()*(e-t)}function createPath(t,e,i,r){var a,s=t.length,n=shape_pool.newElement();n.setPathData(!!r,s);var o,h,l=[0,0];for(a=0;a<s;a+=1)o=e&&e[a]?e[a]:l,h=i&&i[a]?i[a]:l,n.setTripleAt(t[a][0],t[a][1],h[0]+t[a][0],h[1]+t[a][1],o[0]+t[a][0],o[1]+t[a][1],a,!0);return n}function initiateExpression(elem,data,property){function loopInDuration(t,e){return loopIn(t,e,!0)}function loopOutDuration(t,e){return loopOut(t,e,!0)}function lookAt(t,e){var i=[e[0]-t[0],e[1]-t[1],e[2]-t[2]],r=Math.atan2(i[0],Math.sqrt(i[1]*i[1]+i[2]*i[2]))/degToRads;return[-Math.atan2(i[1],i[2])/degToRads,r,0]}function easeOut(t,e,i,r,a){return applyEase(easeOutBez,t,e,i,r,a)}function easeIn(t,e,i,r,a){return applyEase(easeInBez,t,e,i,r,a)}function ease(t,e,i,r,a){return applyEase(easeInOutBez,t,e,i,r,a)}function applyEase(t,e,i,r,a,s){void 0===a?(a=i,s=r):e=(e-i)/(r-i),e=e>1?1:e<0?0:e;var n=t(e);if($bm_isInstanceOfArray(a)){var o,h=a.length,l=createTypedArray("float32",h);for(o=0;o<h;o+=1)l[o]=(s[o]-a[o])*n+a[o];return l}return(s-a)*n+a}function nearestKey(t){var e,i,r,a=data.k.length;if(data.k.length&&"number"!=typeof data.k[0])if(i=-1,(t*=elem.comp.globalData.frameRate)<data.k[0].t)i=1,r=data.k[0].t;else{for(e=0;e<a-1;e+=1){if(t===data.k[e].t){i=e+1,r=data.k[e].t;break}if(t>data.k[e].t&&t<data.k[e+1].t){t-data.k[e].t>data.k[e+1].t-t?(i=e+2,r=data.k[e+1].t):(i=e+1,r=data.k[e].t);break}}-1===i&&(i=e+1,r=data.k[e].t)}else i=0,r=0;var s={};return s.index=i,s.time=r/elem.comp.globalData.frameRate,s}function key(t){var e,i,r;if(!data.k.length||"number"==typeof data.k[0])throw new Error("The property has no keyframe at index "+t);t-=1,e={time:data.k[t].t/elem.comp.globalData.frameRate,value:[]};var a=data.k[t].hasOwnProperty("s")?data.k[t].s:data.k[t-1].e;for(r=a.length,i=0;i<r;i+=1)e[i]=a[i],e.value[i]=a[i];return e}function framesToTime(t,e){return e||(e=elem.comp.globalData.frameRate),t/e}function timeToFrames(t,e){return t||0===t||(t=time),e||(e=elem.comp.globalData.frameRate),t*e}function seedRandom(t){BMMath.seedrandom(randSeed+t)}function sourceRectAtTime(){return elem.sourceRectAtTime()}function substring(t,e){return"string"==typeof value?void 0===e?value.substring(t):value.substring(t,e):""}function substr(t,e){return"string"==typeof value?void 0===e?value.substr(t):value.substr(t,e):""}function executeExpression(t){return value=t,_needsRandom&&seedRandom(randSeed),this.frameExpressionId===elem.globalData.frameId&&"textSelector"!==this.propType?value:("textSelector"===this.propType&&(textIndex=this.textIndex,textTotal=this.textTotal,selectorValue=this.selectorValue),thisLayer||(text=elem.layerInterface.text,thisLayer=elem.layerInterface,thisComp=elem.comp.compInterface,toWorld=thisLayer.toWorld.bind(thisLayer),fromWorld=thisLayer.fromWorld.bind(thisLayer),fromComp=thisLayer.fromComp.bind(thisLayer),toComp=thisLayer.toComp.bind(thisLayer),mask=thisLayer.mask?thisLayer.mask.bind(thisLayer):null,fromCompToSurface=fromComp),transform||(transform=elem.layerInterface("ADBE Transform Group"),$bm_transform=transform,transform&&(anchorPoint=transform.anchorPoint)),4!==elemType||content||(content=thisLayer("ADBE Root Vectors Group")),effect||(effect=thisLayer(4)),hasParent=!(!elem.hierarchy||!elem.hierarchy.length),hasParent&&!parent&&(parent=elem.hierarchy[0].layerInterface),time=this.comp.renderedFrame/this.comp.globalData.frameRate,needsVelocity&&(velocity=velocityAtTime(time)),expression_function(),this.frameExpressionId=elem.globalData.frameId,"shape"===scoped_bm_rt.propType&&(scoped_bm_rt=scoped_bm_rt.v),scoped_bm_rt)}var val=data.x,needsVelocity=/velocity(?![\w\d])/.test(val),_needsRandom=-1!==val.indexOf("random"),elemType=elem.data.ty,transform,$bm_transform,content,effect,thisProperty=property;thisProperty.valueAtTime=thisProperty.getValueAtTime,Object.defineProperty(thisProperty,"value",{get:function(){return thisProperty.v}}),elem.comp.frameDuration=1/elem.comp.globalData.frameRate,elem.comp.displayStartTime=0;var inPoint=elem.data.ip/elem.comp.globalData.frameRate,outPoint=elem.data.op/elem.comp.globalData.frameRate,width=elem.data.sw?elem.data.sw:0,height=elem.data.sh?elem.data.sh:0,name=elem.data.nm,loopIn,loop_in,loopOut,loop_out,smooth,toWorld,fromWorld,fromComp,toComp,fromCompToSurface,position,rotation,anchorPoint,scale,thisLayer,thisComp,mask,valueAtTime,velocityAtTime,__expression_functions=[];if(data.xf){var i,len=data.xf.length;for(i=0;i<len;i+=1)__expression_functions[i]=eval("(function(){ return "+data.xf[i]+"}())")}var scoped_bm_rt,expression_function=eval("[function _expression_function(){"+val+";scoped_bm_rt=$bm_rt}]")[0],numKeys=property.kf?data.k.length:0,active=!this.data||!0!==this.data.hd,wiggle=function(t,e){var i,r,a=this.pv.length?this.pv.length:1,s=createTypedArray("float32",a);t=5;var n=Math.floor(time*t);for(i=0,r=0;i<n;){for(r=0;r<a;r+=1)s[r]+=-e+2*e*BMMath.random();i+=1}var o=time*t,h=o-Math.floor(o),l=createTypedArray("float32",a);if(a>1){for(r=0;r<a;r+=1)l[r]=this.pv[r]+s[r]+(-e+2*e*BMMath.random())*h;return l}return this.pv+s[0]+(-e+2*e*BMMath.random())*h}.bind(this);thisProperty.loopIn&&(loopIn=thisProperty.loopIn.bind(thisProperty),loop_in=loopIn),thisProperty.loopOut&&(loopOut=thisProperty.loopOut.bind(thisProperty),loop_out=loopOut),thisProperty.smooth&&(smooth=thisProperty.smooth.bind(thisProperty)),this.getValueAtTime&&(valueAtTime=this.getValueAtTime.bind(this)),this.getVelocityAtTime&&(velocityAtTime=this.getVelocityAtTime.bind(this));var comp=elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface),time,velocity,value,text,textIndex,textTotal,selectorValue,index=elem.data.ind,hasParent=!(!elem.hierarchy||!elem.hierarchy.length),parent,randSeed=Math.floor(1e6*Math.random()),globalData=elem.globalData;return executeExpression}var ob={},Math=BMMath,window=null,document=null,easeInBez=BezierFactory.getBezierEasing(.333,0,.833,.833,"easeIn").get,easeOutBez=BezierFactory.getBezierEasing(.167,.167,.667,1,"easeOut").get,easeInOutBez=BezierFactory.getBezierEasing(.33,0,.667,1,"easeInOut").get,add=sum,$bm_sum=sum,$bm_sub=sub,$bm_mul=mul,$bm_div=div,$bm_mod=mod,radians_to_degrees=radiansToDegrees,degrees_to_radians=radiansToDegrees,helperLengthArray=[0,0,0,0,0,0];return ob.initiateExpression=initiateExpression,ob}(),expressionHelpers=function(){function t(t,e,i){e.x&&(i.k=!0,i.x=!0,i.initiateExpression=ExpressionManager.initiateExpression,i.effectsSequence.push(i.initiateExpression(t,e,i).bind(i)))}function e(t){return t*=this.elem.globalData.frameRate,t-=this.offsetTime,t!==this._cachingAtTime.lastFrame&&(this._cachingAtTime.lastIndex=this._cachingAtTime.lastFrame<t?this._cachingAtTime.lastIndex:0,this._cachingAtTime.value=this.interpolateValue(t,this._cachingAtTime),this._cachingAtTime.lastFrame=t),this._cachingAtTime.value}function i(t){var e=this.getValueAtTime(t),i=this.getValueAtTime(t+-.01),r=0;if(e.length){var a;for(a=0;a<e.length;a+=1)r+=Math.pow(i[a]-e[a],2);r=100*Math.sqrt(r)}else r=0;return r}function r(t){if(void 0!==this.vel)return this.vel;var e,i=this.getValueAtTime(t),r=this.getValueAtTime(t+-.001);if(i.length){e=createTypedArray("float32",i.length);var a;for(a=0;a<i.length;a+=1)e[a]=(r[a]-i[a])/-.001}else e=(r-i)/-.001;return e}function a(){return this.pv}function s(t){this.propertyGroup=t}return{searchExpressions:t,getSpeedAtTime:i,getVelocityAtTime:r,getValueAtTime:e,getStaticValueAtTime:a,setGroupProperty:s}}();!function(){function t(t,e,i){if(!this.k||!this.keyframes)return this.pv;t=t?t.toLowerCase():"";var r=this.comp.renderedFrame,a=this.keyframes,s=a[a.length-1].t;if(r<=s)return this.pv;var n,o;i?(n=e?Math.abs(s-elem.comp.globalData.frameRate*e):Math.max(0,s-this.elem.data.ip),o=s-n):((!e||e>a.length-1)&&(e=a.length-1),o=a[a.length-1-e].t,n=s-o);var h,l,p;if("pingpong"===t){if(Math.floor((r-o)/n)%2!=0)return this.getValueAtTime((n-(r-o)%n+o)/this.comp.globalData.frameRate,0)}else{if("offset"===t){var c=this.getValueAtTime(o/this.comp.globalData.frameRate,0),m=this.getValueAtTime(s/this.comp.globalData.frameRate,0),f=this.getValueAtTime(((r-o)%n+o)/this.comp.globalData.frameRate,0),d=Math.floor((r-o)/n);if(this.pv.length){for(p=new Array(c.length),l=p.length,h=0;h<l;h+=1)p[h]=(m[h]-c[h])*d+f[h];return p}return(m-c)*d+f}if("continue"===t){var u=this.getValueAtTime(s/this.comp.globalData.frameRate,0),y=this.getValueAtTime((s-.001)/this.comp.globalData.frameRate,0);if(this.pv.length){for(p=new Array(u.length),l=p.length,h=0;h<l;h+=1)p[h]=u[h]+(u[h]-y[h])*((r-s)/this.comp.globalData.frameRate)/5e-4;return p}return u+(r-s)/.001*(u-y)}}return this.getValueAtTime(((r-o)%n+o)/this.comp.globalData.frameRate,0)}function e(t,e,i){if(!this.k)return this.pv;t=t?t.toLowerCase():"";var r=this.comp.renderedFrame,a=this.keyframes,s=a[0].t;if(r>=s)return this.pv;var n,o;i?(n=e?Math.abs(elem.comp.globalData.frameRate*e):Math.max(0,this.elem.data.op-s),o=s+n):((!e||e>a.length-1)&&(e=a.length-1),o=a[e].t,n=o-s);var h,l,p;if("pingpong"===t){if(Math.floor((s-r)/n)%2==0)return this.getValueAtTime(((s-r)%n+s)/this.comp.globalData.frameRate,0)}else{if("offset"===t){var c=this.getValueAtTime(s/this.comp.globalData.frameRate,0),m=this.getValueAtTime(o/this.comp.globalData.frameRate,0),f=this.getValueAtTime((n-(s-r)%n+s)/this.comp.globalData.frameRate,0),d=Math.floor((s-r)/n)+1;if(this.pv.length){for(p=new Array(c.length),l=p.length,h=0;h<l;h+=1)p[h]=f[h]-(m[h]-c[h])*d;return p}return f-(m-c)*d}if("continue"===t){var u=this.getValueAtTime(s/this.comp.globalData.frameRate,0),y=this.getValueAtTime((s+.001)/this.comp.globalData.frameRate,0);if(this.pv.length){for(p=new Array(u.length),l=p.length,h=0;h<l;h+=1)p[h]=u[h]+(u[h]-y[h])*(s-r)/.001;return p}return u+(u-y)*(s-r)/.001}}return this.getValueAtTime((n-(s-r)%n+s)/this.comp.globalData.frameRate,0)}function i(t,e){if(!this.k)return this.pv;if(t=.5*(t||.4),(e=Math.floor(e||5))<=1)return this.pv;var i,r=this.comp.renderedFrame/this.comp.globalData.frameRate,a=r-t,s=r+t,n=e>1?(s-a)/(e-1):1,o=0,h=0;i=this.pv.length?createTypedArray("float32",this.pv.length):0;for(var l;o<e;){if(l=this.getValueAtTime(a+o*n),this.pv.length)for(h=0;h<this.pv.length;h+=1)i[h]+=l[h];else i+=l;o+=1}if(this.pv.length)for(h=0;h<this.pv.length;h+=1)i[h]/=e;else i/=e;return i}function r(t){console.warn("Transform at time not supported")}function a(t){}function s(t){return this._cachingAtTime||(this._cachingAtTime={shapeValue:shape_pool.clone(this.pv),lastIndex:0,lastTime:initialDefaultFrame}),t*=this.elem.globalData.frameRate,t-=this.offsetTime,t!==this._cachingAtTime.lastTime&&(this._cachingAtTime.lastIndex=this._cachingAtTime.lastTime<t?this._caching.lastIndex:0,this._cachingAtTime.lastTime=t,this.interpolateShape(t,this._cachingAtTime.shapeValue,this._cachingAtTime)),this._cachingAtTime.shapeValue}function n(){}var o=TransformPropertyFactory.getTransformProperty;TransformPropertyFactory.getTransformProperty=function(t,e,i){var s=o(t,e,i);return s.dynamicProperties.length?s.getValueAtTime=r.bind(s):s.getValueAtTime=a.bind(s),s.setGroupProperty=expressionHelpers.setGroupProperty,s};var h=PropertyFactory.getProp;PropertyFactory.getProp=function(r,a,s,n,o){var l=h(r,a,s,n,o);l.kf?l.getValueAtTime=expressionHelpers.getValueAtTime.bind(l):l.getValueAtTime=expressionHelpers.getStaticValueAtTime.bind(l),l.setGroupProperty=expressionHelpers.setGroupProperty,l.loopOut=t,l.loopIn=e,l.smooth=i,l.getVelocityAtTime=expressionHelpers.getVelocityAtTime.bind(l),l.getSpeedAtTime=expressionHelpers.getSpeedAtTime.bind(l),l.numKeys=1===a.a?a.k.length:0,l.propertyIndex=a.ix;var p=0;return 0!==s&&(p=createTypedArray("float32",1===a.a?a.k[0].s.length:a.k.length)),l._cachingAtTime={lastFrame:initialDefaultFrame,lastIndex:0,value:p},expressionHelpers.searchExpressions(r,a,l),l.k&&o.addDynamicProperty(l),l};var l=ShapePropertyFactory.getConstructorFunction(),p=ShapePropertyFactory.getKeyframedConstructorFunction();n.prototype={vertices:function(t,e){this.k&&this.getValue();var i=this.v;void 0!==e&&(i=this.getValueAtTime(e,0));var r,a=i._length,s=i[t],n=i.v,o=createSizedArray(a);for(r=0;r<a;r+=1)o[r]="i"===t||"o"===t?[s[r][0]-n[r][0],s[r][1]-n[r][1]]:[s[r][0],s[r][1]];return o},points:function(t){return this.vertices("v",t)},inTangents:function(t){return this.vertices("i",t)},outTangents:function(t){return this.vertices("o",t)},isClosed:function(){return this.v.c},pointOnPath:function(t,e){var i=this.v;void 0!==e&&(i=this.getValueAtTime(e,0)),this._segmentsLength||(this._segmentsLength=bez.getSegmentsLength(i));for(var r,a=this._segmentsLength,s=a.lengths,n=a.totalLength*t,o=0,h=s.length,l=0;o<h;){if(l+s[o].addedLength>n){var p=o,c=i.c&&o===h-1?0:o+1,m=(n-l)/s[o].addedLength;r=bez.getPointInSegment(i.v[p],i.v[c],i.o[p],i.i[c],m,s[o]);break}l+=s[o].addedLength,o+=1}return r||(r=i.c?[i.v[0][0],i.v[0][1]]:[i.v[i._length-1][0],i.v[i._length-1][1]]),r},vectorOnPath:function(t,e,i){t=1==t?this.v.c?0:.999:t;var r=this.pointOnPath(t,e),a=this.pointOnPath(t+.001,e),s=a[0]-r[0],n=a[1]-r[1],o=Math.sqrt(Math.pow(s,2)+Math.pow(n,2));return 0===o?[0,0]:"tangent"===i?[s/o,n/o]:[-n/o,s/o]},tangentOnPath:function(t,e){return this.vectorOnPath(t,e,"tangent")},normalOnPath:function(t,e){return this.vectorOnPath(t,e,"normal")},setGroupProperty:expressionHelpers.setGroupProperty,getValueAtTime:expressionHelpers.getStaticValueAtTime},extendPrototype([n],l),extendPrototype([n],p),p.prototype.getValueAtTime=s,p.prototype.initiateExpression=ExpressionManager.initiateExpression;var c=ShapePropertyFactory.getShapeProp;ShapePropertyFactory.getShapeProp=function(t,e,i,r,a){var s=c(t,e,i,r,a);return s.propertyIndex=e.ix,s.lock=!1,3===i?expressionHelpers.searchExpressions(t,e.pt,s):4===i&&expressionHelpers.searchExpressions(t,e.ks,s),s.k&&t.addDynamicProperty(s),s}}(),function(){function t(){if(this.data.d.x)return this.calculateExpression=ExpressionManager.initiateExpression.bind(this)(this.elem,this.data.d,this),this.addEffect(this.getExpressionValue.bind(this)),!0}TextProperty.prototype.getExpressionValue=function(t,e){var i=this.calculateExpression(e);if(t.t!==i){var r={};return this.copyData(r,t),r.t=i.toString(),r.__complete=!1,r}return t},TextProperty.prototype.searchProperty=function(){var t=this.searchKeyframes(),e=this.searchExpressions();return this.kf=t||e,this.kf},TextProperty.prototype.searchExpressions=t}();var ShapeExpressionInterface=function(){function t(t,e,n){var f,d=[],u=t?t.length:0;for(f=0;f<u;f+=1)"gr"==t[f].ty?d.push(i(t[f],e[f],n)):"fl"==t[f].ty?d.push(r(t[f],e[f],n)):"st"==t[f].ty?d.push(a(t[f],e[f],n)):"tm"==t[f].ty?d.push(s(t[f],e[f],n)):"tr"==t[f].ty||("el"==t[f].ty?d.push(o(t[f],e[f],n)):"sr"==t[f].ty?d.push(h(t[f],e[f],n)):"sh"==t[f].ty?d.push(m(t[f],e[f],n)):"rc"==t[f].ty?d.push(l(t[f],e[f],n)):"rd"==t[f].ty?d.push(p(t[f],e[f],n)):"rp"==t[f].ty&&d.push(c(t[f],e[f],n)));return d}function e(e,i,r){var a,s=function(t){for(var e=0,i=a.length;e<i;){if(a[e]._name===t||a[e].mn===t||a[e].propertyIndex===t||a[e].ix===t||a[e].ind===t)return a[e];e+=1}if("number"==typeof t)return a[t-1]};return s.propertyGroup=function(t){return 1===t?s:r(t-1)},a=t(e.it,i.it,s.propertyGroup),s.numProperties=a.length,s.propertyIndex=e.cix,s._name=e.nm,s}function i(t,i,r){var a=function(t){switch(t){case"ADBE Vectors Group":case"Contents":case 2:return a.content;default:return a.transform}};a.propertyGroup=function(t){return 1===t?a:r(t-1)};var s=e(t,i,a.propertyGroup),o=n(t.it[t.it.length-1],i.it[i.it.length-1],a.propertyGroup);return a.content=s,a.transform=o,Object.defineProperty(a,"_name",{get:function(){return t.nm}}),a.numProperties=t.np,a.propertyIndex=t.ix,a.nm=t.nm,a.mn=t.mn,a}function r(t,e,i){function r(t){return"Color"===t||"color"===t?r.color:"Opacity"===t||"opacity"===t?r.opacity:void 0}return Object.defineProperties(r,{color:{get:ExpressionPropertyInterface(e.c)},opacity:{get:ExpressionPropertyInterface(e.o)},_name:{value:t.nm},mn:{value:t.mn}}),e.c.setGroupProperty(i),e.o.setGroupProperty(i),r}function a(t,e,i){function r(t){return 1===t?ob:i(t-1)}function a(t){return 1===t?h:r(t-1)}function s(t){return"Color"===t||"color"===t?s.color:"Opacity"===t||"opacity"===t?s.opacity:"Stroke Width"===t||"stroke width"===t?s.strokeWidth:void 0}var n,o=t.d?t.d.length:0,h={};for(n=0;n<o;n+=1)!function(i){Object.defineProperty(h,t.d[i].nm,{get:ExpressionPropertyInterface(e.d.dataProps[i].p)})}(n),e.d.dataProps[n].p.setGroupProperty(a);return Object.defineProperties(s,{color:{get:ExpressionPropertyInterface(e.c)},opacity:{get:ExpressionPropertyInterface(e.o)},strokeWidth:{get:ExpressionPropertyInterface(e.w)},dash:{get:function(){return h}},_name:{value:t.nm},mn:{value:t.mn}}),e.c.setGroupProperty(r),e.o.setGroupProperty(r),e.w.setGroupProperty(r),s}function s(t,e,i){function r(t){return 1==t?a:i(--t)}function a(e){return e===t.e.ix||"End"===e||"end"===e?a.end:e===t.s.ix?a.start:e===t.o.ix?a.offset:void 0}return a.propertyIndex=t.ix,e.s.setGroupProperty(r),e.e.setGroupProperty(r),e.o.setGroupProperty(r),a.propertyIndex=t.ix,a.propertyGroup=i,Object.defineProperties(a,{start:{get:ExpressionPropertyInterface(e.s)},end:{get:ExpressionPropertyInterface(e.e)},offset:{get:ExpressionPropertyInterface(e.o)},_name:{value:t.nm}}),a.mn=t.mn,a}function n(t,e,i){function r(t){return 1==t?a:i(--t)}function a(e){return t.a.ix===e||"Anchor Point"===e?a.anchorPoint:t.o.ix===e||"Opacity"===e?a.opacity:t.p.ix===e||"Position"===e?a.position:t.r.ix===e||"Rotation"===e||"ADBE Vector Rotation"===e?a.rotation:t.s.ix===e||"Scale"===e?a.scale:t.sk&&t.sk.ix===e||"Skew"===e?a.skew:t.sa&&t.sa.ix===e||"Skew Axis"===e?a.skewAxis:void 0}return e.transform.mProps.o.setGroupProperty(r),e.transform.mProps.p.setGroupProperty(r),e.transform.mProps.a.setGroupProperty(r),e.transform.mProps.s.setGroupProperty(r),e.transform.mProps.r.setGroupProperty(r),e.transform.mProps.sk&&(e.transform.mProps.sk.setGroupProperty(r),e.transform.mProps.sa.setGroupProperty(r)),e.transform.op.setGroupProperty(r),Object.defineProperties(a,{opacity:{get:ExpressionPropertyInterface(e.transform.mProps.o)},position:{get:ExpressionPropertyInterface(e.transform.mProps.p)},anchorPoint:{get:ExpressionPropertyInterface(e.transform.mProps.a)},scale:{get:ExpressionPropertyInterface(e.transform.mProps.s)},rotation:{get:ExpressionPropertyInterface(e.transform.mProps.r)},skew:{get:ExpressionPropertyInterface(e.transform.mProps.sk)},skewAxis:{get:ExpressionPropertyInterface(e.transform.mProps.sa)},_name:{value:t.nm}}),a.ty="tr",a.mn=t.mn,a.propertyGroup=i,a}function o(t,e,i){function r(t){return 1==t?a:i(--t)}function a(e){return t.p.ix===e?a.position:t.s.ix===e?a.size:void 0}a.propertyIndex=t.ix;var s="tm"===e.sh.ty?e.sh.prop:e.sh;return s.s.setGroupProperty(r),s.p.setGroupProperty(r),Object.defineProperties(a,{size:{get:ExpressionPropertyInterface(s.s)},position:{get:ExpressionPropertyInterface(s.p)},_name:{value:t.nm}}),a.mn=t.mn,a}function h(t,e,i){function r(t){return 1==t?a:i(--t)}function a(e){return t.p.ix===e?a.position:t.r.ix===e?a.rotation:t.pt.ix===e?a.points:t.or.ix===e||"ADBE Vector Star Outer Radius"===e?a.outerRadius:t.os.ix===e?a.outerRoundness:!t.ir||t.ir.ix!==e&&"ADBE Vector Star Inner Radius"!==e?t.is&&t.is.ix===e?a.innerRoundness:void 0:a.innerRadius}var s="tm"===e.sh.ty?e.sh.prop:e.sh;return a.propertyIndex=t.ix,s.or.setGroupProperty(r),s.os.setGroupProperty(r),s.pt.setGroupProperty(r),s.p.setGroupProperty(r),s.r.setGroupProperty(r),t.ir&&(s.ir.setGroupProperty(r),s.is.setGroupProperty(r)),Object.defineProperties(a,{position:{get:ExpressionPropertyInterface(s.p)},rotation:{get:ExpressionPropertyInterface(s.r)},points:{get:ExpressionPropertyInterface(s.pt)},outerRadius:{get:ExpressionPropertyInterface(s.or)},outerRoundness:{get:ExpressionPropertyInterface(s.os)},innerRadius:{get:ExpressionPropertyInterface(s.ir)},innerRoundness:{get:ExpressionPropertyInterface(s.is)},_name:{value:t.nm}}),a.mn=t.mn,a}function l(t,e,i){function r(t){return 1==t?a:i(--t)}function a(e){return t.p.ix===e?a.position:t.r.ix===e?a.roundness:t.s.ix===e||"Size"===e||"ADBE Vector Rect Size"===e?a.size:void 0}var s="tm"===e.sh.ty?e.sh.prop:e.sh;return a.propertyIndex=t.ix,s.p.setGroupProperty(r),s.s.setGroupProperty(r),s.r.setGroupProperty(r),Object.defineProperties(a,{position:{get:ExpressionPropertyInterface(s.p)},roundness:{get:ExpressionPropertyInterface(s.r)},size:{get:ExpressionPropertyInterface(s.s)},_name:{value:t.nm}}),a.mn=t.mn,a}function p(t,e,i){function r(t){return 1==t?a:i(--t)}function a(e){if(t.r.ix===e||"Round Corners 1"===e)return a.radius}var s=e;return a.propertyIndex=t.ix,s.rd.setGroupProperty(r),Object.defineProperties(a,{radius:{get:ExpressionPropertyInterface(s.rd)},_name:{value:t.nm}}),a.mn=t.mn,a}function c(t,e,i){function r(t){return 1==t?a:i(--t)}function a(e){return t.c.ix===e||"Copies"===e?a.copies:t.o.ix===e||"Offset"===e?a.offset:void 0}var s=e;return a.propertyIndex=t.ix,s.c.setGroupProperty(r),s.o.setGroupProperty(r),Object.defineProperties(a,{copies:{get:ExpressionPropertyInterface(s.c)},offset:{get:ExpressionPropertyInterface(s.o)},_name:{value:t.nm}}),a.mn=t.mn,a}function m(t,e,i){function r(t){return 1==t?a:i(--t)}function a(t){if("Shape"===t||"shape"===t||"Path"===t||"path"===t||"ADBE Vector Shape"===t||2===t)return a.path}var s=e.sh;return s.setGroupProperty(r),Object.defineProperties(a,{path:{get:function(){return s.k&&s.getValue(),s}},shape:{get:function(){return s.k&&s.getValue(),s}},_name:{value:t.nm},ix:{value:t.ix},propertyIndex:{value:t.ix},mn:{value:t.mn}}),a}return function(e,i,r){function a(t){if("number"==typeof t)return s[t-1];for(var e=0,i=s.length;e<i;){if(s[e]._name===t)return s[e];e+=1}}var s;return a.propertyGroup=r,s=t(e,i,a),a.numProperties=s.length,a}}(),TextExpressionInterface=function(){return function(t){function e(){}var i;return Object.defineProperty(e,"sourceText",{get:function(){t.textProperty.getValue();var e=t.textProperty.currentData.t;return void 0!==e&&(t.textProperty.currentData.t=void 0,i=new String(e),i.value=e||new String(e)),i}}),e}}(),LayerExpressionInterface=function(){function t(t,e){var i=new Matrix;i.reset();var r;if(r=this._elem.finalTransform.mProp,r.applyToMatrix(i),this._elem.hierarchy&&this._elem.hierarchy.length){var a,s=this._elem.hierarchy.length;for(a=0;a<s;a+=1)this._elem.hierarchy[a].finalTransform.mProp.applyToMatrix(i);return i.applyToPointArray(t[0],t[1],t[2]||0)}return i.applyToPointArray(t[0],t[1],t[2]||0)}function e(t,e){var i=new Matrix;i.reset();var r;if(r=this._elem.finalTransform.mProp,r.applyToMatrix(i),this._elem.hierarchy&&this._elem.hierarchy.length){var a,s=this._elem.hierarchy.length;for(a=0;a<s;a+=1)this._elem.hierarchy[a].finalTransform.mProp.applyToMatrix(i);return i.inversePoint(t)}return i.inversePoint(t)}function i(t){var e=new Matrix;if(e.reset(),this._elem.finalTransform.mProp.applyToMatrix(e),this._elem.hierarchy&&this._elem.hierarchy.length){var i,r=this._elem.hierarchy.length;for(i=0;i<r;i+=1)this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(e);return e.inversePoint(t)}return e.inversePoint(t)}function r(){return[1,1,1,1]}return function(a){function s(t){o.mask=new MaskManagerInterface(t,a)}function n(t){o.effect=t}function o(t){switch(t){case"ADBE Root Vectors Group":case"Contents":case 2:return o.shapeInterface;case 1:case 6:case"Transform":case"transform":case"ADBE Transform Group":return h;case 4:case"ADBE Effect Parade":case"effects":case"Effects":return o.effect}}var h;o.toWorld=t,o.fromWorld=e,o.toComp=t,o.fromComp=i,o.sampleImage=r,o.sourceRectAtTime=a.sourceRectAtTime.bind(a),o._elem=a,h=TransformExpressionInterface(a.finalTransform.mProp);var l=getDescriptor(h,"anchorPoint");return Object.defineProperties(o,{hasParent:{get:function(){return a.hierarchy.length}},parent:{get:function(){return a.hierarchy[0].layerInterface}},rotation:getDescriptor(h,"rotation"),scale:getDescriptor(h,"scale"),position:getDescriptor(h,"position"),opacity:getDescriptor(h,"opacity"),anchorPoint:l,anchor_point:l,transform:{get:function(){return h}},active:{get:function(){return a.isInRange}}}),o.startTime=a.data.st,o.index=a.data.ind,o.source=a.data.refId,o.height=0===a.data.ty?a.data.h:100,o.width=0===a.data.ty?a.data.w:100,o.inPoint=a.data.ip/a.comp.globalData.frameRate,o.outPoint=a.data.op/a.comp.globalData.frameRate,o._name=a.data.nm,o.registerMaskInterface=s,o.registerEffectsInterface=n,o}}(),CompExpressionInterface=function(){return function(t){function e(e){for(var i=0,r=t.layers.length;i<r;){if(t.layers[i].nm===e||t.layers[i].ind===e)return t.elements[i].layerInterface;i+=1}return null}return Object.defineProperty(e,"_name",{value:t.data.nm}),e.layer=e,e.pixelAspect=1,e.height=t.data.h||t.globalData.compSize.h,e.width=t.data.w||t.globalData.compSize.w,e.pixelAspect=1,e.frameDuration=1/t.globalData.frameRate,e.displayStartTime=0,e.numLayers=t.layers.length,e}}(),TransformExpressionInterface=function(){return function(t){function e(t){switch(t){case"scale":case"Scale":case"ADBE Scale":case 6:return e.scale;case"rotation":case"Rotation":case"ADBE Rotation":case"ADBE Rotate Z":case 10:return e.rotation;case"ADBE Rotate X":return e.xRotation;case"ADBE Rotate Y":return e.yRotation;case"position":case"Position":case"ADBE Position":case 2:return e.position;case"ADBE Position_0":return e.xPosition;case"ADBE Position_1":return e.yPosition;case"ADBE Position_2":return e.zPosition;case"anchorPoint":case"AnchorPoint":case"Anchor Point":case"ADBE AnchorPoint":case 1:return e.anchorPoint;case"opacity":case"Opacity":case 11:return e.opacity}}if(Object.defineProperty(e,"rotation",{get:ExpressionPropertyInterface(t.r||t.rz)}),Object.defineProperty(e,"zRotation",{get:ExpressionPropertyInterface(t.rz||t.r)}),Object.defineProperty(e,"xRotation",{get:ExpressionPropertyInterface(t.rx)}),Object.defineProperty(e,"yRotation",{get:ExpressionPropertyInterface(t.ry)}),Object.defineProperty(e,"scale",{get:ExpressionPropertyInterface(t.s)}),t.p)var i=ExpressionPropertyInterface(t.p);return Object.defineProperty(e,"position",{get:function(){return t.p?i():[t.px.v,t.py.v,t.pz?t.pz.v:0]}}),Object.defineProperty(e,"xPosition",{get:ExpressionPropertyInterface(t.px)}),Object.defineProperty(e,"yPosition",{get:ExpressionPropertyInterface(t.py)}),Object.defineProperty(e,"zPosition",{get:ExpressionPropertyInterface(t.pz)}),Object.defineProperty(e,"anchorPoint",{get:ExpressionPropertyInterface(t.a)}),Object.defineProperty(e,"opacity",{get:ExpressionPropertyInterface(t.o)}),Object.defineProperty(e,"skew",{get:ExpressionPropertyInterface(t.sk)}),Object.defineProperty(e,"skewAxis",{get:ExpressionPropertyInterface(t.sa)}),Object.defineProperty(e,"orientation",{get:ExpressionPropertyInterface(t.or)}),e}}(),ProjectInterface=function(){function t(t){this.compositions.push(t)}return function(){function e(t){for(var e=0,i=this.compositions.length;e<i;){if(this.compositions[e].data&&this.compositions[e].data.nm===t)return this.compositions[e].prepareFrame&&this.compositions[e].data.xt&&this.compositions[e].prepareFrame(this.currentFrame),this.compositions[e].compInterface;e+=1}}return e.compositions=[],e.currentFrame=0,e.registerComposition=t,e}}(),EffectsExpressionInterface=function(){function t(t,i){if(t.effectsManager){var r,a=[],s=t.data.ef,n=t.effectsManager.effectElements.length;for(r=0;r<n;r+=1)a.push(e(s[r],t.effectsManager.effectElements[r],i,t));return function(e){for(var i=t.data.ef||[],r=0,s=i.length;r<s;){if(e===i[r].nm||e===i[r].mn||e===i[r].ix)return a[r];r+=1}}}}function e(t,r,a,s){function n(t){return 1===t?p:a(t-1)}var o,h=[],l=t.ef.length;for(o=0;o<l;o+=1)5===t.ef[o].ty?h.push(e(t.ef[o],r.effectElements[o],r.effectElements[o].propertyGroup,s)):h.push(i(r.effectElements[o],t.ef[o].ty,s,n));var p=function(e){for(var i=t.ef,r=0,a=i.length;r<a;){if(e===i[r].nm||e===i[r].mn||e===i[r].ix)return 5===i[r].ty?h[r]:h[r]();r+=1}return h[0]()};return p.propertyGroup=n,"ADBE Color Control"===t.mn&&Object.defineProperty(p,"color",{get:function(){return h[0]()}}),Object.defineProperty(p,"numProperties",{get:function(){return t.np}}),p.active=p.enabled=0!==t.en,p}function i(t,e,i,r){function a(){return 10===e?i.comp.compInterface(t.p.v):s()}var s=ExpressionPropertyInterface(t.p);return t.p.setGroupProperty&&t.p.setGroupProperty(r),a}return{createEffectsInterface:t}}(),MaskManagerInterface=function(){function t(t,e){this._mask=t,this._data=e}return Object.defineProperty(t.prototype,"maskPath",{get:function(){return this._mask.prop.k&&this._mask.prop.getValue(),this._mask.prop}}),Object.defineProperty(t.prototype,"maskOpacity",{get:function(){return this._mask.op.k&&this._mask.op.getValue(),100*this._mask.op.v}}),function(e,i){var r,a=createSizedArray(e.viewData.length),s=e.viewData.length;for(r=0;r<s;r+=1)a[r]=new t(e.viewData[r],e.masksProperties[r]);return function(t){for(r=0;r<s;){if(e.masksProperties[r].nm===t)return a[r];r+=1}}}}(),ExpressionPropertyInterface=function(){function t(t,e,i){Object.defineProperty(t,"velocity",{get:function(){return e.getVelocityAtTime(e.comp.currentFrame)}}),t.numKeys=e.keyframes?e.keyframes.length:0,t.key=function(r){if(t.numKeys){var a="";a="s"in e.keyframes[r-1]?e.keyframes[r-1].s:"e"in e.keyframes[r-2]?e.keyframes[r-2].e:e.keyframes[r-2].s;var s="unidimensional"===i?new Number(a):Object.assign({},a);return s.time=e.keyframes[r-1].t/e.elem.comp.globalData.frameRate,s}return 0},t.valueAtTime=e.getValueAtTime,t.speedAtTime=e.getSpeedAtTime,t.velocityAtTime=e.getVelocityAtTime,t.propertyGroup=e.propertyGroup}function e(e){e&&"pv"in e||(e=a);var i=1/e.mult,r=e.pv*i,s=new Number(r);return s.value=r,t(s,e,"unidimensional"),function(){return e.k&&e.getValue(),r=e.v*i,s.value!==r&&(s=new Number(r),s.value=r,t(s,e,"unidimensional")),s}}function i(e){e&&"pv"in e||(e=s);var i=1/e.mult,r=e.pv.length,a=createTypedArray("float32",r),n=createTypedArray("float32",r);return a.value=n,t(a,e,"multidimensional"),function(){e.k&&e.getValue();for(var t=0;t<r;t+=1)a[t]=n[t]=e.v[t]*i;return a}}function r(){return a}var a={pv:0,v:0,mult:1},s={pv:[0,0,0],v:[0,0,0],mult:1};return function(t){return t?"unidimensional"===t.propType?e(t):i(t):r}}();!function(){var t=function(){function t(t,e){return this.textIndex=t+1,this.textTotal=e,this.v=this.getValue()*this.mult,this.v}return function(e,i){this.pv=1,this.comp=e.comp,this.elem=e,this.mult=.01,this.propType="textSelector",this.textTotal=i.totalChars,this.selectorValue=100,this.lastValue=[1,1,1],this.k=!0,this.x=!0,this.getValue=ExpressionManager.initiateExpression.bind(this)(e,i,this),this.getMult=t,this.getVelocityAtTime=expressionHelpers.getVelocityAtTime,this.kf?this.getValueAtTime=expressionHelpers.getValueAtTime.bind(this):this.getValueAtTime=expressionHelpers.getStaticValueAtTime.bind(this),this.setGroupProperty=expressionHelpers.setGroupProperty}}(),e=TextSelectorProp.getTextSelectorProp;TextSelectorProp.getTextSelectorProp=function(i,r,a){return 1===r.t?new t(i,r,a):e(i,r,a)}}(),extendPrototype([DynamicPropertyContainer],GroupEffect),GroupEffect.prototype.getValue=GroupEffect.prototype.iterateDynamicProperties,GroupEffect.prototype.init=function(t,e){this.data=t,this.effectElements=[],this.initDynamicPropertyContainer(e);var i,r,a=this.data.ef.length,s=this.data.ef;for(i=0;i<a;i+=1){switch(r=null,s[i].ty){case 0:r=new SliderEffect(s[i],e,this);break;case 1:r=new AngleEffect(s[i],e,this);break;case 2:r=new ColorEffect(s[i],e,this);break;case 3:r=new PointEffect(s[i],e,this);break;case 4:case 7:r=new CheckboxEffect(s[i],e,this);break;case 10:r=new LayerIndexEffect(s[i],e,this);break;case 11:r=new MaskIndexEffect(s[i],e,this);break;case 5:r=new EffectsManager(s[i],e,this);break;default:r=new NoValueEffect(s[i],e,this)}r&&this.effectElements.push(r)}};var lottiejs={},_isFrozen=!1;lottiejs.play=animationManager.play,lottiejs.pause=animationManager.pause,lottiejs.setLocationHref=setLocationHref,lottiejs.togglePause=animationManager.togglePause,lottiejs.setSpeed=animationManager.setSpeed,lottiejs.setDirection=animationManager.setDirection,lottiejs.stop=animationManager.stop,lottiejs.searchAnimations=searchAnimations,lottiejs.registerAnimation=animationManager.registerAnimation,lottiejs.loadAnimation=loadAnimation,lottiejs.setSubframeRendering=setSubframeRendering,lottiejs.resize=animationManager.resize,lottiejs.goToAndStop=animationManager.goToAndStop,lottiejs.destroy=animationManager.destroy,lottiejs.setQuality=setQuality,lottiejs.inBrowser=inBrowser,lottiejs.installPlugin=installPlugin,lottiejs.freeze=animationManager.freeze,lottiejs.unfreeze=animationManager.unfreeze,lottiejs.getRegisteredAnimations=animationManager.getRegisteredAnimations,lottiejs.__getFactory=getFactory,lottiejs.version="5.5.9";var standalone="__[STANDALONE]__",animationData="__[ANIMATIONDATA]__",renderer="";if(standalone){var scripts=document.getElementsByTagName("script"),index=scripts.length-1,myScript=scripts[index]||{src:""},queryString=myScript.src.replace(/^[^\?]+\??/,"");renderer=getQueryVariable("renderer")}var readyStateCheckInterval=setInterval(checkReady,100);return lottiejs})},function(t,e,i){"use strict";var r={linear:function(t,e,i,r){return(i-e)*t/r+e},easeInQuad:function(t,e,i,r){return(i-e)*(t/=r)*t+e},easeOutQuad:function(t,e,i,r){return-(i-e)*(t/=r)*(t-2)+e},easeInOutQuad:function(t,e,i,r){var a=i-e;return(t/=r/2)<1?a/2*t*t+e:-a/2*(--t*(t-2)-1)+e},easeInCubic:function(t,e,i,r){return(i-e)*(t/=r)*t*t+e},easeOutCubic:function(t,e,i,r){return(i-e)*((t=t/r-1)*t*t+1)+e},easeInOutCubic:function(t,e,i,r){var a=i-e;return(t/=r/2)<1?a/2*t*t*t+e:a/2*((t-=2)*t*t+2)+e},easeInQuart:function(t,e,i,r){return(i-e)*(t/=r)*t*t*t+e},easeOutQuart:function(t,e,i,r){return-(i-e)*((t=t/r-1)*t*t*t-1)+e},easeInOutQuart:function(t,e,i,r){var a=i-e;return(t/=r/2)<1?a/2*t*t*t*t+e:-a/2*((t-=2)*t*t*t-2)+e},easeInQuint:function(t,e,i,r){return(i-e)*(t/=r)*t*t*t*t+e},easeOutQuint:function(t,e,i,r){return(i-e)*((t=t/r-1)*t*t*t*t+1)+e},easeInOutQuint:function(t,e,i,r){var a=i-e;return(t/=r/2)<1?a/2*t*t*t*t*t+e:a/2*((t-=2)*t*t*t*t+2)+e},easeInSine:function(t,e,i,r){var a=i-e;return-a*Math.cos(t/r*(Math.PI/2))+a+e},easeOutSine:function(t,e,i,r){return(i-e)*Math.sin(t/r*(Math.PI/2))+e},easeInOutSine:function(t,e,i,r){return-(i-e)/2*(Math.cos(Math.PI*t/r)-1)+e},easeInExpo:function(t,e,i,r){var a=i-e;return 0==t?e:a*Math.pow(2,10*(t/r-1))+e},easeOutExpo:function(t,e,i,r){var a=i-e;return t==r?e+a:a*(1-Math.pow(2,-10*t/r))+e},easeInOutExpo:function(t,e,i,r){var a=i-e;return 0===t?e:t===r?e+a:(t/=r/2)<1?a/2*Math.pow(2,10*(t-1))+e:a/2*(2-Math.pow(2,-10*--t))+e},easeInCirc:function(t,e,i,r){return-(i-e)*(Math.sqrt(1-(t/=r)*t)-1)+e},easeOutCirc:function(t,e,i,r){return(i-e)*Math.sqrt(1-(t=t/r-1)*t)+e},easeInOutCirc:function(t,e,i,r){var a=i-e;return(t/=r/2)<1?-a/2*(Math.sqrt(1-t*t)-1)+e:a/2*(Math.sqrt(1-(t-=2)*t)+1)+e},easeInElastic:function(t,e,i,r){var a,s,n,o=i-e;return n=1.70158,s=0,a=o,0===t?e:1==(t/=r)?e+o:(s||(s=.3*r),a<Math.abs(o)?(a=o,n=s/4):n=s/(2*Math.PI)*Math.asin(o/a),-a*Math.pow(2,10*(t-=1))*Math.sin((t*r-n)*(2*Math.PI)/s)+e)},easeOutElastic:function(t,e,i,r){var a,s,n,o=i-e;return n=1.70158,s=0,a=o,0===t?e:1==(t/=r)?e+o:(s||(s=.3*r),a<Math.abs(o)?(a=o,n=s/4):n=s/(2*Math.PI)*Math.asin(o/a),a*Math.pow(2,-10*t)*Math.sin((t*r-n)*(2*Math.PI)/s)+o+e)},easeInOutElastic:function(t,e,i,r){var a,s,n,o=i-e;return n=1.70158,s=0,a=o,0===t?e:2==(t/=r/2)?e+o:(s||(s=r*(.3*1.5)),a<Math.abs(o)?(a=o,n=s/4):n=s/(2*Math.PI)*Math.asin(o/a),t<1?a*Math.pow(2,10*(t-=1))*Math.sin((t*r-n)*(2*Math.PI)/s)*-.5+e:a*Math.pow(2,-10*(t-=1))*Math.sin((t*r-n)*(2*Math.PI)/s)*.5+o+e)},easeInBack:function(t,e,i,r,a){var s=i-e;return void 0===a&&(a=1.70158),s*(t/=r)*t*((a+1)*t-a)+e},easeOutBack:function(t,e,i,r,a){var s=i-e;return void 0===a&&(a=1.70158),s*((t=t/r-1)*t*((a+1)*t+a)+1)+e},easeInOutBack:function(t,e,i,r,a){var s=i-e;return void 0===a&&(a=1.70158),(t/=r/2)<1?s/2*(t*t*((1+(a*=1.525))*t-a))+e:s/2*((t-=2)*t*((1+(a*=1.525))*t+a)+2)+e},easeInBounce:function(t,e,i,a){var s,n=i-e;return s=r.easeOutBounce(a-t,0,n,a),n-s+e},easeOutBounce:function(t,e,i,r){var a=i-e;return(t/=r)<1/2.75?a*(7.5625*t*t)+e:t<2/2.75?a*(7.5625*(t-=1.5/2.75)*t+.75)+e:t<2.5/2.75?a*(7.5625*(t-=2.25/2.75)*t+.9375)+e:a*(7.5625*(t-=2.625/2.75)*t+.984375)+e},easeInOutBounce:function(t,e,i,a){var s=i-e;return t<a/2?.5*r.easeInBounce(2*t,0,s,a)+e:.5*r.easeOutBounce(2*t-a,0,s,a)+.5*s+e}};t.exports=r},function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function n(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),h=function t(e,i,r){null===e&&(e=Function.prototype);var a=Object.getOwnPropertyDescriptor(e,i);if(void 0===a){var s=Object.getPrototypeOf(e);return null===s?void 0:t(s,i,r)}if("value"in a)return a.value;var n=a.get;if(void 0!==n)return n.call(r)},l=i(3),p=r(l),c=i(1),m=(r(c),i(0)),f=(r(m),i(12)),d=r(f),u=function(t){function e(){return a(this,e),s(this,(e.__proto__||Object.getPrototypeOf(e)).call(this))}return n(e,t),o(e,[{key:"init",value:function(t){h(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this,t),this.n="popper",this.bubblesObj={},this.bubbleCount=4,this.bubbleColorsArr=[{hex:"#1D73D3"},{hex:"#c1f8d7"},{hex:"#99e3e9"}],this.colors={light:"#99e3e9",bright:"#1D73D3",med:"#1153AD",dark:"#00032b"},this.bubblesAllGone=!1,this.alph=1,this.deadBubblesArr=[],this.initBubbles()}},{key:"start",value:function(){h(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"start",this).call(this),h(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"addCanvasClick",this).call(this)}},{key:"update",value:function(){if(this.bubblesAllGone)return void this.finished();this.drawDeadBubbles();var t=0,e=_App.context;for(var i in this.bubblesObj){t++;var r=this.bubblesObj[i];r.updatePosition(),e.fillStyle=r.color,e.beginPath(),e.arc(r.x,r.y,r.radius,0,2*Math.PI),e.fill()}t<=0&&(this.bubblesAllGone=!0),this.timer=requestAnimationFrame(this.update.bind(this))}},{key:"drawDeadBubbles",value:function(){var t=_App.context;t.fillStyle=this.colors.med,this.deadBubblesArr.forEach(function(e,i){t.beginPath(),t.arc(e.x,e.y,e.radius,0,2*Math.PI),t.fill()})}},{key:"clickHandler",value:function(t){h(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"clickHandler",this).call(this,t);for(var i in this.bubblesObj){var r=this.bubblesObj[i];if(this.checkIfClicked(this.mouse,r)){this.deadBubblesArr.push(Object.create(r)),delete this.bubblesObj[i],r="";break}}}},{key:"initBubbles",value:function(){for(var t=this.bubbleColorsArr.length,e=0;e<this.bubbleCount;e++){var i=Math.random()*_App.w,r=Math.random()*_App.h,a=this.bubbleColorsArr[e%t].hex,s=new d.default(e,i,r,a);this.bubblesObj[e]=s}}},{key:"endGame",value:function(){sectionManager.proceed()}},{key:"checkIfClicked",value:function(t,e){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))<e.radius}},{key:"kill",value:function(){h(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"kill",this).call(this),delete this.bubblesObj}}]),e}(p.default);e.default=u},function(t,e,i){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var a=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),s=function(){function t(e,i,a,s){r(this,t),this.pos=e,this.color=s,this.radius=_App.w/10,this.radius=Math.min(this.radius,40),this.direction=Math.random()*Math.PI*2,this.speed=2*Math.random()+1,this.n="bubble"+e,this.x=i,this.y=a}return a(t,[{key:"init",value:function(){console.log("Bubble SuperClass Initted")}},{key:"updatePosition",value:function(){this.x+=Math.cos(this.direction)*this.speed,this.y+=Math.sin(this.direction)*this.speed,this.x-this.radius<=0?(this.x=this.radius,this.direction=Math.atan2(Math.sin(this.direction),-1*Math.cos(this.direction))):this.x+this.radius>=_App.w&&(this.x=_App.w-this.radius,this.direction=Math.atan2(Math.sin(this.direction),-1*Math.cos(this.direction))),this.y-this.radius<=0?(this.y=this.radius,this.direction=Math.atan2(-1*Math.sin(this.direction),Math.cos(this.direction))):this.y+this.radius>=_App.h&&(this.y=_App.h-this.radius,this.direction=Math.atan2(-1*Math.sin(this.direction),Math.cos(this.direction)))}}]),t}();e.default=s},function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function n(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),h=function t(e,i,r){null===e&&(e=Function.prototype);var a=Object.getOwnPropertyDescriptor(e,i);if(void 0===a){var s=Object.getPrototypeOf(e);return null===s?void 0:t(s,i,r)}if("value"in a)return a.value;var n=a.get;if(void 0!==n)return n.call(r)},l=i(3),p=r(l),c=i(1),m=(r(c),i(0)),f=(r(m),function(t){function e(){return a(this,e),s(this,(e.__proto__||Object.getPrototypeOf(e)).call(this))}return n(e,t),o(e,[{key:"init",value:function(t){h(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this,t),this.n="delayedTap",this.interval=1,this.startTime="",this.game={isActive:!1,targetTime:3e3,curTime:0,elapsedTime:0,pctComplete:0,result:0,timer:{}},this.timerbar={width:.75*_App.w,maxWidth:375,height:10,x:0,y:0,pctBarWidth:0,tap1DisplayValue:"0",tap2DisplayValue:"0.0",message:{cur:"",win:"you did it!",toolate:"you took too long",tooearly:"nope, too early"}},this.colors={light:"#b55bfc",bright:"#ff0082",med:"#700089",dark:"#181546",grad:{a:"#ff0082",b:"#700089"}}}},{key:"start",value:function(){h(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"start",this).call(this),h(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"addCanvasClick",this).call(this),this.timerbar.width=Math.min(.75*_App.w,this.timerbar.maxWidth)}},{key:"update",value:function(){this.updateUI(),this.drawGame(),this.timer=requestAnimationFrame(this.update.bind(this))}},{key:"updateUI",value:function(){this.context.fillStyle=this.colors.light,this.context.beginPath(),this.timerbar.x=_App.w/2-this.timerbar.width/2,this.timerbar.y=_App.h/2-this.timerbar.height,this.context.rect(this.timerbar.x,this.timerbar.y,this.timerbar.width,this.timerbar.height),this.context.fill()}},{key:"updateGame",value:function(){var t=new Date;this.game.elapsedTime=t-this.startTime,this.game.pctComplete=this.game.elapsedTime/this.game.targetTime,this.timerbar.pctBarWidth=this.timerbar.width*this.game.pctComplete,this.game.pctComplete>=1&&this.endGame(!1)}},{key:"drawGame",value:function(){var t=this.context.createLinearGradient(this.timerbar.x,this.timerbar.y,this.timerbar.x+this.timerbar.width,this.timerbar.y);t.addColorStop("0",this.colors.grad.a),t.addColorStop("1",this.colors.grad.b),this.context.fillStyle=t,this.context.fillRect(_App.w/2-this.timerbar.pctBarWidth/2,this.timerbar.y,this.timerbar.width*this.game.pctComplete,this.timerbar.height),this.drawTextLabels()}},{key:"startGame",value:function(){this.game.isActive||(this.timerbar.message.cur="",this.game.curTime=0,this.game.result=0,this.game.isActive=!0,this.startTime=new Date,this.gameBinder=this.updateGame.bind(this),this.game.timer=setInterval(this.gameBinder,this.interval))}},{key:"endGame",value:function(t){this.game.isActive=!1,clearInterval(this.game.timer),t?(this.game.result=this.game.elapsedTime/1e3,this.game.targetTime/1e3-this.game.result<.5?(this.timerbar.message.cur=this.timerbar.message.win,this.finished()):this.timerbar.message.cur=this.timerbar.message.tooearly):(this.game.elapsedTime=this.game.targetTime,this.timerbar.tap2DisplayValue=this.game.elapsedTime/1e3+" sec",this.timerbar.message.cur=this.timerbar.message.toolate)}},{key:"clickHandler",value:function(t){h(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"clickHandler",this).call(this,t),this.game.isActive?this.endGame(!0):this.startGame()}},{key:"checkIfClicked",value:function(t,e){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))<e.radius}},{key:"kill",value:function(){h(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"kill",this).call(this),clearInterval(this.game.timer)}},{key:"drawTextLabels",value:function(){this.game.isActive&&(this.timerbar.tap1DisplayValue="0 sec",this.timerbar.tap2DisplayValue=this.game.elapsedTime/1e3+" sec"),this.context.fillStyle=this.colors.light,this.context.font="300 20px Roboto",this.context.save();var t="1st tap:";this.context.textAlign="right",this.context.fillText(t,_App.w/2-10,this.timerbar.y-40),t="2nd tap:",this.context.fillText(t,_App.w/2-10,this.timerbar.y-20),this.context.restore(),this.context.save(),this.context.textAlign="left",this.context.fillText(this.timerbar.tap1DisplayValue,_App.w/2+10,this.timerbar.y-40),this.context.fillText(this.timerbar.tap2DisplayValue,_App.w/2+10,this.timerbar.y-20),this.context.restore(),this.context.fillStyle=this.colors.bright,this.context.font="700 40px Roboto",this.context.textAlign="center",t=this.timerbar.tap2DisplayValue,t=t.substr(0,3),this.context.fillText(t,_App.w/2,this.timerbar.y+60),this.context.font="italic 200 14px Roboto",t=this.timerbar.message.cur,this.context.fillText(t,_App.w/2,this.timerbar.y-80)}}]),e}(p.default));e.default=f},function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function n(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),h=function t(e,i,r){null===e&&(e=Function.prototype);var a=Object.getOwnPropertyDescriptor(e,i);if(void 0===a){var s=Object.getPrototypeOf(e);return null===s?void 0:t(s,i,r)}if("value"in a)return a.value;var n=a.get;if(void 0!==n)return n.call(r)},l=i(3),p=r(l),c=i(1),m=(r(c),i(0)),f=(r(m),i(2)),d=r(f),u=function(t){function e(){return a(this,e),s(this,(e.__proto__||Object.getPrototypeOf(e)).call(this))}return n(e,t),o(e,[{key:"init",value:function(t){h(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this,t),this.n="keyboard",this.game={isActive:!1,timer:{}},this.startTime="",this.piano={maxWidth:350,maxHeight:325,maxKeyHeight:40,width:0,height:0,x:0,y:0,keyHeight:0,totalKeys:0,ivories:[{note:"C"},{note:"D"},{note:"E"},{note:"F"},{note:"G"},{note:"A"},{note:"B"}]},this.song={notes:["C","C","D","C","F","E"],lyrics:["Hap","-py","Birth","-day","to","you,"],curPos:0},this.piano.totalKeys=this.piano.ivories.length,this.colors={light:"#f5e5d5",bright:"#ff0076",med:"#f564b8",dark:"#744957",grad:{a:"#fcd4cb",b:"#fb3a8b"}}}},{key:"start",value:function(){h(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"start",this).call(this),h(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"addCanvasClick",this).call(this),this.piano.width=Math.min(this.piano.maxWidth,.75*_App.w),this.piano.height=Math.min(this.piano.maxHeight,.55*_App.h),this.createKeys()}},{key:"update",value:function(){this.piano.width=Math.min(this.piano.maxWidth,.75*_App.w),this.piano.height=Math.min(this.piano.maxHeight,.55*_App.h),this.piano.keyHeight=Math.min(this.piano.maxKeyHeight,.1*this.piano.height);var t=this.piano.keyHeight*this.piano.totalKeys,e=this.piano.height-t;this.piano.margin=e/(this.piano.totalKeys+1),this.updateKeys(),this.updateUI(),this.timer=requestAnimationFrame(this.update.bind(this))}},{key:"updateUI",value:function(){var t=this,e=this.piano;this.context.beginPath(),this.context.fillStyle=this.colors.light,e.x=_App.w/2-e.width/2,e.y=_App.h/2-e.height/2-40,this.context.rect(e.x,e.y,e.width,e.height),this.context.fill(),e.ivories.forEach(function(i){t.context.beginPath();var r="";r=t.context.createLinearGradient(e.x,e.y,e.x+e.width,e.y+e.height),r.addColorStop("0",t.colors.grad.a),r.addColorStop("1",t.colors.grad.b),t.context.fillStyle=r,t.context.fillRect(i.x,i.y,i.width,i.height),t.drawTextLabels(i)}),this.context.save(),this.context.font="700 20px Roboto",this.context.textBaseline="middle",this.context.textAlign="center";for(var i=this.piano.y+this.piano.height+30,r=0;r<this.song.lyrics.length;r++){var a=this.piano.x+this.piano.margin,s=this.song.lyrics[r];a+=60*r,r<this.song.curPos?this.context.fillStyle=this.colors.light:this.context.fillStyle=this.colors.bright,this.context.fillText(s,a,i)}this.context.restore()}},{key:"updateKeys",value:function(){var t=this.piano;t.ivories.forEach(function(e){e.x=t.x+t.margin,e.y=t.y+(t.keyHeight+t.margin)*e.i+t.margin,e.width=t.width-2*t.margin,e.height=t.keyHeight})}},{key:"createKeys",value:function(){var t=0;this.piano.ivories.reverse().forEach(function(e){e.i=t,e.gradObj="",t++})}},{key:"clickHandler",value:function(t){var i=this;h(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"clickHandler",this).call(this,t),this.piano.ivories.forEach(function(t){i.checkIfClicked(i.mouse,t)&&i.checkIfCorrect(t)})}},{key:"checkIfCorrect",value:function(t){if(t.note===this.song.notes[this.song.curPos]){if(++this.song.curPos>this.song.notes.length)return void(this.song.curPos=0);this.song.curPos==this.song.notes.length&&d.default.proceed()}else this.song.curPos=0}},{key:"checkIfClicked",value:function(t,e){return t.x>e.x&&t.x<e.x+e.width&&t.y>e.y&&t.y<e.y+e.height}},{key:"kill",value:function(){h(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"kill",this).call(this)}},{key:"drawTextLabels",value:function(t){this.context.save(),this.context.fillStyle=this.colors.light,this.context.font="700 20px Roboto";var e=t.note,i=t.x+t.width/2,r=t.y+t.height/2;this.context.textBaseline="middle",this.context.textAlign="center",this.context.fillText(e,i,r),this.context.restore()}}]),e}(p.default);e.default=u},function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function n(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),h=function t(e,i,r){null===e&&(e=Function.prototype);var a=Object.getOwnPropertyDescriptor(e,i);if(void 0===a){var s=Object.getPrototypeOf(e);return null===s?void 0:t(s,i,r)}if("value"in a)return a.value;var n=a.get;if(void 0!==n)return n.call(r)},l=i(3),p=r(l),c=i(1),m=(r(c),i(0)),f=(r(m),i(2)),d=(r(f),function(t){function e(){return a(this,e),s(this,(e.__proto__||Object.getPrototypeOf(e)).call(this))}return n(e,t),o(e,[{key:"init",value:function(t){h(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this,t),this.n="shaker",this.colors={light:"#fecc45",bright:"#fb970c",med:"#6c6555",dark:"#6c6555",grad:{a:"#f9debd",b:"#c46c14"}}}},{key:"start",value:function(){h(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"start",this).call(this),h(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"addCanvasClick",this).call(this),console.log("start in ",this.n)}},{key:"clickHandler",value:function(t){t.preventDefault()}},{key:"update",value:function(){var t=this.context.createLinearGradient(_App.w/2-100,_App.h/2-100,_App.w/2+100,_App.h/2+100);t.addColorStop("0",this.colors.grad.a),t.addColorStop("1",this.colors.grad.b),this.context.fillStyle=t;var e=_App.w/2,i=_App.h/2;this.context.save(),this.context.textBaseline="middle",this.context.textAlign="center",this.context.font="700 20px Roboto",this.context.fillText(this.n.toUpperCase()+" section",e,i),this.context.restore(),this.timer=requestAnimationFrame(this.update.bind(this))}}]),e}(p.default));e.default=d},function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function n(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),h=function t(e,i,r){null===e&&(e=Function.prototype);var a=Object.getOwnPropertyDescriptor(e,i);if(void 0===a){var s=Object.getPrototypeOf(e);return null===s?void 0:t(s,i,r)}if("value"in a)return a.value;var n=a.get;if(void 0!==n)return n.call(r)},l=i(4),p=r(l),c=i(0),m=(r(c),function(t){function e(){return a(this,e),s(this,(e.__proto__||Object.getPrototypeOf(e)).call(this))}return n(e,t),o(e,[{key:"init",value:function(){h(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this);var t={v:"5.1.15",fr:30,ip:0,op:30,w:900,h:645,nm:"canyon",ddd:0,assets:[],layers:[{ddd:0,ind:1,ty:4,nm:"junk Outlines",sr:1,ks:{o:{a:0,k:100,ix:11},r:{a:0,k:0,ix:10},p:{a:0,k:[450,322.5,0],ix:2},a:{a:0,k:[319,322,0],ix:1},s:{a:0,k:[90,90,100],ix:6}},ao:0,shapes:[{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[-.439,-1.558],[.455,-.239],[.083,-.653],[-.037,-.447],[-.205,-1.211],[-.376,-1.977],[-.536,-.216],[-.095,.367],[-.488,1.937],[-.263,.246],[-1.016,.887],[-1.051,-.754],[-.647,-.359],[-.406,.445],[1.562,.832],[1.071,.676],[-.44,.571],[1.311,1.005],[.277,.155],[.633,-.653],[.474,.359],[1.018,-.944]],o:[[-.452,.281],[-.568,.299],[-.058,.453],[.102,1.226],[.353,2.08],[.501,.201],[.205,-.308],[.498,-1.934],[.089,-.351],[.919,-.859],[1.129,.229],[.599,.43],[.535,.297],[1.171,-1.291],[-1.117,-.594],[-.469,-.296],[-1.367,-1.066],[-.249,-.191],[-.651,-.364],[-.539,-.395],[-1.045,-.793],[1.181,.991]],v:[[19.086,24.662],[17.755,25.479],[16.712,26.843],[16.579,28.203],[17.003,31.87],[18.156,37.994],[19.589,38.57],[20.221,37.589],[21.629,31.766],[22.193,30.798],[25.094,28.244],[28.439,29.678],[30.327,30.843],[31.751,30.579],[31.318,28.351],[28.049,26.413],[27.685,25.125],[23.71,22.032],[22.883,21.563],[20.949,21.698],[19.452,20.598],[16.898,20.777]],c:!0},ix:2},nm:"p 1",mn:"ADBE",hd:!1},{ind:1,ty:"sh",ix:2,ks:{a:0,k:{i:[[.625,.44],[-.045,1.106],[-.616,-.2],[-.11,-.242],[-.199,-1.136],[.552,-.486]],o:[[-1.017,-.716],[.026,-.638],[.279,.091],[.462,1.012],[.079,.451],[-.68,-.413]],v:[[60.648,38.346],[59.572,35.417],[60.79,34.631],[61.528,35.159],[62.954,38.176],[62.633,39.562]],c:!0},ix:2},nm:"p 2",mn:"ADBE",hd:!1},{ind:2,ty:"sh",ix:3,ks:{a:0,k:{i:[[-.97,-.29],[-.443,-.273],[-.766,-.504],[-.741,.774],[-.174,.339],[.774,.363],[.948,.536],[.314,.783],[-.017,.374],[-.965,.939],[-.905,.196],[-.395,.143],[-.459,.226],[.84,.191],[2.015,-.046],[.728,-.391],[-.112,-1.044],[-.008,-.489],[.768,.236],[.473,.23],[1.069,-.972],[-.258,-1.069],[.277,-.019],[-.033,-.69],[-.211,-.285],[-1.266,-1.458],[-1.229,-.53],[-1.478,1.685]],o:[[.496,.148],[.779,.48],[.875,.576],[.264,-.276],[.389,-.755],[-.988,-.464],[-.682,-.387],[.114,-.431],[.057,-1.224],[.688,-.669],[.413,-.089],[.404,-.147],[-.722,-.842],[-1.968,-.447],[-.825,.019],[-.913,.491],[.053,.489],[.012,.803],[-.497,-.154],[-1.211,-.59],[.846,.526],[-.37,0],[-.69,.047],[.018,.375],[1.15,1.554],[.711,.819],[-.676,-1.72],[.957,.24]],v:[[63.137,44.097],[64.558,44.757],[66.842,46.286],[68.751,46.06],[69.432,45.129],[68.965,43.856],[66.021,42.426],[64.198,40.998],[64.493,39.826],[65.811,36.657],[68.042,35.303],[69.271,35],[70.51,34.401],[68.075,33.178],[62.089,32.654],[59.758,33.246],[58.719,35.221],[58.889,36.687],[57.84,37.491],[56.417,36.81],[54.017,37.211],[55.792,39.466],[54.867,39.469],[53.859,40.551],[54.146,41.653],[57.708,46.231],[60.536,48.277],[60.217,43.351]],c:!0},ix:2},nm:"p 3",mn:"ADBE",hd:!1},{ind:3,ty:"sh",ix:4,ks:{a:0,k:{i:[[.022,.189],[.122,.849],[-1.209,.327],[-1.094,-.779],[-1.179,-.115],[-.277,.103],[.105,.206],[.165,.117],[.18,.105],[.804,1.159],[.015,.112],[-.291,.042],[-.175,.53],[-.23,.076],[-1.498,.329],[-.64,.567],[-.267,.483],[2.773,.212],[.622,-.099],[.083,-1.201],[.022,-.139],[1.031,.032],[.604,.24],[.752,-1.125],[-.633,-1.05],[.502,-.1],[.022,-.763],[-.21,-.417],[-.73,-1.116],[-.515,-.477],[-.194,-.054],[-.495,-.099]],o:[[-.097,-.852],[-.178,-1.245],[1.311,-.355],[.913,.65],[.288,.028],[.211,-.078],[-.092,-.18],[-.168,-.119],[-1.145,-.668],[-.047,-.068],[.301,-.044],[.136,-.59],[.092,-.276],[1.459,-.48],[.674,-.149],[-.501,-.128],[-2.821,-.244],[-.626,-.048],[-1.161,.184],[-.009,.14],[-.164,1.031],[-.649,-.021],[-1.217,-.482],[.88,.513],[-.648,.107],[-.756,.152],[-.013,.477],[.599,1.193],[.375,.574],[.146,.135],[.352,.096],[.026,-.227]],v:[[24.691,-34.315],[24.359,-36.868],[25.725,-38.952],[29.312,-38.26],[32.273,-36.743],[33.155,-36.895],[33.814,-38.881],[33.408,-39.347],[32.829,-39.598],[29.564,-41.849],[29.519,-42.141],[30.377,-42.265],[30.777,-43.942],[31.29,-44.67],[35.715,-45.958],[37.668,-46.751],[37.133,-47.546],[28.771,-48.259],[26.876,-48.154],[25.495,-46.578],[25.456,-46.157],[23.939,-44.816],[22.008,-45.21],[19.833,-44.547],[22.128,-42.359],[20.469,-42.082],[19.165,-40.634],[19.421,-39.206],[21.389,-35.717],[22.872,-34.23],[23.419,-33.949],[24.628,-33.7]],c:!0},ix:2},nm:"p 4",mn:"ADBE",hd:!1},{ind:4,ty:"sh",ix:5,ks:{a:0,k:{i:[[.133,-.031],[-.243,-1.555],[-.508,-1.38],[-.487,-.815],[-.089,.042],[-.163,-.192],[-.242,-.346],[.028,.288],[-.645,1.342],[-.293,.388],[-.391,-.105],[-1.306,-1.155],[-1.188,.823],[.128,.94],[.525,.202],[1.285,.57],[-.298,.622],[-.441,.758],[-.349,.154],[-1.044,.282],[-.733,.093],[-.535,.101],[.468,.315],[-.398,.143],[.411,.063],[2.376,.301],[.899,-.38],[.144,-.79],[.277,-.601],[.846,.423],[.358,.224],[.735,-.979],[-.375,-1.076]],o:[[-1.52,.349],[.226,1.445],[.325,.879],[.091,.153],[.404,-.192],[.171,.202],[.104,-.458],[-.146,-1.532],[.209,-.434],[.245,-.326],[1.714,.459],[1.089,.965],[.761,-.526],[-.116,-.846],[-1.312,-.507],[-.62,-.275],[.38,-.792],[.205,-.354],[.99,-.435],[.705,-.19],[.365,-.046],[-.528,-.356],[.416,-.149],[-.595,-.195],[-2.367,-.363],[-.952,-.121],[-.702,.297],[-.118,.65],[-.392,.846],[-.376,-.187],[-.958,-.598],[.824,.656],[-.247,.083]],v:[[-3.868,17.903],[-5.456,20.062],[-4.242,24.308],[-2.863,26.794],[-2.398,27.111],[-1.74,27.444],[-1.188,28.223],[-.964,27.173],[-.005,22.909],[.812,21.7],[1.753,21.505],[6.21,24.046],[9.426,24.293],[10.335,22.085],[9.003,21.14],[5.081,19.583],[4.741,18.481],[5.945,16.138],[6.785,15.224],[9.846,14.13],[12.044,13.864],[13.303,13.631],[11.963,12.728],[12.995,12.357],[11.598,11.909],[4.484,10.883],[1.691,11.331],[.411,12.872],[-.206,14.77],[-1.919,15.328],[-2.986,14.646],[-4.984,15.092],[-3.361,17.735]],c:!0},ix:2},nm:"p 5",mn:"ADBE",hd:!1},{ind:5,ty:"sh",ix:6,ks:{a:0,k:{i:[[1.467,-1.023],[1.398,-.95],[.327,-.768],[.414,-.563],[.815,.455],[.279,.148],[.592,-.958],[-.248,-1.15],[.728,-.253],[.414,-.345],[.676,-1.762],[-.186,-.309],[-1.067,.589],[-.207,.286],[-.691,-.575],[-.161,-.024],[-.103,.27],[-.15,.927],[-.65,.439],[-.234,.004],[-.708,-.745],[-.896,-.899],[-.431,.19],[-.405,1.128],[1.095,.374],[1.199,.415],[.279,.594],[-.087,.109],[-.634,1.63],[-.287,.587],[-.505,.874],[.08,.699],[-.132,.148],[-.231,.265],[.44,.538]],o:[[-1.387,.966],[-.705,.48],[-.274,.641],[-.554,.751],[-.276,-.155],[-.966,-.512],[.666,.753],[-.632,.464],[-.526,.183],[-1.486,1.237],[.218,.362],[1.228,.091],[.328,-.181],[.557,-.771],[.066,.055],[.11,-.285],[1.615,.269],[.751,.398],[.188,-.127],[.99,-.017],[.874,.92],[.314,.315],[1.189,-.522],[.397,-1.101],[-1.2,-.409],[-.569,-.197],[.114,-.143],[1.063,-1.344],[.239,-.613],[.441,-.907],[.311,-.54],[-.018,-.158],[.235,-.262],[.393,-.452],[-1.475,1.02]],v:[[-31.024,19.426],[-35.178,22.335],[-36.615,24.239],[-37.676,26.057],[-39.934,26.494],[-40.738,25.985],[-42.762,26.576],[-40.923,29.029],[-43.018,29.965],[-44.536,30.665],[-47.763,35.22],[-47.184,36.183],[-43.75,35.401],[-42.826,34.768],[-41.613,34.551],[-41.258,34.611],[-40.94,33.782],[-38.975,33.059],[-36.906,32.801],[-36.214,32.617],[-33.653,33.642],[-30.96,36.334],[-29.926,36.486],[-27.679,33.855],[-28.508,32.257],[-32.105,31.014],[-33.472,29.964],[-33.186,29.602],[-30.324,25.349],[-29.665,23.489],[-28.197,20.84],[-27.554,19.116],[-27.255,18.606],[-26.507,17.858],[-26.609,16.37]],c:!0},ix:2},nm:"p 6",mn:"ADBE",hd:!1},{ind:6,ty:"sh",ix:7,ks:{a:0,k:{i:[[-.683,1.778],[-.161,.387],[-.317,.913],[-.263,.925],[.167,.995],[.295,-.384],[1.63,-1.407],[.5,-1.74],[.167,-.27],[1.043,.464],[.261,.18],[.647,-1.067],[-.531,-1.227],[.699,-.39],[.56,-.819],[1.259,-1.916],[.055,-.373],[-1.73,.746],[-.439,.873],[-.094,.032],[-1.271,.929],[-1.01,-1.084],[-.692,-.703],[-.257,-.206],[-.248,1.796],[1.607,1.662]],o:[[.15,-.392],[.371,-.895],[.315,-.907],[.245,-.861],[-.494,.318],[-1.326,1.723],[-1.279,1.104],[-.085,.296],[-.61,.988],[-.287,-.127],[-.991,-.682],[.926,.821],[-.696,.493],[-.892,.499],[-1.293,1.892],[-.091,.138],[1.909,-.775],[.819,-.353],[.035,-.071],[1.502,-.513],[1.17,-.856],[.673,.723],[.265,.268],[1.661,-.7],[-1.877,-1.016],[1.421,-1.492]],v:[[32.055,-8.674],[32.51,-9.847],[33.622,-12.531],[34.405,-15.307],[34.639,-18.027],[33.303,-17.137],[28.71,-12.619],[25.59,-8.71],[25.118,-7.886],[22.497,-7.04],[21.699,-7.554],[19.823,-7.116],[21.992,-4.092],[19.973,-2.682],[17.833,-.672],[14.021,5.05],[13.904,5.779],[19.301,3.576],[21.387,1.956],[21.652,1.823],[25.751,-.447],[28.902,-.111],[30.939,2.039],[31.783,2.723],[34.792,-.814],[29.081,-3.734]],c:!0},ix:2},nm:"p 7",mn:"ADBE",hd:!1},{ind:7,ty:"sh",ix:8,ks:{a:0,k:{i:[[.873,-1.414],[.409,-1.601],[.271,-.909],[1.014,.625],[.423,.157],[.688,-1.052],[-.665,-1.189],[.505,-.224],[.654,-.887],[.825,-1.186],[-.266,-.378],[-.386,.047],[-.17,.043],[-.96,.304],[-1.01,.444],[-.397,.125],[-.77,.73],[-.18,-.041],[-.568,-.646],[-.714,-.744],[.368,1.83],[1.632,1.885],[-.23,.392],[-.168,1.195],[-.242,1.463],[.011,.635],[-.048,1.292],[.068,.608],[.317,.021],[.878,-.526],[.076,.262]],o:[[-.851,1.377],[-.235,.918],[-.302,1.015],[-.388,-.239],[-1.028,-.383],[1.286,.594],[-.558,.348],[-1.039,.46],[-.856,1.163],[-.229,.33],[.264,.374],[.17,-.021],[.978,-.246],[1.051,-.334],[.395,-.174],[1.044,-.327],[.158,-.151],[.743,.169],[.692,.786],[3.045,-.45],[-2.276,-.635],[.534,-.29],[.631,-1.081],[.213,-1.511],[.104,-.631],[-.024,-1.285],[.027,-.732],[-.436,-.029],[-.48,.648],[-.088,-.302],[-.494,1.64]],v:[[-29.625,-2.388],[-31.714,1.984],[-32.581,4.695],[-34.758,5.41],[-35.959,4.755],[-37.97,5.555],[-35.602,8.586],[-37.111,9.513],[-39.591,11.603],[-42.08,15.151],[-42.215,16.22],[-41.15,16.493],[-40.65,16.331],[-37.717,15.59],[-34.622,14.409],[-33.564,13.609],[-30.939,11.925],[-30.32,11.651],[-28.227,12.54],[-26.068,14.802],[-22.423,11.724],[-28.518,8.313],[-27.089,7.493],[-25.559,4.07],[-24.335,-.199],[-24.13,-2.108],[-24.234,-5.964],[-24.449,-8.043],[-25.479,-8.111],[-27.217,-6.091],[-27.447,-6.876]],c:!0},ix:2},nm:"p 8",mn:"ADBE",hd:!1},{ind:8,ty:"sh",ix:9,ks:{a:0,k:{i:[[-.986,.917],[-.133,.034],[-1.509,.93],[-.808,1.637],[-.394,-.176],[-.478,-.347],[-.853,-.624],[-.184,.119],[-.544,.541],[.185,.78],[.472,.184],[.136,.034],[.803,.261],[.211,.6],[-.387,.816],[-.281,.864],[-.287,1.126],[-.092,.753],[-.298,.388],[-.335,.835],[-.061,.483],[.494,-.183],[1.408,-1.759],[.567,-2.045],[.271,-.453],[1.297,.956],[.849,-.907],[-.779,-1.038],[.26,-.249],[.613,-.581],[.458,-.609],[1.176,-1.67],[.039,-.074],[-.136,-.449]],o:[[.097,-.09],[1.737,-.431],[1.447,-.893],[.219,-.445],[.542,.243],[.854,.621],[.249,.182],[.643,-.413],[.657,-.654],[-.147,-.62],[-.13,-.05],[-.822,-.204],[-.531,-.173],[.518,-.853],[.387,-.817],[.359,-1.106],[.187,-.732],[.07,-.578],[.621,-.808],[.184,-.46],[-.475,.177],[-1.39,1.649],[-1.272,1.59],[-.138,.497],[-.824,1.378],[-1.08,-.796],[.788,1.058],[.24,.32],[-.611,.583],[-.561,.53],[-1.226,1.632],[-.059,.085],[.087,.288],[1.211,-.509]],v:[[-83.589,26.949],[-83.215,26.77],[-78.314,24.737],[-74.503,21.368],[-73.544,21.004],[-71.976,21.857],[-69.481,23.816],[-68.559,24.065],[-66.779,22.602],[-66.426,20.3],[-67.76,19.622],[-68.173,19.529],[-70.632,18.899],[-72.029,18.062],[-70.587,15.649],[-69.664,13.086],[-68.651,9.747],[-68.308,7.497],[-68.118,5.79],[-67.417,3.195],[-67.206,1.705],[-68.621,2.23],[-72.905,7.335],[-76.118,12.505],[-76.846,13.909],[-80.317,14.59],[-82.464,14.722],[-80.123,17.861],[-80.224,18.702],[-82.064,20.444],[-83.731,22.049],[-87.278,27.045],[-87.416,27.301],[-87.113,28.302]],c:!0},ix:2},nm:"p 9",mn:"ADBE",hd:!1},{ind:9,ty:"sh",ix:10,ks:{a:0,k:{i:[[-1.507,1.417],[-1.128,.595],[.052,-.242],[.133,-1.022],[.46,-.809],[.125,-.281],[.064,-.671],[.583,-.738],[.548,-.794],[-.845,-.331],[-.941,-.4],[.762,-.969],[.095,-.143],[1.02,.747],[.762,.51],[.839,.034],[.274,-.704],[.843,-.861],[.262,-.4],[.893,-.642],[.243,-.243],[.537,-.698],[.535,-.349],[-.038,.341],[1.029,-.312],[-.648,2.518],[-.708,.874],[1.642,2.021],[.339,.306],[-1.189,-.628],[-.922,1.941],[-.037,.169],[-1.239,1.134]],o:[[.7,.254],[.05,.293],[-.219,1.014],[-.118,.906],[-.151,.267],[-.249,.56],[-.087,.904],[-.555,.702],[.506,.622],[.952,.374],[1.134,.482],[-.107,.136],[-.693,1.051],[-.74,-.541],[-.662,-.442],[-.274,.755],[-.439,1.13],[-.328,.335],[-.588,.897],[-.277,.199],[-.606,.605],[-.274,.356],[.075,-.492],[.106,-.941],[1.137,-2.433],[.278,-1.076],[1.638,-2.02],[-.284,-.349],[.82,-1.082],[1.871,.989],[.076,-.16],[.379,-1.716],[1.508,-1.377]],v:[[84.352,-3.643],[86.18,-3.984],[86.305,-3.167],[85.586,-.143],[84.923,2.458],[84.508,3.281],[83.818,4.992],[82.773,7.463],[81.197,9.726],[83.195,11.245],[86.036,12.402],[86.655,14.862],[86.339,15.273],[83.883,15.715],[81.667,14.085],[79.508,13.112],[78.717,15.287],[76.712,18.21],[75.924,19.407],[73.859,21.842],[73.112,22.551],[71.23,24.304],[69.918,25.189],[70.096,24.018],[68.967,23.232],[71.117,15.685],[72.555,12.774],[72.532,7.567],[71.523,6.644],[73.887,6.109],[76.892,5.084],[77.109,4.602],[79.866,.568]],c:!0},ix:2},nm:"p 10",mn:"ADBE",hd:!1},{ty:"fl",c:{a:0,k:[.195999998205,.016000001571,.054999998504,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"Fill",hd:!1},{ty:"tr",p:{a:0,k:[166.832,48.277],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"birds",np:11,cix:2,ix:1,mn:"Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,123.734],[55.299,57.362],[4.652,-25.132],[.4,-2.284],[.476,-2.566],[.298,-1.278],[20.092,-8.299],[1.531,-1.536],[12.866,-22.426],[.847,-1.917],[3.459,-5.483],[.815,-1.46],[.834,-1.459],[11.041,-14.057],[1.044,-1.852],[.844,-1.572],[.754,-1.612],[-2.192,-13.677],[-.138,-1.367],[2.321,-3.097],[6.251,-5.004],[1.126,-.863],[-8.9,-19.084],[0,0],[-8.561,-2.842],[-2.442,-.796],[-15.688,-2.731]],o:[[0,-85.969],[.681,25.872],[-.375,2.213],[-.45,2.57],[-.239,1.284],[-9.722,16.14],[-1.895,1.264],[-18.38,18.445],[-.774,1.942],[-2.542,5.751],[-.83,1.44],[-.817,1.449],[-8.13,15.636],[-.975,1.827],[-.87,1.543],[-.846,1.572],[-7.168,12.89],[.15,1.358],[1.533,15.04],[-3.751,5.002],[-1.042,.833],[-21.892,9.682],[.351,2.424],[0,0],[2.14,.711],[14.354,6.296],[102.98,-52.895]],v:[[124.462,-31.28],[35.141,-252.625],[28.691,-176.439],[27.528,-169.671],[26.138,-161.967],[25.358,-158.122],[-.077,-108.04],[-5.207,-103.833],[-30.02,-25.756],[-32.447,-19.967],[-41.355,-3.097],[-43.815,1.252],[-46.282,5.62],[-69.206,52.2],[-72.262,57.714],[-74.85,62.384],[-77.266,67.157],[-78.489,108.734],[-78.055,112.826],[-78.052,146.031],[-98.055,175.426],[-101.318,177.939],[-115.561,227.97],[-114.932,231.714],[-100.67,236.558],[-93.769,238.828],[-48.975,252.625]],c:!0},ix:2},nm:"p 1",mn:"ADBE",hd:!1},{ty:"fl",c:{a:0,k:[.760999971278,.165000002992,.258999992819,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"Fill",hd:!1},{ty:"tr",p:{a:0,k:[513.481,356.309],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 2",np:2,cix:2,ix:2,mn:"Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,-91.756],[-103.727,-52.645],[-3.973,1.016],[0,0],[2.502,17.511],[6.254,5.003],[3.753,5.002],[-2.502,16.886],[10.008,9.382],[0,4.378],[0,0],[0,3.127],[0,0],[0,0],[0,0],[-1.876,14.385],[.684,10.846]],o:[[0,124.283],[3.933,-.503],[26.893,-6.88],[0,0],[-2.502,-17.513],[-6.255,-5.004],[-3.752,-5.004],[2.501,-16.887],[-10.006,-9.38],[0,-4.378],[0,0],[0,-3.127],[0,0],[0,0],[0,0],[1.223,-9.373],[-62.02,58.192]],v:[[-125.868,-25.98],[48.945,258.62],[60.824,256.404],[110.859,237.014],[123.367,207.62],[106.48,180.727],[86.465,151.331],[89.594,93.165],[63.324,39.378],[47.064,-.025],[28.926,-23.165],[23.923,-62.568],[1.406,-90.712],[-11.727,-118.857],[-19.857,-175.772],[-24.861,-225.18],[-25.092,-258.62]],c:!0},ix:2},nm:"p 1",mn:"ADBE",hd:!1},{ty:"fl",c:{a:0,k:[.760999971278,.165000002992,.258999992819,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"Fill",hd:!1},{ty:"tr",p:{a:0,k:[125.868,351.009],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 3",np:2,cix:2,ix:3,mn:"Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[0,0],[5.004,-.626],[16.887,-5.629],[3.349,.142],[1.753,-.356],[1.409,-.482],[1.016,-.704],[2.502,-14.385],[-1.251,0],[.156,-9.517],[.349,-1.836],[2.502,-17.512],[.431,-2.241],[.596,-2.172],[1.385,-3.71],[.756,-1.829],[.765,-2.035],[.777,-1.944],[-9.381,-1.251],[1.369,-12.461],[.078,-1.993],[0,-11.884],[6.126,-13.888],[1.25,-1.563],[3.131,-16.47],[.219,-1.895],[-23.345,-13.44],[-.729,-1.16],[2.113,-4.802],[.517,-1.545],[-1.459,-2.71],[-18.75,-1.079],[-2.702,-.251],[0,0],[5.29,127.216],[.077,1.559],[1.46,14.151],[.434,1.805],[1.876,5.316],[-1.105,3.728]],o:[[-1.55,.983],[0,0],[-5.003,.625],[-2.966,.989],[-2.003,.043],[-1.736,.402],[-1.61,.553],[-9.794,8.756],[-.625,.626],[-8.86,5.734],[-.031,1.905],[-3.534,17.832],[-.25,2.314],[-.43,2.241],[-1.136,3.804],[-.693,1.855],[-.42,2.238],[-.702,2.067],[-2.36,13.026],[-8.13,8.131],[-.285,1.942],[-.469,11.962],[-.626,15.011],[-.914,1.711],[-11.821,12.383],[-.348,1.83],[-8.446,15.452],[.971,1.057],[2.186,3.48],[-.685,1.64],[-1.036,3.089],[8.756,16.262],[2.352,.233],[27.017,2.507],[0,0],[-.074,-1.571],[-1.673,-14.198],[-.329,-1.83],[-1.299,-5.415],[-1.25,-3.753],[.484,-3.155]],v:[[109.583,-218.067],[98.895,-237.588],[83.967,-237.977],[47.692,-218.589],[39.339,-221.232],[33.694,-220.529],[28.946,-219.21],[24.963,-217.338],[-3.594,-188.568],[-2.968,-184.816],[-7.676,-162.616],[-8.191,-156.991],[-21.731,-104.76],[-22.756,-97.928],[-24.298,-91.31],[-28.078,-80.035],[-30.251,-74.508],[-32.048,-68.11],[-34.381,-62.122],[-27.36,-34.712],[-49.368,-7.24],[-49.876,-1.329],[-49.25,34.712],[-60.38,77.369],[-63.635,82.245],[-86.861,125.001],[-87.712,130.587],[-92.827,180.744],[-90.249,184.063],[-89.346,196.34],[-91.231,201.115],[-91.154,209.833],[-41.758,232.177],[-34.15,232.905],[34.964,238.603],[110.882,-89.62],[110.657,-94.314],[108.149,-137.049],[107,-142.5],[102.104,-158.547],[102.584,-170.406]],c:!0},ix:2},nm:"p 1",mn:"ADBE",hd:!1},{ty:"fl",c:{a:0,k:[.596000043084,.086000001197,.219999994016,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"Fill",hd:!1},{ty:"tr",p:{a:0,k:[446.4,339.727],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 4",np:2,cix:2,ix:4,mn:"Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[8.13,13.134],[1.251,16.261],[5.629,17.512],[5.628,10.007],[13.134,8.13],[1.251,8.756],[8.131,5.629],[6.254,6.88],[6.009,.144],[7.122,-9.46],[0,0],[-25.994,-21.551],[0,0],[-8.13,1.876],[-6.88,1.876],[.626,15.01],[-1.876,8.755],[3.753,15.011]],o:[[-8.131,-13.134],[-1.251,-16.262],[-5.629,-17.512],[-5.629,-10.007],[-13.134,-8.131],[-1.251,-8.757],[-8.131,-5.629],[-2.321,-2.552],[-8.108,8.6],[0,0],[18.076,28.677],[0,0],[0,0],[8.131,-1.877],[6.879,-1.876],[-.625,-15.01],[1.876,-8.756],[-3.752,-15.009]],v:[[62.774,84.675],[64.65,10.875],[48.389,-49.793],[27.75,-123.594],[5.234,-186.137],[3.983,-194.892],[-14.78,-219.91],[-59.185,-232.419],[-73.023,-236.03],[-95.891,-208.926],[-110.932,152.566],[-44.356,228.398],[-24.787,236.03],[65.901,227.901],[90.919,209.763],[95.296,184.12],[109.056,167.233],[94.045,115.947]],c:!0},ix:2},nm:"p 1",mn:"ADBE",hd:!1},{ty:"fl",c:{a:0,k:[.596000043084,.086000001197,.219999994016,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"Fill",hd:!1},{ty:"tr",p:{a:0,k:[159.88,342.299],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 5",np:2,cix:2,ix:5,mn:"Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[9.956,-3.191],[1.59,-.804],[7.91,-22.85],[.551,-2.147],[3.441,-15.288],[.567,-2.174],[1.839,-4.24],[.942,-2.107],[1.094,-2.085],[-.625,-4.379],[-.386,-2.055],[-.258,-2.024],[-11.258,-14.385],[1.336,-7.203],[.49,-1.622],[7.659,-8.338],[1.707,-1.385],[1.251,-1.876],[6.254,-11.884],[-4.612,-2.754],[-1.615,-.621],[-8.109,.061],[-1.766,.094],[-8.142,-1.276],[-1.758,-.032],[0,0],[0,0],[9.769,39.399],[.367,1.483],[.532,2.261],[.531,2.325],[6.541,26.199],[.605,2.178],[3.789,8.402],[.835,1.948],[1.754,8.433],[.355,1.427],[.303,1.22],[.433,1.61]],o:[[-10.538,-.472],[-1.66,.532],[-23.299,9.606],[-.72,2.083],[-2.766,15.531],[-.478,2.192],[-1.019,4.282],[-.81,2.128],[-.939,2.11],[-1.876,4.378],[.521,2.084],[.385,2.055],[3.309,15.816],[5.004,6.254],[-.459,1.639],[-3.445,11.233],[-1.459,1.588],[-1.43,1.617],[-6.88,11.883],[-1.876,3.127],[1.345,.966],[8.073,3.106],[1.753,-.077],[8.829,-.468],[1.686,.028],[0,0],[0,0],[0,0],[-.361,-1.46],[-.532,-2.265],[-.53,-2.276],[-4.744,-26.556],[-.545,-2.183],[-1.983,-8.837],[-.851,-1.954],[-3.346,-7.794],[-.402,-1.615],[-.353,-1.427],[-.748,-3.017],[-.433,-1.608]],v:[[44.197,-164.337],[12.625,-162.791],[7.747,-160.8],[-41.386,-108.492],[-43.292,-102.154],[-51.077,-55.712],[-52.643,-49.164],[-56.752,-36.264],[-59.373,-29.91],[-62.418,-23.618],[-63.669,-10.483],[-62.311,-4.276],[-61.349,1.845],[-54.913,49.558],[-55.623,71.146],[-57.044,76.032],[-72.505,106.645],[-77.25,111.109],[-82.432,115.228],[-103.697,148.377],[-99.085,160.512],[-94.622,162.876],[-67.582,165.165],[-62.299,164.902],[-36.47,165.185],[-31.323,165.264],[33.688,165.264],[105.573,82.706],[88.284,12.984],[87.19,8.57],[85.595,1.78],[84.004,-5.096],[70.126,-84.543],[68.404,-91.083],[59.505,-116.453],[56.966,-122.302],[48.779,-146.343],[47.644,-150.912],[46.659,-154.887],[44.892,-161.877]],c:!0},ix:2},nm:"p 1",mn:"ADBE",hd:!1},{ty:"fl",c:{a:0,k:[.372999991623,.016000001571,.118000000598,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"Fill",hd:!1},{ty:"tr",p:{a:0,k:[418.915,341.142],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 6",np:2,cix:2,ix:6,mn:"Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[-11.359,-6.214],[-5.003,-3.752],[-3.753,-18.763],[-1.687,-16.54],[-.289,-2.962],[-.276,-2.931],[0,0],[11.258,-13.76],[0,0],[0,0],[0,0],[0,0],[8.755,-6.88],[0,0],[0,0],[0,0]],o:[[12.508,0],[11.358,6.214],[5.003,3.753],[1.582,7.913],[.308,3.018],[.304,3.113],[1.432,15.233],[0,0],[-11.258,13.759],[0,0],[0,0],[0,0],[0,0],[-8.757,6.88],[0,0],[0,0],[0,0]],v:[[-48.471,-163.591],[-12.922,-159.798],[15.323,-150.457],[33.461,-127.316],[32.392,-92.528],[39.544,-79.153],[34.161,-67.553],[42.842,-41.006],[54.1,47.806],[42.842,84.706],[58.902,102.279],[79.117,114.727],[97.88,141.62],[101.008,157.882],[60.98,166.013],[-37.839,166.013],[-109.763,83.455]],c:!0},ix:2},nm:"p 1",mn:"ADBE",hd:!1},{ty:"fl",c:{a:0,k:[.372999991623,.016000001571,.118000000598,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"Fill",hd:!1},{ty:"tr",p:{a:0,k:[189.194,340.393],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 7",np:2,cix:2,ix:7,mn:"Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[-.626,-5.629],[0,0],[0,0],[0,0]],o:[[21.265,7.505],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[.625,5.628],[0,0],[0,0],[0,0]],v:[[-63.481,-106.949],[-18.451,-99.444],[9.069,-103.822],[25.331,-96.942],[48.47,-85.684],[65.358,-77.554],[82.871,-71.3],[94.753,15.636],[60.354,78.179],[30.333,101.321],[-5.941,101.946],[-53.475,86.935],[-94.753,32.523]],c:!0},ix:2},nm:"p 1",mn:"ADBE",hd:!1},{ty:"fl",c:{a:0,k:[.195999998205,.016000001571,.054999998504,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"Fill",hd:!1},{ty:"tr",p:{a:0,k:[284.885,388.198],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 8",np:2,cix:2,ix:8,mn:"Group",hd:!1},{ty:"gr",it:[{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[6.337,-10.699],[10.7,6.337],[-6.337,10.699],[-10.7,-6.337]],o:[[-6.337,10.699],[-10.699,-6.337],[6.337,-10.698],[10.699,6.338]],v:[[19.372,11.474],[-11.475,19.372],[-19.373,-11.475],[11.474,-19.373]],c:!0},ix:2},nm:"p 1",mn:"ADBE",hd:!1},{ty:"fl",c:{a:0,k:[.969000004787,.922000002394,.834999952129,1],ix:4},o:{a:0,k:30,ix:5},r:1,nm:"Fill 1",mn:"Fill",hd:!1},{ty:"tr",p:{a:0,k:[480,101.484],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 9",np:2,cix:2,ix:1,mn:"Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[10.699,6.337],[1.931,.52],[5.268,-8.894],[9.516,2.562],[-1.806,-1.069],[-6.336,10.699]],o:[[-1.805,-1.069],[6.82,7.114],[-5.268,8.894],[1.383,1.443],[10.699,6.337],[6.337,-10.699]],v:[[6.749,-21.356],[1.119,-23.727],[4.232,3.323],[-20.984,13.591],[-16.199,17.39],[14.647,9.492]],c:!0},ix:2},nm:"p 1",mn:"ADBE",hd:!1},{ty:"fl",c:{a:0,k:[.969000004787,.922000002394,.834999952129,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"Fill",hd:!1},{ty:"tr",p:{a:0,k:[485.211,103.467],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 10",np:2,cix:2,ix:2,mn:"Group",hd:!1},{ty:"tr",p:{a:1,k:[{i:{x:.667,y:1},o:{x:.333,y:0},n:"0p667_1_0p333_0",t:0,s:[480.486,101.484],e:[480.486,93.484],to:[0,0],ti:[0,0]},{i:{x:.667,y:1},o:{x:.333,y:0},n:"0p667_1_0p333_0",t:15,s:[480.486,93.484],e:[480.486,101.484],to:[0,0],ti:[0,0]},{t:29}],ix:2},a:{a:0,k:[480,101.484],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 13",np:2,cix:2,ix:9,mn:"Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[-62.034,0],[-50.373,33.292],[0,0],[0,0],[0,0],[0,0],[0,0]],o:[[64.899,0],[0,0],[0,0],[0,0],[0,0],[0,0],[48.983,30.637]],v:[[-3.365,82.242],[172.267,29.551],[85.447,-.315],[31.141,-82.242],[-65.206,-82.242],[-96.554,8.442],[-172.266,33.878]],c:!0},ix:2},nm:"p 1",mn:"ADBE",hd:!1},{ty:"fl",c:{a:0,k:[.969,.732,.497,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"Fill",hd:!1},{ty:"tr",p:{a:0,k:[322.336,561.757],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 11",np:2,cix:2,ix:10,mn:"Group",hd:!1},{ty:"gr",it:[{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[10.142,-167.018],[0,0],[0,0],[110.456,0]],o:[[0,0],[0,0],[-57.249,-85.306],[-169.569,0]],v:[[-291.696,127.02],[106.193,172.324],[291.696,-30.867],[26.657,-172.324]],c:!0},ix:2},nm:"p 2",mn:"ADBE",hd:!1},{ty:"tr",p:{a:0,k:[0,0],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 1",np:1,cix:2,ix:1,mn:"Group",hd:!1},{ty:"gf",o:{a:0,k:100,ix:10},r:1,g:{p:7,k:{a:0,k:[0,.502,.094,.243,.138,.627,.178,.263,.275,.753,.263,.282,.503,.818,.375,.324,.73,.882,.486,.365,.865,.924,.625,.457,1,.965,.765,.549],ix:9}},s:{a:0,k:[0,-161],ix:5},e:{a:0,k:[72,115],ix:6},t:1,nm:"Gradient Fill 1",mn:"G-Fill",hd:!1},{ty:"tr",p:{a:0,k:[292.314,178.381],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 12",np:2,cix:2,ix:11,mn:"Group",hd:!1}],ip:0,op:30.03,st:0,bm:0}],markers:[]};this.params.animationData=t}}]),e}(p.default));e.default=m},function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function n(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),h=function t(e,i,r){null===e&&(e=Function.prototype);var a=Object.getOwnPropertyDescriptor(e,i);if(void 0===a){var s=Object.getPrototypeOf(e);return null===s?void 0:t(s,i,r)}if("value"in a)return a.value;var n=a.get;if(void 0!==n)return n.call(r)},l=i(4),p=r(l),c=i(0),m=(r(c),function(t){function e(){return a(this,e),s(this,(e.__proto__||Object.getPrototypeOf(e)).call(this))}return n(e,t),o(e,[{key:"init",value:function(){h(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this);var t={v:"5.1.15",fr:30,ip:0,op:30,w:900,h:645,nm:"tetons",ddd:0,assets:[],layers:[{ddd:0,ind:1,ty:4,nm:"tetons",sr:1,ks:{o:{a:0,k:100,ix:11},r:{a:0,k:0,ix:10},p:{a:0,k:[491,325.5,0],ix:2},a:{a:0,k:[367,322.5,0],ix:1},s:{a:0,k:[90,90,100],ix:6}},ao:0,shapes:[{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],v:[[117.497,4.658],[115.589,4.266],[116.437,6.019],[115.475,7.712],[117.404,7.447],[118.717,8.887],[119.06,6.969],[120.835,6.165],[119.118,5.246],[118.901,3.309]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ind:1,ty:"sh",ix:2,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],v:[[-1.108,-4.783],[-3.016,-5.176],[-2.167,-3.423],[-3.13,-1.729],[-1.2,-1.996],[.112,-.556],[.456,-2.473],[2.23,-3.277],[.514,-4.197],[.297,-6.132]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ind:2,ty:"sh",ix:3,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],v:[[96.668,-13.809],[94.76,-14.202],[95.608,-12.449],[94.645,-10.757],[96.575,-11.022],[97.889,-9.582],[98.232,-11.499],[100.007,-12.303],[98.289,-13.223],[98.073,-15.158]],c:!0},ix:2},nm:"Path 3",mn:"ADBE Vector Shape - Group",hd:!1},{ind:3,ty:"sh",ix:4,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],v:[[33.24,49.208],[31.333,48.816],[32.182,50.569],[31.219,52.262],[33.148,51.997],[34.461,53.436],[34.805,51.518],[36.579,50.715],[34.862,49.796],[34.645,47.859]],c:!0},ix:2},nm:"Path 4",mn:"ADBE Vector Shape - Group",hd:!1},{ind:4,ty:"sh",ix:5,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],v:[[-34.37,-52.311],[-35.96,-53.436],[-35.886,-51.489],[-37.448,-50.325],[-35.574,-49.794],[-34.949,-47.949],[-33.864,-49.567],[-31.917,-49.592],[-33.12,-51.124],[-32.542,-52.983]],c:!0},ix:2},nm:"Path 5",mn:"ADBE Vector Shape - Group",hd:!1},{ind:5,ty:"sh",ix:6,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],v:[[-115.928,-20.717],[-116.507,-18.858],[-115.303,-17.325],[-117.251,-17.301],[-118.336,-15.684],[-118.96,-17.528],[-120.835,-18.059],[-119.273,-19.225],[-119.346,-21.171],[-117.756,-20.046]],c:!0},ix:2},nm:"Path 6",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.6,.889999988032,.913999968884,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[360.668,93.97],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 1",np:7,cix:2,ix:1,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[-12.209,-2.359],[-1.994,.161],[-1.962,10.15],[-9.823,.795],[2.06,.398],[2.359,-12.21]],o:[[2.06,.398],[-8.82,-4.398],[1.961,-10.149],[-1.789,-.893],[-12.209,-2.359],[-2.36,12.209]],v:[[2.932,23.038],[9.032,23.372],[-3.017,-1.044],[17.261,-19.212],[11.476,-21.174],[-14.902,-3.34]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.6,.889999988032,.913999968884,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[154.677,81.471],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 2",np:2,cix:2,ix:2,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[-2.359,12.209],[-12.209,-2.36],[2.359,-12.209],[12.209,2.36]],o:[[2.359,-12.209],[12.21,2.359],[-2.359,12.209],[-12.209,-2.359]],v:[[-22.106,-4.272],[4.272,-22.106],[22.107,4.272],[-4.272,22.106]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.6,.889999988032,.913999968884,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[161.881,82.402],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:33,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 3",np:2,cix:2,ix:3,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[7.163,3.589],[2.254,6.94],[-3.012,-.377],[-5.248,-3.248],[-.952,-3.659]],o:[[-6.754,-3.384],[3.407,.256],[6.191,.775],[3.342,2.068],[-7.022,1.905]],v:[[47.371,-71.189],[34.624,-86.947],[44.096,-86.21],[61.533,-80.79],[68.356,-72.426]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ind:1,ty:"sh",ix:2,ks:{a:0,k:{i:[[1.105,-.206],[2.719,-.867],[4.193,-1.376],[9.17,-2.763],[5.672,-1.325],[.942,.216],[.021,.588],[1.881,2.416],[5.78,-1.044],[7.61,-3.532],[1.136,1.43],[2.08,2.601],[.37,.566],[-1.881,3.472],[-.659,.847],[-6.062,6.804],[-10.1,4.019],[-3.85,1.875],[-1.782,1.333],[.163,.33],[3.097,-.684],[11.155,-7.327],[4.314,-5.147],[1.048,-1.179],[2.718,-2.786],[5.238,-.086],[7.012,.212],[-1.182,.961],[-4.34,5.676],[-3.138,3.267],[-3.43,1.928],[-7.468,.512],[-4.473,.73],[-1.669,.534],[3.082,.073],[4.405,-.528],[5.451,-1.218],[1.73,-.586],[5.95,-7.732],[3.6,-3.798],[5.185,-1.915],[-6.086,2.594],[-1.867,.801],[-1.004,2.358],[2.003,.134],[1.485,-.373],[5.226,-5.35],[-3.392,-7.247],[4.851,.918],[1.746,3.277],[-.465,.792],[-6.213,4.021],[-1.407,1.755],[2.842,.377],[2.637,-2.135],[3.472,-3.487],[2.64,-3.025],[-.338,5.362],[-13.321,9.333],[-.73,1.321],[.246,.292],[2.497,-1.216],[3.4,-10.41],[1.37,-5.225],[.726,-.63],[.822,4.866],[.382,2.058],[-3.47,2.221],[-2.87,1.897],[-2.01,1.758],[-.7,1.526],[7.489,-4.185],[-3.584,3.204],[-1.852,4.644],[-.172,.637],[0,0],[7.253,-8.833],[-.511,-6.675],[-.634,-5.495],[.007,-.745],[5.372,-.213],[4.069,-2.235],[3.196,1.08],[6.364,.201],[4.35,1.303],[7.579,2.332],[2.716,.138],[.552,-.678],[1.593,-2.089],[-.803,-.927],[-2.42,-2.8],[1.122,-.001],[.434,-2.391],[-.187,-2.275],[-2.796,-1.204],[-1.498,-.401],[-2.337,-2.464],[-3.338,-5.85],[-2.328,-2.227],[.596,-4.643],[0,-3.164],[-2.035,1.044],[2.62,-.49],[1.711,-.93],[-2.112,-.295],[0,-.164],[2.191,-.768],[-3.299,-1.584],[2.063,-.378],[-2.452,-.381],[1.272,-.839],[-.101,-.225],[0,0],[1.849,-1.491],[-.095,-.216],[-2.259,.29],[2.185,-.663],[-.016,-.427],[-.465,-.507],[-.007,-.188],[-1.842,-1.27],[1.957,-1.874],[-1.416,-.14],[1.345,-1.319],[0,0],[.451,-1.478],[-1.657,-.173],[.918,-2.697],[-.855,.372],[-2.269,-1.226],[.452,-2.591],[-1.729,.705],[.351,-1.78],[-.624,.09],[.208,-2.745],[.345,-3.871],[-3.65,-8.803],[.269,-8.526],[-2.308,-6.325],[-.133,-9.808],[-.668,-5.707],[-.568,-8.34],[-.147,-8.98],[-4.1,3.137],[-.282,15.72],[-.026,-.429],[-.11,-6.786],[.014,-7.738],[-5.291,4.75],[-2.788,7.963],[1.944,5.163],[1.513,4.102],[-.156,4.624],[-4.553,.283],[-1.921,-1.282],[-.01,-.297],[-.286,-9.243],[.072,-.816],[-.152,-2.653],[-.392,-5.435],[-7.555,9.347],[-1.343,2.02],[-1.374,11.733],[-3.914,4.965],[-1.234,15.976],[4.643,9.561],[1.809,8.643],[8.987,4.075],[4.221,1.519],[8.272,5.378],[2.535,1.743],[-1.504,.889],[1.773,3.072],[2.112,2.394],[.91,1.063],[-1.598,.998],[-2.063,1.887],[-1.616,-.333],[-9.564,-1.731],[-3.547,-.013],[-2.984,-3.651],[-4.201,-12.619],[-2.661,-9.621],[3.206,-7.32],[1.355,-3.394],[-1.481,2.282],[2.342,12.535],[.933,6.817],[-.133,1.703],[-4.362,1.456],[-4.858,1.326],[-.046,.012],[-.374,-.448],[-2.44,-2.822],[.16,-4.418],[-3.943,-12.893],[-1.437,-7.033],[4.072,-4.421],[.897,-4.146],[-.166,-.177],[-1.677,1.501],[1.137,9.682],[1.868,7.79],[-.807,7.725],[-.007,8.59],[-1.77,.732],[-10.877,4.554],[-7.711,3.433],[-1.777,1.523],[-.473,1.184]],o:[[-2.809,.523],[-4.207,1.342],[-9.089,2.982],[-5.547,1.672],[-.827,.192],[9.476,-5.038],[-.014,-.439],[-1.881,-2.416],[-8.41,1.519],[-1.793,.832],[-2.069,-2.607],[-.473,-.593],[-2.301,-3.516],[.429,-.793],[5.559,-7.149],[7.017,-7.878],[4.01,-1.595],[1.998,-.974],[-.161,-.331],[-3.221,.223],[-13.271,2.928],[-5.831,3.831],[-1.009,1.204],[-2.574,2.896],[-3.503,3.589],[-6.185,.101],[1.568,-1.627],[5.713,-4.64],[2.721,-3.558],[2.854,-2.973],[5.911,-3.319],[4.523,-.31],[1.748,-.285],[-.809,-2.955],[-4.449,-.107],[-5.564,.667],[-1.861,.416],[-9.444,3.205],[-3.157,4.104],[-4.905,5.175],[-1.686,-5.979],[1.869,-.797],[2.475,-1.061],[.725,-1.702],[-1.537,-.102],[-7.595,1.913],[-4.886,5.003],[-5.515,-.528],[-4.183,-.791],[-.371,-.696],[3.52,-5.989],[1.984,-1.283],[1.684,-2.1],[-3.687,-.491],[-3.862,3.126],[-2.684,2.696],[-3.661,-4.967],[.929,-14.748],[1.165,-.816],[-.246,-.292],[-2.761,.778],[-10.647,5.186],[-1.678,5.141],[-.181,.689],[-.869,-4.86],[-.35,-2.064],[-.694,-3.751],[2.902,-1.857],[2.263,-1.496],[1.191,-1.043],[-9.185,.542],[.507,-4.938],[3.902,-3.49],[.244,-.614],[0,0],[-13.049,2.552],[-4.55,5.54],[.423,5.507],[.086,.742],[-.048,4.831],[-4.707,.187],[-2.961,1.625],[-5.98,-2.022],[-4.52,-.143],[-7.599,-2.277],[-2.538,-.781],[-.911,-.046],[-1.662,2.04],[-.792,1.038],[2.021,2.336],[-1.618,-1.501],[-2.701,.001],[-.409,2.252],[.234,2.827],[1.416,.609],[3.523,.946],[4.77,5.03],[1.502,2.633],[3.523,3.373],[-.367,2.848],[1.902,-.976],[-.364,2.239],[-1.165,.218],[2.919,.408],[-.001,.163],[-2.175,.762],[.43,3.547],[-2.035,.373],[.793,3.161],[-1.457,.96],[.102,.224],[0,0],[-2.455,1.981],[.096,.217],[2.113,-.27],[-.879,1.957],[-.557,.168],[.021,.568],[.239,.262],[.103,2.691],[1.686,1.162],[1.498,.148],[-1.062,1.043],[0,0],[-.47,1.539],[1.277,.134],[-.865,2.543],[1.541,-.67],[2.139,1.156],[-.299,1.717],[1.688,-.689],[-.346,1.752],[.765,-.134],[3.09,-.444],[-.294,3.874],[-.836,9.374],[3.233,7.8],[-.211,6.687],[3.351,9.176],[.077,5.692],[.974,8.31],[.242,3.536],[4.252,-2.941],[-.231,-15.718],[.581,.371],[.42,6.782],[.124,7.738],[5.6,-4.393],[.727,-8.194],[1.757,-5.018],[-1.542,-4.094],[-1.673,-4.539],[2.611,-1.209],[4.553,-.283],[-.01,-.13],[.307,9.242],[.026,.816],[-.232,2.673],[.313,5.438],[8.543,-8.436],[.441,-2.208],[6.82,-10.25],[.731,-6.23],[10.344,-13.118],[.812,-10.509],[-3.898,-8.029],[-1.869,-8.931],[-4.056,-1.839],[-9.382,-3.379],[-2.692,-1.75],[.827,-.488],[-4.13,-2.537],[-1.537,-2.662],[-.761,-.863],[1.93,-.946],[2.435,-1.522],[1.266,-1.157],[9.51,1.962],[3.464,.628],[5.127,.019],[8.577,10.491],[3.161,9.496],[2.096,7.577],[-1.364,3.112],[3.343,.107],[6.927,-10.673],[-1.265,-6.769],[-.231,-1.693],[.326,-4.189],[4.757,-1.587],[.047,-.013],[.547,-.15],[2.387,2.86],[3.07,3.551],[-.492,13.622],[2.106,6.886],[1.11,5.433],[-2.979,3.234],[.167,.178],[1.951,-1.25],[7.64,-6.835],[-.929,-7.907],[-1.801,-7.509],[.891,-8.527],[.002,-1.84],[10.9,-4.509],[7.8,-3.266],[2.197,-.979],[.903,-.775],[-1.233,-.357]],v:[[165.812,-92.945],[157.558,-90.624],[144.991,-86.469],[117.695,-77.602],[100.723,-73.482],[98.055,-73.562],[128.653,-85.389],[128.527,-86.801],[111.03,-86.486],[87.025,-78.773],[83.247,-79.628],[76.603,-87.168],[72.343,-91.904],[72.642,-96.96],[76.261,-101.413],[93.583,-122.444],[120.256,-139.164],[132.161,-144.191],[137.547,-148.129],[137.062,-149.12],[127.415,-148.383],[90.346,-133.788],[75.791,-119.777],[72.7,-116.208],[64.734,-107.697],[51.349,-102.094],[31.959,-102.612],[35.65,-106.404],[50.235,-122.214],[59.038,-132.486],[68.478,-139.814],[88.59,-145.473],[102.08,-147.279],[107.151,-148.857],[101.734,-153.454],[88.374,-152.944],[71.815,-150.079],[66.437,-148.564],[43.523,-131.934],[33.326,-120.081],[15.066,-107.607],[23.117,-123.339],[28.773,-125.637],[34.205,-130.625],[32.25,-133.634],[27.592,-133.225],[8.206,-122.44],[4.683,-104.544],[-10.716,-106.124],[-18.837,-113.509],[-18.361,-116.25],[-4.261,-131.621],[1.148,-136.098],[-.785,-139.628],[-10.506,-137.051],[-21.417,-127.003],[-29.077,-118.305],[-33.64,-133.81],[-13.576,-170.539],[-11.329,-174.435],[-12.067,-175.31],[-20.31,-172.911],[-41.307,-149.263],[-45.41,-133.59],[-46.693,-131.624],[-49.284,-146.207],[-50.105,-152.431],[-46.173,-161.465],[-37.374,-166.919],[-30.873,-171.746],[-28.245,-175.781],[-51.76,-166.086],[-45.154,-178.048],[-36.447,-190.145],[-35.922,-192.055],[-37.911,-192.055],[-65.8,-171.758],[-69.436,-152.466],[-67.552,-135.982],[-67.428,-133.745],[-73.745,-127.839],[-87.005,-124.544],[-96.311,-123.72],[-114.805,-126.474],[-128.256,-129.155],[-150.828,-136.592],[-158.915,-137.62],[-161.668,-136.389],[-166.236,-129.991],[-166.197,-127.19],[-157.736,-117.716],[-164.476,-120.216],[-168.949,-117.439],[-169.304,-110.565],[-164.315,-104.589],[-159.949,-102.996],[-152.024,-97.32],[-140.168,-80.979],[-133.487,-74.094],[-129.191,-62.194],[-129.259,-53.264],[-123.524,-56.206],[-127.199,-51.911],[-131.086,-49.87],[-123.944,-48.871],[-123.945,-48.38],[-130.485,-46.087],[-124.141,-39.177],[-130.274,-38.055],[-124.104,-35.878],[-128.104,-33.24],[-127.8,-32.566],[-118.053,-32.566],[-124.206,-27.603],[-123.92,-26.953],[-117.435,-27.784],[-121.902,-23.887],[-123.191,-22.609],[-122.071,-20.951],[-121.082,-20.4],[-116.548,-15.762],[-115.783,-11.458],[-111.597,-11.044],[-114.891,-7.814],[-105.775,-7.814],[-107.081,-3.538],[-102.968,-3.107],[-105.553,4.492],[-101.932,2.919],[-95.611,6.333],[-96.717,12.673],[-91.961,10.732],[-92.971,15.86],[-90.965,15.513],[-87.034,18.588],[-88.084,30.199],[-83.911,57.492],[-78.367,81.642],[-73.932,101.076],[-67.885,129.3],[-65.342,146.357],[-62.974,171.339],[-62.412,192.055],[-49.882,182.937],[-50.403,128.419],[-48.016,137.008],[-46.872,157.357],[-46.83,180.571],[-30.49,166.849],[-25.702,142.557],[-25.451,127.122],[-30.149,114.863],[-32.948,101.086],[-25.885,97.818],[-20.535,101.386],[-20.502,101.849],[-19.599,129.576],[-19.773,132.027],[-20.422,140.042],[-19.341,156.35],[4.828,129.656],[7.464,123.312],[19.315,90.115],[26.534,73.787],[43.313,29.909],[37.081,-.18],[28.207,-25.029],[11.622,-44.577],[-.88,-49.488],[-27.93,-61.586],[-35.754,-66.951],[-32.149,-69.08],[-40.619,-76.775],[-46.85,-84.001],[-49.258,-86.809],[-43.916,-89.467],[-36.924,-94.408],[-33.072,-95.427],[-4.489,-89.747],[6.137,-88.965],[18.355,-83.552],[38.993,-49.544],[47.71,-20.849],[45.919,1.581],[42.031,11.27],[49.098,7.986],[57.379,-26.493],[54.361,-46.917],[54.225,-52.055],[61.269,-60.753],[75.753,-64.99],[75.892,-65.029],[77.868,-64.328],[84.849,-55.626],[89.699,-43.646],[97.45,-4.361],[102.49,16.609],[98.371,31.536],[92.508,42.654],[93.007,43.186],[98.82,39.396],[109.363,14.522],[104.66,-9.009],[103.023,-31.654],[103.555,-57.41],[105.959,-61.087],[138.644,-74.643],[161.949,-84.624],[167.999,-88.487],[169.492,-91.967]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"mm",mm:1,nm:"Merge Paths 1",mn:"ADBE Vector Filter - Merge",hd:!1},{ty:"fl",c:{a:0,k:[.6,.889999988032,.913999968884,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[564.179,391.343],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 4",np:4,cix:2,ix:4,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[-13.302,34.665],[36.141,-10.999],[52.353,-21.384],[22.858,-4.424],[22.288,-16.278]],o:[[23.806,-27.649],[-21.271,4.435],[-67.838,20.647],[-52.354,21.383],[-22.86,4.424],[0,0]],v:[[128.568,44.789],[184.821,-49.292],[97.76,-28.927],[-3.997,-2.38],[-84.37,14.578],[-184.821,49.292]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.019999999626,.573000021542,.889999988032,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[434.026,483.885],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 5",np:2,cix:2,ix:5,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[-34.75,-45.806],[0,0],[-9.764,21.212],[20.395,-1.477],[20.098,-7.084],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[.513,.294]],o:[[0,0],[13.962,-18.404],[-9.715,7.452],[-30.849,2.235],[-20.098,7.083],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[-.528,-.308],[5.916,60.376]],v:[[-241.273,80.813],[268.897,80.813],[304.636,21.238],[256.109,42.028],[47.342,37.599],[1.758,32.853],[-39.018,26.849],[-61.156,27.676],[-73.529,19.803],[-117.869,-25.616],[-178.447,-33.544],[-230.365,-58.504],[-303.098,-79.934],[-304.636,-80.813]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.113999998803,.451000019148,.834999952129,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[306.188,432.398],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 6",np:2,cix:2,ix:6,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[-7.863,54.863],[0,0],[0,0],[0,0],[30.012,-2.174],[16.519,1.72],[19.474,-2.679],[20.097,-7.083],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[.627,.357],[0,-9.303],[-40.73,-53.69],[0,0]],o:[[0,0],[0,0],[0,0],[0,0],[-30.848,2.235],[-32.591,-3.391],[-19.473,2.68],[-20.099,7.083],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[-.649,-.378],[-.778,9.101],[0,72.589],[0,0],[32.004,-42.188]],v:[[318.362,-35.486],[316.656,-35.543],[311.494,-40.705],[299.696,-42.179],[243.935,-30.086],[161.217,-35.102],[94.271,-53.708],[35.169,-19.768],[-10.415,-24.514],[-51.191,-30.518],[-73.33,-29.691],[-85.702,-37.564],[-130.044,-75.609],[-171.361,-84.795],[-183.233,-92.831],[-190.622,-83.537],[-242.539,-86.376],[-284.374,-111.931],[-315.273,-107.806],[-317.164,-108.886],[-318.363,-81.28],[-253.448,111.931],[256.723,111.931]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.071000005685,.325,.681999954523,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[318.362,401.28],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 7",np:2,cix:2,ix:7,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[-11.798,0],[0,0],[0,0],[0,0],[30.97,-47.191],[-3.81,-9.036],[-24.074,-6.083],[-7.135,15.697]],o:[[11.797,0],[0,0],[0,0],[0,0],[-6.612,10.077],[21.553,11.19],[-13.714,-31.332],[7.374,-16.221]],v:[[14.258,-43.63],[90.503,-58.165],[32.712,-58.664],[-20.4,-48.792],[-83.813,3.562],[-86.692,32.578],[-18.083,58.664],[-40.309,-18.56]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[0,.011999999776,.169000004787,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[259.448,571.588],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 8",np:2,cix:2,ix:8,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,72.589],[8.67,29.043],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[1.499,-.972],[0,0],[0,0],[0,0],[0,0],[6.637,-2.95],[0,0],[0,0],[5.162,0],[0,0],[1.475,3.687],[0,0],[.738,0],[1.475,0],[0,0],[2.951,-2.212],[2.95,0],[7.374,8.111],[0,0],[2.212,5.899],[0,0],[1.475,5.161],[5.9,.737],[0,0],[0,0],[0,0],[0,0],[0,0],[1.475,-5.899],[0,0],[0,0],[31.707,-11.061],[12.893,3.41],[0,-33.216],[-40.73,-53.69],[0,0]],o:[[0,-31.862],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[-1.5,.971],[0,0],[0,0],[0,0],[0,0],[-6.637,2.949],[0,0],[0,0],[-5.161,0],[0,0],[-1.475,-3.686],[0,0],[-.737,0],[-1.475,0],[0,0],[-2.949,2.213],[-2.949,0],[-7.374,-8.111],[0,0],[-2.212,-5.899],[0,0],[-1.475,-5.162],[-5.899,-.738],[0,0],[0,0],[0,0],[0,0],[0,0],[-1.475,5.899],[0,0],[0,0],[-24.619,8.588],[-9.393,30.123],[0,72.589],[0,0],[40.73,-53.69]],v:[[320,11.779],[306.651,-79.891],[306.17,-80.373],[294.372,-81.847],[283.642,-84.18],[279.624,-89.221],[273.519,-89.818],[270.038,-93.646],[265.614,-109.868],[251.604,-106.918],[244.968,-120.929],[236.856,-130.514],[230.958,-141.576],[225.059,-146.737],[213.998,-144.524],[206.624,-138.625],[199.251,-142.312],[189.665,-129.777],[183.028,-129.039],[170.493,-115.767],[165.356,-117.475],[162.189,-107.857],[155.008,-101.019],[147.635,-98.807],[137.312,-102.494],[121.089,-106.918],[114.452,-99.545],[90.856,-106.181],[82.745,-121.667],[73.897,-117.242],[31.13,-152.636],[11.221,-141.576],[.897,-131.99],[-3.527,-137.888],[-12.375,-123.878],[-35.972,-125.353],[-43.345,-108.393],[-58.83,-129.777],[-83.163,-141.576],[-91.274,-159.272],[-96.436,-174.02],[-100.123,-195.404],[-111.921,-204.251],[-130.355,-200.565],[-151.001,-190.242],[-170.911,-172.544],[-173.123,-162.96],[-185.658,-157.797],[-195.244,-135.676],[-218.103,-118.716],[-222.526,-106.181],[-254.971,-92.908],[-305.544,-83.592],[-320,11.779],[-255.085,204.99],[255.086,204.99]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[0,.011999999776,.169000004787,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[320,308.221],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 9",np:2,cix:2,ix:9,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[148.179,0],[36.41,-136.71],[0,0]],o:[[-148.177,0],[0,0],[-36.41,-136.71]],v:[[-.001,-118.717],[-309.223,118.717],[309.223,118.717]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"tr",p:{a:0,k:[0,0],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 1",np:1,cix:2,ix:1,mn:"ADBE Vector Group",hd:!1},{ty:"gf",o:{a:0,k:100,ix:10},r:1,g:{p:5,k:{a:0,k:[.243,.008,.031,.255,.4,.014,.1,.369,.558,.02,.169,.482,.864,.135,.42,.643,1,.251,.671,.804],ix:9}},s:{a:0,k:[-51,-122],ix:5},e:{a:0,k:[-2,107],ix:6},t:1,nm:"Gradient Fill 1",mn:"ADBE Vector Graphic - G-Fill",hd:!1},{ty:"tr",p:{a:0,k:[320,118.717],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 10",np:2,cix:2,ix:10,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[-104.141,0],[-58.436,77.029]],o:[[58.435,77.029],[104.143,0],[0,0]],v:[[-255.085,-63.394],[-.001,63.394],[255.086,-63.394]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"tr",p:{a:0,k:[0,0],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 1",np:1,cix:2,ix:1,mn:"ADBE Vector Group",hd:!1},{ty:"gf",o:{a:0,k:100,ix:10},r:1,g:{p:5,k:{a:0,k:[0,.063,.361,.82,.265,.049,.541,.88,.53,.035,.722,.941,.765,.329,.824,.9,1,.624,.925,.859],ix:9}},s:{a:0,k:[5,-43],ix:5},e:{a:0,k:[20,64],ix:6},t:1,nm:"Gradient Fill 1",mn:"ADBE Vector Graphic - G-Fill",hd:!1},{ty:"tr",p:{a:0,k:[320,576.605],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 11",np:2,cix:2,ix:11,mn:"ADBE Vector Group",hd:!1}],ip:0,op:30,st:0,bm:0}],markers:[]};this.params.animationData=t}}]),e}(p.default));e.default=m},function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function n(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),h=function t(e,i,r){null===e&&(e=Function.prototype);var a=Object.getOwnPropertyDescriptor(e,i);if(void 0===a){var s=Object.getPrototypeOf(e);return null===s?void 0:t(s,i,r)}if("value"in a)return a.value;var n=a.get;if(void 0!==n)return n.call(r)},l=i(4),p=r(l),c=i(0),m=(r(c),function(t){function e(){return a(this,e),s(this,(e.__proto__||Object.getPrototypeOf(e)).call(this))}return n(e,t),o(e,[{key:"init",value:function(){h(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this);var t={v:"5.1.15",fr:30,ip:0,op:120,w:900,h:645,nm:"touring",ddd:0,assets:[],layers:[{ddd:0,ind:1,ty:4,nm:"touring",sr:1,ks:{o:{a:0,k:100,ix:11},r:{a:0,k:0,ix:10},p:{a:0,k:[452,336.5,0],ix:2},a:{a:0,k:[800,800,0],ix:1},s:{a:0,k:[49,49,100],ix:6}},ao:0,shapes:[{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[3.004,-4.485],[.76,-.641],[0,0],[.286,-.595],[0,0],[-.678,0],[-11.112,7.217]],o:[[0,0],[-.233,.347],[-9.081,7.656],[0,0],[0,0],[.375,.115],[3.863,0],[1.851,-1.202]],v:[[15.182,-49.496],[10.676,-53.981],[9.134,-52.47],[-43.401,-18.101],[-44.191,-16.998],[-43.443,-15.299],[-41.899,-15.111],[12.231,-47.575]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ind:1,ty:"sh",ix:2,ks:{a:0,k:{i:[[2.664,-1.644],[.331,-.391],[6.693,-3.155],[0,0],[-6.672,3.351],[0,0]],o:[[-.279,.172],[-3.243,3.827],[0,0],[8.382,-2.057],[.557,-.28],[0,0]],v:[[27.402,-15.872],[26.496,-15.069],[-30.469,14.159],[-28.99,17.517],[29.579,-9.662],[30.468,-10.109]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ind:2,ty:"sh",ix:3,ks:{a:0,k:{i:[[0,0],[2.661,-4.695],[.1,-.13],[8.492,-6.164],[0,0],[-7.91,6.027]],o:[[0,0],[-.058,.102],[-3.989,5.175],[0,0],[9.035,-4.788],[1.065,-.812]],v:[[-11.581,-91.002],[-16.41,-95.141],[-16.675,-94.774],[-65.885,-56.638],[-64.003,-53.276],[-13.27,-89.712]],c:!0},ix:2},nm:"Path 3",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.275,.019999999626,.447000002394,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[392.079,784.041],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 1",np:4,cix:2,ix:1,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[-.181,.354],[1.569,10.902],[.584,1.542],[8.381,-2.057],[0,0],[-3.236,-1.668],[-6.78,3.37],[-6.72,8.428],[-.183,.228]],o:[[-1.569,-10.902],[-.493,-.948],[-6.672,3.351],[0,0],[3.004,2.99],[7.54,3.885],[9.622,-4.783],[-.087,-.28],[-.027,-.395]],v:[[32.45,4.702],[27.743,-28.005],[26.118,-31.803],[-32.45,-4.624],[-19.824,24.045],[-13.789,27.918],[7.351,26.16],[32.076,6.586],[32.22,5.825]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ind:1,ty:"sh",ix:2,ks:{a:0,k:{i:[[-9.081,7.655],[-.329,4.244],[-.144,2.102],[5.058,6.86],[9.035,-4.787],[0,0],[0,0],[0,0]],o:[[-2.628,-3.436],[.162,-2.1],[-5.193,-6.754],[-7.91,6.028],[0,0],[0,0],[.285,-.596],[0,0]],v:[[5.673,-74.61],[.361,-85.892],[-.383,-92.197],[-16.731,-111.854],[-67.464,-75.418],[-49.47,-43.269],[-47.651,-39.138],[-46.862,-40.241]],c:!0},ix:2},nm:"Path 3",mn:"ADBE Vector Shape - Group",hd:!1},{ind:2,ty:"sh",ix:3,ks:{a:0,k:{i:[[-.279,.172],[2.381,2.383],[3.268,1.232],[.043,.105],[3.863,0],[.374,.114],[0,0],[-3.243,3.827]],o:[[-3.203,-9.62],[-2.129,-2.131],[-.039,-.106],[-11.113,7.217],[-.678,0],[0,0],[6.693,-3.155],[.331,-.391]],v:[[23.941,-38.013],[14.663,-62.427],[8.906,-69.399],[8.77,-69.715],[-45.36,-37.251],[-46.904,-37.439],[-33.93,-7.982],[23.035,-37.21]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ind:3,ty:"sh",ix:4,ks:{a:0,k:{i:[[-3.989,5.175],[.148,.255],[6.908,5.104],[5.871,-5.295],[0,0],[6.795,-2.892],[-2.084,-8.087],[0,0]],o:[[-.152,-.252],[-5.541,-6.514],[-6.088,-4.497],[0,0],[-7.619,1.415],[-3.19,6.617],[0,0],[8.491,-6.164]],v:[[-20.136,-116.915],[-20.606,-117.66],[-39.326,-134.954],[-59.266,-134.152],[-59.235,-134.201],[-78.511,-123.544],[-82.423,-102.143],[-69.345,-78.779]],c:!0},ix:2},nm:"Path 4",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.211764723063,.003921568859,.376470625401,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[395.541,806.181],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 4",np:5,cix:2,ix:2,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[26.86,5.972],[0,0],[6.915,2.361],[11.93,3.203],[16.895,4.077],[8.92,1.66],[2.015,.314],[0,0],[26.553,7.207],[0,0],[1.555,-2.894],[-10.997,-2.713],[-3.142,-.775],[0,0],[0,0],[-10.997,-2.713],[-11.957,24.578]],o:[[0,0],[-26.861,-5.97],[0,0],[-1.93,-.66],[-8.666,-2.677],[-16.853,-4.249],[-12.051,-2.715],[-7.224,-1.127],[0,0],[-26.553,-7.206],[0,0],[-.96,27.291],[10.997,2.713],[0,0],[0,0],[3.143,.774],[10.997,2.712],[-.016,-3.28]],v:[[282.904,62.093],[235.687,64.207],[105.909,29.569],[60.146,19.151],[37.463,12.827],[-3.961,2.037],[-22.088,-1.864],[-45.111,-6.817],[-129.741,-28.568],[-242.723,-53.783],[-283.481,-77.601],[-289.782,-82.433],[-194.313,-37.252],[-9.116,5.995],[-5.118,6.684],[-1.261,7.934],[185.124,56.322],[290.742,60.749]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-322.367,564.718],[1277.633,564.718],[1277.633,-1035.282],[-322.367,-1035.282]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ind:1,ty:"sh",ix:2,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-322.367,-1035.282],[1277.633,-1035.282],[1277.633,564.718],[-322.367,564.718]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"tr",p:{a:0,k:[0,0],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 1",np:2,cix:2,ix:2,mn:"ADBE Vector Group",hd:!1},{ty:"mm",mm:4,nm:"Merge Paths 1",mn:"ADBE Vector Filter - Merge",hd:!1},{ty:"fl",c:{a:0,k:[.275,.019999999626,.447000002394,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[322.367,1035.282],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 9",np:4,cix:2,ix:3,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[26.861,5.972],[0,0],[6.916,2.362],[11.93,3.203],[16.895,4.077],[8.919,1.66],[2.016,.314],[0,0],[26.553,7.206],[0,0],[1.555,-2.894],[-10.997,-2.713],[-3.142,-.775],[0,0],[0,0],[-10.997,-2.713],[-11.958,24.577]],o:[[0,0],[-26.861,-5.971],[0,0],[-1.93,-.659],[-8.666,-2.678],[-16.853,-4.249],[-12.052,-2.715],[-7.223,-1.126],[0,0],[-26.553,-7.206],[0,0],[-.96,27.29],[10.997,2.713],[0,0],[0,0],[3.142,.775],[10.997,2.712],[-.016,-3.281]],v:[[282.904,62.094],[235.686,64.208],[105.909,29.57],[60.145,19.151],[37.463,12.828],[-3.961,2.037],[-22.088,-1.864],[-45.112,-6.818],[-129.741,-28.568],[-242.723,-53.782],[-283.481,-77.602],[-289.782,-82.432],[-212.339,-41.737],[-9.116,5.995],[-5.118,6.685],[-1.261,7.934],[185.123,56.322],[290.742,60.75]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-394.469,546.778],[1205.531,546.778],[1205.531,-1053.222],[-394.469,-1053.222]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ind:1,ty:"sh",ix:2,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-394.469,-1053.222],[1205.531,-1053.222],[1205.531,546.778],[-394.469,546.778]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"tr",p:{a:0,k:[0,0],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 1",np:2,cix:2,ix:2,mn:"ADBE Vector Group",hd:!1},{ty:"mm",mm:4,nm:"Merge Paths 1",mn:"ADBE Vector Filter - Merge",hd:!1},{ty:"fl",c:{a:0,k:[.275,.019999999626,.447000002394,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[394.469,1053.222],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 10",np:4,cix:2,ix:4,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[-1.021,7.315],[.755,16.334],[0,0],[0,0],[-3.839,-.838],[-.64,-1.111],[-5.686,1.097],[-9.962,3.528],[-5.965,-.342],[-.642,.836],[-5.165,10.328],[-.751,.533],[.142,-4.82],[-2.997,-.737],[-1.85,1.073],[2.671,-11.599],[-3.474,-.56],[-.619,1.964],[-1.763,4.749],[-6.732,-7.327],[1.195,-.986],[2.484,-.49],[5.112,-1.216],[-.264,-2.926],[-6.137,3.677],[.747,-2.152],[3.39,-4.274],[5.585,-7.792],[-.86,-9.99],[-.604,-4.016],[-3.446,-7.566],[2.435,-2.113],[.171,-.357],[-.065,-2.273],[-.175,-10.967],[-4.558,-.83],[5.688,-.594],[3.163,-2.091],[1.976,.427],[-.704,2.487],[.039,2.318],[.161,3.885],[.045,3.165],[.125,1.64],[-.026,.897],[0,0],[.044,3.821],[.054,1.162],[-.198,.294]],o:[[-1.598,-16.305],[-1.311,-6.164],[0,0],[0,0],[1.25,.272],[4.341,7.534],[10.279,-1.981],[5.198,-1.841],[.98,.056],[6.858,-8.927],[.149,-.298],[1.172,5.21],[-.049,1.671],[2.918,.718],[3.614,13.097],[.079,2.171],[3.592,.579],[1.479,-4.692],[2.44,9.887],[1.408,1.531],[-2.075,1.712],[-5.157,1.019],[-1.717,.409],[4.358,5.235],[1.395,-.836],[-1.672,4.814],[-4.669,8.499],[-5.554,7.749],[.347,4.037],[2.275,8.208],[1.342,2.948],[-.008,.395],[.065,2.273],[3.253,10.343],[-.612,4.489],[-5.679,.437],[-2.556,.268],[-7.152,4.728],[-2.57,-.556],[-.039,-2.319],[-.161,-3.885],[-.823,-5.442],[-.125,-1.639],[.027,-.898],[0,0],[-1.085,-2.511],[-.055,-1.163],[-.172,-.542],[4.993,-7.374]],v:[[-146.3,16.898],[-148.074,-32.123],[-149.837,-68.579],[-146.136,-68.423],[-135.789,-70.586],[-131.897,-70.234],[-114.66,-66.263],[-83.923,-73.096],[-68.15,-78.196],[-65.158,-79.805],[-43.465,-105.656],[-42.118,-106.635],[-43.053,-91.852],[-41.489,-87.038],[-37.551,-90.728],[-44.482,-55.403],[-42.185,-49.765],[-38.409,-54.464],[-33.946,-68.675],[-19.96,-43.051],[-20.4,-39.848],[-27.49,-37.434],[-42.912,-34.151],[-46.825,-30.879],[-31.28,-27.894],[-28.123,-26.63],[-32.374,-12.021],[-49.256,11.357],[-56.74,38.699],[-54.971,50.749],[-42.085,71.763],[-42.936,78.828],[-43.204,79.956],[-43.009,86.775],[-36.501,118.462],[-30.132,125.818],[-43.019,133.169],[-53.019,145.141],[-140.171,129.689],[-142.971,125.433],[-143.087,118.477],[-143.57,106.822],[-144.356,76.305],[-144.73,71.385],[-144.649,68.692],[-144.662,65.496],[-145.518,43.941],[-145.682,40.453],[-146.15,38.86]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ind:1,ty:"sh",ix:2,ks:{a:0,k:{i:[[-1.134,.491],[-3.332,2.054],[-.429,-.773],[-2.237,-7.385],[-3.833,-12.569],[-2.103,-6.873],[-8.907,-21.59],[3.224,1.071],[9.656,2.122],[-1.599,7.116],[.293,5.171],[.786,7.969],[1.234,5.4],[0,0],[-.207,1.62],[-.267,7.477],[1.329,1.506],[-.162,5.525],[-.031,.775],[.057,.768],[3.531,2.784]],o:[[3.54,-1.531],[1.146,-.706],[3.745,6.737],[4.264,12.393],[3.094,6.478],[8.552,20.731],[-4.497,-.604],[-9.434,-3.137],[-6.946,-1.527],[1.148,-5.108],[-.456,-8.029],[-3.018,-4.653],[0,0],[-1.745,-.955],[-1.026,-7.152],[.067,-1.898],[-4.148,-4.698],[.031,-.776],[-.056,-.768],[-3.644,-2.615],[-.884,-.696]],v:[[-15.275,34.939],[-4.682,30.274],[-2.728,31.786],[6.425,52.894],[21.398,89.184],[29.439,109.111],[55.449,172.163],[44.126,170.542],[15.266,163.741],[9.966,154.382],[8.58,139.017],[8.593,115.064],[2.211,99.987],[2.304,99.964],[.87,95.804],[-3.393,74.544],[-5.863,68.825],[-9.327,53.081],[-9.234,50.756],[-9.403,48.452],[-16.13,37.877]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ind:2,ty:"sh",ix:3,ks:{a:0,k:{i:[[-1.838,1.419],[-.892,-1.3],[-5.792,-5.891],[-.13,-1.339],[-.493,-2.842],[-4.119,-2.688],[-3.948,-3.638],[-6.782,-6.023],[.673,-1.728],[-3.857,-5.687],[-6.239,-7.731],[.043,-1.92],[1.748,.027],[-2.11,-4.163],[1.269,-1.559],[1.158,-1.522],[2.742,6.35],[.766,-1.095],[.99,2.427],[5.47,13.667],[1.644,4.341],[.318,.691],[.307,.491],[3.167,8.201],[-.978,8.568],[1.39,.49],[.867,2.86],[2.747,8.491]],o:[[2.76,-2.131],[4.493,6.547],[.737,.75],[.718,2.803],[.828,4.784],[4.78,3.119],[8.673,3.709],[1.673,1.485],[-3.138,8.061],[5.557,8.198],[1.63,2.019],[-.031,1.403],[-3.79,-.061],[1.71,3.373],[-1.39,1.349],[-2.306,3.034],[-.547,-1.268],[-3.392,4.847],[-5.558,-13.631],[-1.724,-4.309],[-.319,-.692],[-.307,-.492],[-3.167,-8.202],[-3.006,-7.333],[.153,-1.338],[-3.581,-1.262],[-3.978,-8.005],[-1.145,-3.536]],v:[[3.813,22.614],[7.922,24.94],[19.63,45.643],[20.104,49.58],[22.215,57.997],[28.98,69.758],[38.848,82.263],[59.995,99.352],[61.359,104.678],[67.095,124.304],[85.473,147.747],[85.587,153.589],[82.648,155.449],[78.639,161.2],[75.695,166.39],[71.567,170.465],[64.525,170.791],[61.651,170.514],[56.492,168.996],[39.966,128.044],[35.02,115.026],[34.065,112.95],[33.144,111.475],[23.642,86.871],[16.708,64.225],[14.986,60.829],[10.347,53.498],[.671,28.619]],c:!0},ix:2},nm:"Path 3",mn:"ADBE Vector Shape - Group",hd:!1},{ind:3,ty:"sh",ix:4,ks:{a:0,k:{i:[[0,0],[.21,1.158],[3.217,.523],[6.215,2.349],[1.324,3.935],[-.021,.183],[7.777,.921],[.37,1.656],[1.959,-.48],[-1.413,-2.158],[1.714,.402],[3.64,2.469],[7.01,2.052],[2.284,.582],[-1.847,.538],[-1.635,3.637],[-3.433,1.578],[-.588,-1.525],[-1.825,.434],[-2.207,.286],[-1.627,.347],[-.522,.356],[-.79,.388],[.74,2.684],[2.224,4.674],[2.419,5.907],[3.246,2.45],[.093,1.476],[3.794,4.046],[2.707,7.754],[1.602,2.375],[4.897,3.368],[.906,1.833],[.208,1.296],[.445,7.94],[0,0],[.122,2.927],[1.611,8.12],[.049,1.537],[-.838,1.553],[-1.853,3.198],[.091,6.75],[-3.236,-1.668],[-6.78,3.37],[-6.72,8.427],[-.183,.227],[-.181,.353],[1.569,10.902],[3.432,3.435],[3.268,1.232],[-.497,6.416],[-.143,2.102],[5.519,9.448],[6.909,5.104],[5.87,-5.295],[0,0],[6.794,-2.891],[-2.084,-8.087],[3.974,7.261],[-.163,2.333],[.93,4.53],[1.762,2.358],[1.064,1.819],[0,0],[4.424,.053],[4.724,-9.016],[-2.959,-5.505],[.085,-.313],[-6.611,-2.254],[-.671,-1.188],[.109,-.941],[.377,-.932],[.112,-1.089],[.277,.538],[.231,1.003],[.583,2.357],[.196,1.374],[-.306,.443],[-.787,.416],[-1.01,.414],[-.993,.205],[-.456,.098],[-.432,.141],[-.294,.136],[-.522,.367],[-1.695,2.656],[8.057,-8.507],[8.998,-4.37],[10.534,1.105],[.633,-1.028],[3.557,3.567],[1.885,2.064],[-2.163,3.092],[3.993,.299],[11.244,-5.89],[-5.437,-.236],[-6.598,.142],[-2.765,-1.681],[3.246,-3.189],[-2.225,-5.547],[-.538,-2.397],[-2.344,-.682],[-2.088,.725],[0,-8.05],[-.079,-3.109],[-.091,-3.104],[.28,-14.802],[.857,-13.231],[-.027,-.768],[.463,-6.659],[-.145,-6.972],[-.552,-8.677]],o:[[-.802,-.626],[-3.183,-2.517],[-6.535,-1.063],[-2.239,-2.062],[-.035,-.191],[.858,-7.561],[-1.459,-.173],[-.849,-3.798],[-1.796,.438],[1.038,1.585],[-4.08,-.957],[-7.356,-.789],[-2.024,-.517],[.974,-1.917],[3.343,-.973],[1.736,-3.862],[1.78,-.818],[1.824,-.434],[1.672,-1.612],[1.094,-1.436],[.522,-.358],[.79,-.389],[2.846,-2.724],[-3.705,-3.996],[-2.62,-5.827],[-1.754,-4.286],[-1.345,-.288],[-3.848,-3.997],[-5.796,-6.178],[-1.922,-2.162],[-3.362,-4.984],[-.906,-1.832],[-1.112,-.26],[-1.229,-7.648],[0,0],[-2.705,-2.493],[-2.56,-7.912],[-.049,-1.536],[-.282,-1.514],[-1.385,-3.819],[3.374,-5.822],[-.06,-4.381],[7.54,3.884],[9.622,-4.783],[-.087,-.281],[-.027,-.396],[-1.569,-10.902],[-3.484,-6.702],[-2.129,-2.131],[-1.895,-5.125],[.163,-2.1],[-6.606,-8.593],[-5.541,-6.515],[-6.088,-4.497],[0,0],[-7.62,1.416],[-3.191,6.617],[-3.188,-3.158],[-.992,-1.812],[.336,-4.818],[-1.762,-2.358],[-1.709,-.971],[0,0],[-3.881,-3.129],[-11.103,.409],[-.005,5.252],[.129,.239],[-.56,2.054],[1.233,.42],[.497,.882],[-.109,.942],[-.024,.794],[-.113,1.088],[.132,1.555],[.381,2.331],[.83,3.541],[-.013,.482],[-.005,.981],[-.232,1.088],[-.179,.87],[-.036,.257],[.315,.002],[.286,-.094],[.502,-.233],[1.608,-1.131],[-4.318,10.296],[-6.898,7.283],[-9.316,4.524],[-1.494,-.157],[-2.426,3.946],[-2.216,-2.223],[-2.311,-2.532],[3.662,-5.235],[-12.775,-.957],[-1.359,.712],[4.855,-3.909],[2.351,-.051],[3.348,2.036],[-4.502,4.424],[2.243,1.814],[.56,2.498],[2.142,.623],[0,8.05],[.079,3.109],[.092,3.102],[.699,14.82],[-.25,13.264],[.027,.768],[.397,6.623],[.146,6.974],[1.235,8.649],[0,0]],v:[[189.473,212.566],[188.262,209.612],[178.38,209.032],[159.221,203.873],[151.342,200.07],[151.244,199.501],[144.332,190.971],[141.228,189.059],[135.709,187.417],[134.771,190.919],[131.877,193.022],[119.806,189.526],[98.662,183.787],[92.329,182.171],[96.812,179.322],[104.772,173.281],[114.324,167.274],[117.626,169.66],[123.1,168.358],[129.102,165.966],[133.46,163.86],[135.026,162.789],[137.397,161.624],[137.306,153.547],[130.784,139.456],[122.974,121.957],[113.859,113.877],[111.504,111.419],[99.971,99.421],[88.867,77.67],[83.157,71.149],[70.553,58.915],[67.836,53.419],[64.949,51.88],[56.314,31.017],[56.362,31.043],[54.899,22.446],[49.542,-1.799],[49.396,-6.41],[49.238,-10.978],[50.989,-21.469],[56.425,-40.175],[62.007,-43.799],[83.147,-45.557],[107.872,-65.131],[108.016,-65.892],[108.246,-67.015],[103.539,-99.722],[90.459,-134.144],[84.702,-141.116],[76.156,-157.608],[75.412,-163.914],[55.189,-189.376],[36.469,-206.671],[16.53,-205.869],[16.561,-205.918],[-2.715,-195.261],[-6.627,-173.86],[-20.779,-177.018],[-24.429,-185.293],[-27.42,-198.841],[-32.707,-205.916],[-37.377,-209.428],[-37.388,-209.437],[-50.291,-211.689],[-72.463,-195.434],[-73.711,-179.752],[-74.03,-178.689],[-73.852,-166.198],[-74.332,-162.651],[-72.659,-161.068],[-74.648,-157.072],[-74.887,-154.207],[-75.187,-150.701],[-74.782,-146.818],[-74.953,-146.482],[-74.326,-143.708],[-73.853,-142.759],[-72.989,-141.487],[-71.949,-140.469],[-70.078,-140.053],[-69.004,-140.092],[-67.736,-140.378],[-66.866,-140.721],[-65.329,-141.617],[-60.34,-147.206],[-71.523,-116.246],[-96.337,-99.796],[-125.956,-93.628],[-128.496,-91.726],[-137.166,-90.733],[-144.121,-97.128],[-142.819,-108.386],[-145.988,-113.928],[-181.874,-106.029],[-184.036,-98.487],[-167.515,-105.931],[-160.557,-105.893],[-160.999,-95.06],[-163.892,-80.266],[-161.542,-73.37],[-156.724,-68.807],[-152.358,-67.37],[-152.822,-47.218],[-152.584,-37.891],[-152.31,-28.582],[-150.437,15.874],[-148.961,55.45],[-148.88,57.756],[-148.025,77.639],[-147.588,98.558],[-146.293,132.09]],c:!1},ix:2},nm:"Path 4",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"mm",mm:1,nm:"Merge Paths 1",mn:"ADBE Vector Filter - Merge",hd:!1},{ty:"fl",c:{a:0,k:[.275,.019999999626,.447000002394,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[319.745,877.898],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 11",np:6,cix:2,ix:5,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],v:[[4.963,-2.646],[3.052,.357],[4.443,3.635],[.995,2.746],[-1.691,5.081],[-1.911,1.529],[-4.963,-.305],[-1.651,-1.612],[-.849,-5.081],[1.417,-2.336]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ind:1,ty:"sh",ix:2,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],v:[[-3.524,-52.805],[-5.435,-49.801],[-4.045,-46.524],[-7.491,-47.413],[-10.178,-45.078],[-10.397,-48.631],[-13.449,-50.465],[-10.137,-51.771],[-9.336,-55.24],[-7.071,-52.494]],c:!0},ix:2},nm:"Path 3",mn:"ADBE Vector Shape - Group",hd:!1},{ind:2,ty:"sh",ix:3,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],v:[[-64.019,123.406],[-63.623,126.944],[-60.486,128.625],[-63.728,130.093],[-64.357,133.597],[-66.755,130.968],[-70.283,131.453],[-68.522,128.358],[-70.074,125.154],[-66.586,125.872]],c:!0},ix:2},nm:"Path 4",mn:"ADBE Vector Shape - Group",hd:!1},{ind:3,ty:"sh",ix:4,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],v:[[-339.188,-1.916],[-340.246,1.483],[-338.046,4.283],[-341.605,4.326],[-343.587,7.284],[-344.729,3.911],[-348.154,2.94],[-345.3,.813],[-345.435,-2.745],[-342.529,-.688]],c:!0},ix:2},nm:"Path 6",mn:"ADBE Vector Shape - Group",hd:!1},{ind:4,ty:"sh",ix:5,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],v:[[-186.801,-60.881],[-187.86,-57.482],[-185.659,-54.683],[-189.219,-54.639],[-191.201,-51.682],[-192.343,-55.053],[-195.768,-56.025],[-192.914,-58.152],[-193.049,-61.71],[-190.143,-59.653]],c:!0},ix:2},nm:"Path 5",mn:"ADBE Vector Shape - Group",hd:!1},{ind:5,ty:"sh",ix:6,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],v:[[-218.163,24.737],[-217.768,28.275],[-214.63,29.955],[-217.872,31.424],[-218.501,34.928],[-220.901,32.298],[-224.427,32.783],[-222.667,29.689],[-224.219,26.485],[-220.732,27.202]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[1,0,.510000011968,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[1042.709,317.187],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 12",np:7,cix:2,ix:6,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[-22.312,-4.312],[-3.643,.295],[-3.585,18.548],[-17.953,1.453],[3.764,.727],[4.312,-22.311]],o:[[3.764,.728],[-16.118,-8.037],[3.584,-18.548],[-3.271,-1.631],[-22.312,-4.312],[-4.312,22.312]],v:[[5.359,42.102],[16.505,42.713],[-5.513,-1.906],[31.545,-35.108],[20.972,-38.695],[-27.233,-6.104]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[1,0,.510000011968,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[510.977,370.645],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 18",np:2,cix:2,ix:1,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[-4.312,22.312],[-22.312,-4.311],[4.312,-22.312],[22.312,4.312]],o:[[4.312,-22.312],[22.311,4.312],[-4.312,22.311],[-22.312,-4.312]],v:[[-40.399,-7.804],[7.808,-40.396],[40.399,7.811],[-7.807,40.403]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[1,0,.510000011968,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[524.142,372.345],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:22,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 19",np:2,cix:2,ix:2,mn:"ADBE Vector Group",hd:!1},{ty:"tr",p:{a:1,k:[{i:{x:.667,y:1},o:{x:.333,y:0},n:"0p667_1_0p333_0",t:0,s:[800,800],e:[931,1073.057],to:[0,0],ti:[0,0]},{i:{x:.667,y:1},o:{x:.333,y:0},n:"0p667_1_0p333_0",t:59.5,s:[931,1073.057],e:[800,800],to:[0,0],ti:[0,0]},{t:119}],ix:2},a:{a:0,k:[800,800],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 29",np:2,cix:2,ix:7,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[38.523,8.97],[-230.745,0],[-95.449,67.733],[3.477,.695],[.348,-.317],[13.123,5.387],[7.511,2.872],[0,0]],o:[[95.139,194.103],[125.948,0],[-125.297,-32.466],[-2.379,-.476],[-3.985,3.616],[-3.039,.245],[0,0],[-7.207,-1.687]],v:[[-431.725,-163.874],[93.681,163.875],[431.725,56.323],[185.56,-7.199],[115.532,-29.557],[63.406,-40.555],[24.562,-51.73],[-349.787,-144.881]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.093999997307,.081999999402,.275,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[701.274,1195.105],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 20",np:2,cix:2,ix:8,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[35.135,6.162],[35.135,4.107],[37.837,6.162],[13.513,-22.593],[35.135,-6.162],[40.878,12.58],[.948,5.551],[5.064,3.108],[5.234,-.898],[10.272,-1.293],[14.183,-2.234],[15.697,-3.057],[-5.125,.849],[6.734,-7.215],[6.09,-5.54],[3.895,-4.437],[29.325,-19.142],[-230.019,0],[-97.595,186.912]],o:[[0,0],[-35.134,-6.161],[-35.135,-4.108],[-37.838,-6.162],[-13.514,22.593],[-17.567,3.081],[-13.626,-4.193],[-14.781,.278],[-1.114,.926],[5.234,-.898],[-7.348,1.358],[-14.184,2.235],[-15.697,3.055],[-15.761,3.636],[2.19,-2.969],[-6.09,5.54],[-2.649,4.011],[95.494,193.111],[225.459,0],[0,0]],v:[[447.36,-94.731],[317.631,-197.428],[185.2,-178.942],[87.904,-226.183],[-9.392,-232.345],[-66.149,-141.971],[-149.864,-123.281],[-178.089,-145.595],[-206.254,-165.285],[-247.228,-139.212],[-261.584,-137.339],[-297.216,-152.114],[-342.967,-144.127],[-387.681,-163.973],[-420.199,-152.241],[-428.66,-146.171],[-446.297,-127.85],[-521.606,-70.976],[2.902,254.939],[521.606,-59.567]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.442999985639,0,.541000007181,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[791.308,1103.831],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 21",np:2,cix:2,ix:9,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[21.621,40.54],[1.633,6.507],[.562,2.273],[.6,1.386],[1.156,5.68],[-3.045,8.965],[-.966,5.032],[-.907,-.307],[1.613,4.742],[-4.543,.842],[6.825,6.744],[6.766,14.805],[0,-131.165],[-322.971,0],[-20.559,2.187]],o:[[0,0],[0,0],[0,0],[-7.207,-13.513],[-8.496,-12.588],[-2.39,-3.243],[.6,1.386],[-1.848,-7.041],[-5.92,-3.763],[-3.75,-6.814],[-.907,-.307],[-.825,-1.335],[-7.82,-6.929],[3.014,-.751],[-72.924,97.551],[0,322.97],[21.139,0],[0,0]],v:[[54.606,213.274],[2.372,15.521],[-38.168,-43.938],[-81.411,-125.018],[-102.232,-164.057],[-118.248,-194.086],[-124.654,-206.098],[-129.722,-227.213],[-140.87,-273.665],[-152.019,-320.116],[-157.086,-341.231],[-162.026,-353.507],[-174.768,-385.167],[-192.189,-428.458],[-207.573,-467.292],[-323.681,-117.498],[261.11,467.293],[323.681,463.973]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.62400004069,0,.560999971278,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[533.1,891.477],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 22",np:2,cix:2,ix:10,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[-.017,-.013],[-.004,-.001]],o:[[.016,.013],[.003,.001],[0,0]],v:[[-.03,-.02],[.021,.016],[.031,.02]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.093999997307,.081999999402,.275,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[797.595,1106.237],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 23",np:2,cix:2,ix:11,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[.047,-.043],[-.264,-.07]],o:[[.016,-.015],[-.252,-.099]],v:[[-.234,-.028],[.234,.071]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.093999997307,.081999999402,.275,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[944.62,1238.465],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 24",np:2,cix:2,ix:12,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[-.013,.001],[.029,-.002]],o:[[-.013,.001],[.025,-.002]],v:[[59.263,-161.832],[59.202,-161.827]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ind:1,ty:"sh",ix:2,ks:{a:0,k:{i:[[0,0],[0,156.012],[91.957,103.315],[-.184,-.506],[0,0],[25.302,-43.108],[5.549,-13.676],[3.94,-11.368],[-1.114,3.853],[0,0],[6.018,-.522],[.006,0],[.041,-.003],[.233,-.02],[.037,-.003],[-.027,.003],[8.356,-.724],[-.901,1.868],[5.309,-3.94],[13.474,.213],[13.475,.213],[18.839,-10.945],[23.898,-11.992],[27.116,28.895],[0,0]],o:[[99.568,-104.855],[0,-149.192],[-.238,1.066],[-7.201,11.989],[0,0],[-7.784,13.263],[-5.549,13.675],[-3.939,11.367],[-2.76,9.214],[0,0],[.003,0],[-.04,.003],[-.106,.01],[-.035,.003],[.028,-.002],[-2.084,.181],[3.175,-.275],[-1.804,3.736],[5.309,-3.94],[-13.474,-.213],[-13.473,-.213],[-18.839,10.944],[-23.85,11.968],[22.021,24.495],[0,0]],v:[[309.312,395.626],[469.978,-6.979],[322.149,-395.626],[322.009,-393.185],[265.445,-346.479],[111.676,-280.85],[92.913,-239.172],[78.619,-201.045],[69.516,-173.219],[66.322,-162.444],[59.276,-161.833],[59.275,-161.833],[59.154,-161.823],[58.641,-161.778],[58.539,-161.769],[58.614,-161.776],[41.418,-160.285],[16.516,-158.125],[-11.635,-120.69],[-35.215,-121.064],[-79.006,-121.757],[-102.585,-102.13],[-193.534,63.287],[-469.978,100.81],[-282.318,309.802]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"mm",mm:1,nm:"Merge Paths 1",mn:"ADBE Vector Filter - Merge",hd:!1},{ty:"fl",c:{a:0,k:[.275,.019999999626,.447000002394,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[909.022,780.959],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 25",np:4,cix:2,ix:13,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[.112,-.08],[-.069,.033]],o:[[.05,-.036],[-.014,-.005]],v:[[-.09,.054],[.09,-.049]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.275,.019999999626,.447000002394,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[1181.382,428.025],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 26",np:2,cix:2,ix:14,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[-3.183,-3.551],[-.054,-.057]],o:[[.052,.059],[-3.021,-3.36]],v:[[1.509,1.691],[1.674,1.859]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.275,.019999999626,.447000002394,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[437.371,879.909],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 27",np:2,cix:2,ix:15,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,-322.971],[-.113,-4.716],[0,0],[0,0],[-.838,63.885],[0,0],[-.005,.492],[0,.039],[-.001,.098],[0,.04],[-.001,.094],[-.001,.059],[-.001,.094],[0,.04],[0,.09],[0,0],[-.002,.203],[0,.078],[-.001,.077],[0,.079],[0,.065],[0,.079],[0,.065],[-.001,.099],[0,.037],[-.001,.138],[0,.049],[0,.098],[0,.053],[0,.079],[0,.053],[-.001,.099],[0,.052],[0,.138],[322.972,0]],o:[[0,4.744],[0,0],[0,0],[19.758,-57.374],[0,0],[.006,-.491],[.001,-.039],[.001,-.098],[.001,-.039],[.001,-.093],[.001,-.059],[0,-.094],[0,-.039],[.001,-.089],[0,0],[.002,-.203],[0,-.079],[.001,-.078],[0,-.079],[0,-.065],[0,-.079],[.001,-.065],[.001,-.098],[0,-.036],[.001,-.138],[0,-.049],[0,-.099],[0,-.053],[0,-.079],[0,-.053],[0,-.098],[0,-.053],[0,-.138],[0,-322.971],[-322.97,0]],v:[[-584.79,147.487],[-584.616,161.677],[-469.753,437.304],[553.055,337.971],[584.74,155.302],[584.74,155.276],[584.756,153.799],[584.758,153.716],[584.761,153.421],[584.762,153.297],[584.764,153.015],[584.766,152.862],[584.769,152.591],[584.77,152.44],[584.772,152.172],[584.772,152.156],[584.776,151.549],[584.778,151.349],[584.78,151.122],[584.781,150.904],[584.782,150.708],[584.783,150.451],[584.784,150.263],[584.785,149.948],[584.785,149.839],[584.787,149.414],[584.787,149.266],[584.789,148.963],[584.789,148.81],[584.79,148.528],[584.79,148.362],[584.791,148.068],[584.791,147.919],[584.791,147.487],[0,-437.304]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"tr",p:{a:0,k:[0,0],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 1",np:1,cix:2,ix:1,mn:"ADBE Vector Group",hd:!1},{ty:"gf",o:{a:0,k:100,ix:10},r:1,g:{p:5,k:{a:0,k:[0,.075,.067,.224,.206,.124,.063,.298,.283,.173,.059,.373,.642,.427,.029,.437,1,.682,0,.502],ix:9}},s:{a:0,k:[-172,-421],ix:5},e:{a:0,k:[143,46],ix:6},t:1,nm:"Gradient Fill 1",mn:"ADBE Vector Graphic - G-Fill",hd:!1},{ty:"fl",c:{a:0,k:[.5,.5,.5,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[794.209,626.492],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 28",np:3,cix:2,ix:16,mn:"ADBE Vector Group",hd:!1}],ip:0,op:120,st:0,bm:0}],markers:[]};this.params.animationData=t}}]),e}(p.default));e.default=m},function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function n(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),h=function t(e,i,r){null===e&&(e=Function.prototype);var a=Object.getOwnPropertyDescriptor(e,i);if(void 0===a){var s=Object.getPrototypeOf(e);return null===s?void 0:t(s,i,r)}if("value"in a)return a.value;var n=a.get;if(void 0!==n)return n.call(r)},l=i(4),p=r(l),c=i(0),m=(r(c),function(t){function e(){return a(this,e),s(this,(e.__proto__||Object.getPrototypeOf(e)).call(this))}return n(e,t),o(e,[{key:"init",value:function(){h(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this);var t={v:"5.1.15",fr:30,ip:0,op:120,w:900,h:645,nm:"nihon",ddd:0,assets:[{id:"comp_0",layers:[{ddd:0,ind:1,ty:4,nm:"sakura",sr:1,ks:{o:{a:0,k:100,ix:11},r:{a:0,k:0,ix:10},p:{a:0,k:[355,331.5,0],ix:2},a:{a:0,k:[481,324,0],ix:1},s:{a:0,k:[100,100,100],ix:6}},ao:0,shapes:[{ty:"gr",it:[{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[-2.992,-1.51],[.527,-1.381],[.232,-1.193],[.963,.493],[0,0],[.292,-.038],[-.311,2.955],[0,0],[-.199,.215]],o:[[-2.405,1.454],[-.38,.995],[-.907,-1.58],[-3.559,-1.825],[0,0],[1.576,-3.309],[3.802,-1.088],[0,0],[1.368,5.381]],v:[[12.56,4.142],[7.883,8.478],[6.975,11.844],[4.152,8.609],[-5.659,5.825],[-6.109,5.881],[-2.931,-3.991],[5.582,-7.908],[5.893,-8.239]],c:!0},ix:2},nm:"Path 3",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.961000031116,.898000021542,.834999952129,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 2",mn:"ADBE Vector Graphic - Fill",hd:!1},{ind:2,ty:"sh",ix:3,ks:{a:0,k:{i:[[-3.796,-5.881],[-4.721,.652],[-2.999,-2.383],[.023,-2.236],[-3.194,6.229],[-.539,1.564],[-1.518,-.579],[-2.716,4.315],[-2.225,.222],[6.54,2.494],[.303,.139],[-.526,1.671],[0,0],[6.678,2.099],[3.214,-3.518],[3.83,-.084],[1.411,1.736],[-1.523,-6.832],[.145,-.88],[1.209,-.781],[0,0]],o:[[3.503,5.425],[-1.573,5.421],[3.993,3.172],[-.023,2.235],[2.1,-4.092],[1.225,1.794],[6.54,2.494],[2.716,-4.316],[2.225,-.222],[-.364,-.139],[3.017,-1.881],[1.198,-3.816],[0,0],[-6.16,-1.935],[-2.255,-5.175],[-5.098,.111],[-1.411,-1.734],[.415,1.867],[-2.7,-.222],[-3.36,2.169],[0,0]],v:[[-43.552,8.967],[-28.764,19.194],[-27.404,32.882],[-17.229,43.721],[8.302,39.958],[12.607,34.838],[16.728,38.607],[35.462,37.189],[45.122,25.889],[38.589,.923],[37.596,.505],[43.358,-4.991],[44.448,-15.13],[32.725,-34.537],[14.816,-32.955],[5.022,-42.616],[-9.729,-44.453],[-26.965,-25.246],[-26.733,-21.297],[-32.854,-20.554],[-40.169,-13.451]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[1,0,.463000009574,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[575.564,439.757],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 76",np:4,cix:2,ix:1,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[-1.73,-.545],[.16,-.784],[.02,-.658],[.558,.18],[0,0],[.152,-.046],[.092,1.606],[0,0],[-.087,.133]],o:[[-1.158,.987],[-.116,.564],[-.623,-.765],[-2.06,-.664],[0,0],[.552,-1.906],[1.936,-.913],[0,0],[1.202,2.755]],v:[[5.816,-.062],[3.696,2.663],[3.505,4.54],[1.714,3.058],[-3.769,2.427],[-4.005,2.497],[-3.169,-3.054],[1.037,-5.889],[1.173,-6.094]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.961000031116,.898000021542,.834999952129,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 2",mn:"ADBE Vector Graphic - Fill",hd:!1},{ind:2,ty:"sh",ix:3,ks:{a:0,k:{i:[[-2.541,-2.81],[-2.465,.761],[-1.809,-1.011],[-.183,-1.196],[-1.163,3.606],[-.152,.882],[-.861,-.176],[-1.074,2.543],[-1.169,.313],[3.712,.761],[.172,.047],[-.134,.938],[0,0],[3.751,.538],[1.41,-2.16],[2.038,-.379],[.905,.804],[-1.409,-3.517],[.001,-.482],[.578,-.522],[0,0]],o:[[2.345,2.592],[-.366,3.034],[2.41,1.345],[.183,1.196],[.763,-2.369],[.811,.851],[3.712,.762],[1.074,-2.542],[1.169,-.313],[-.207,-.042],[1.447,-1.268],[.307,-2.143],[0,0],[-3.459,-.496],[-1.656,-2.568],[-2.714,.504],[-.906,-.803],[.385,.961],[-1.461,.117],[-1.605,1.453],[0,0]],v:[[-23.737,7.415],[-14.945,11.586],[-13.023,18.78],[-6.641,23.681],[6.669,19.442],[8.521,16.332],[11.051,17.984],[20.935,15.591],[25.109,8.712],[19.439,-4.054],[18.873,-4.19],[21.47,-7.629],[21.167,-13.141],[13.211,-22.484],[3.782,-20.075],[-2.292,-24.381],[-10.333,-24.074],[-17.864,-12.309],[-17.395,-10.221],[-20.6,-9.29],[-23.887,-4.855]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[1,0,.463000009574,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[688.62,289.727],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 78",np:4,cix:2,ix:2,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[-1.804,.186],[-.163,-.783],[-.242,-.612],[.582,-.055],[0,0],[.121,-.102],[.721,1.437],[0,0],[-.028,.156]],o:[[-.671,1.365],[.118,.564],[-.874,-.455],[-2.156,.207],[0,0],[-.248,-1.968],[1.415,-1.606],[0,0],[2.194,2.053]],v:[[3.571,-1.627],[2.705,1.715],[3.273,3.514],[1.044,2.863],[-4.241,4.458],[-4.43,4.615],[-5.863,-.812],[-3.126,-5.083],[-3.081,-5.324]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.961000031116,.898000021542,.834999952129,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 2",mn:"ADBE Vector Graphic - Fill",hd:!1},{ind:2,ty:"sh",ix:3,ks:{a:0,k:{i:[[-3.447,-1.573],[-1.962,1.676],[-2.063,-.211],[-.643,-1.026],[.362,3.772],[.21,.87],[-.86,.179],[.022,2.76],[-.949,.751],[3.709,-.772],[.177,-.024],[.248,.915],[0,0],[3.657,-.993],[.439,-2.542],[1.721,-1.156],[1.15,.379],[-2.688,-2.671],[-.191,-.443],[.323,-.708],[0,0]],o:[[3.18,1.45],[.865,2.931],[2.746,.28],[.642,1.026],[-.238,-2.478],[1.082,.459],[3.709,-.772],[-.022,-2.759],[.95,-.75],[-.207,.043],[.825,-1.738],[-.567,-2.09],[0,0],[-3.373,.915],[-2.538,-1.701],[-2.292,1.539],[-1.149,-.378],[.735,.729],[-1.296,.687],[-.899,1.97],[0,0]],v:[[-20.596,16.952],[-10.87,17.296],[-6.255,23.139],[1.547,25.109],[12.086,15.941],[12.553,12.352],[15.532,12.866],[23.657,6.751],[24.762,-1.219],[14.497,-10.691],[13.923,-10.592],[14.944,-14.779],[12.481,-19.719],[1.473,-25.143],[-6.229,-19.195],[-13.512,-20.74],[-20.773,-17.271],[-23.023,-3.484],[-21.764,-1.753],[-24.337,.372],[-25.599,5.746]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[1,0,.463000009574,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[729.806,280.703],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 80",np:4,cix:2,ix:3,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[-.169,1.807],[-.799,.008],[-.647,.119],[.058,-.583],[0,0],[-.077,-.138],[1.55,-.428],[0,0],[.148,.057]],o:[[1.209,.925],[.577,-.005],[-.617,.77],[-.217,2.154],[0,0],[-1.979,-.139],[-1.3,-1.701],[0,0],[2.441,-1.752]],v:[[-1.612,-4.306],[1.496,-2.806],[3.372,-3.014],[2.3,-.952],[2.836,4.542],[2.953,4.757],[-2.648,5.107],[-6.305,1.59],[-6.534,1.5]],c:!0},ix:2},nm:"Path 3",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.961000031116,.898000021542,.834999952129,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 2",mn:"ADBE Vector Graphic - Fill",hd:!1},{ind:2,ty:"sh",ix:3,ks:{a:0,k:{i:[[-2.214,3.075],[1.262,2.25],[-.608,1.982],[-1.132,.43],[3.769,.379],[.895,-.037],[.008,.879],[2.712,.515],[.552,1.077],[-.035,-3.789],[.009,-.179],[.947,-.065],[0,0],[-.262,-3.78],[-2.408,-.923],[-.799,-1.914],[.596,-1.054],[-3.143,2.117],[-.472,.101],[-.632,-.455],[0,0]],o:[[2.041,-2.837],[3.043,-.279],[.809,-2.639],[1.131,-.43],[-2.477,-.249],[.662,-.973],[-.036,-3.789],[-2.711,-.516],[-.551,-1.078],[.002,.21],[-1.544,-1.148],[-2.16,.15],[0,0],[.243,3.486],[-2.163,2.16],[1.063,2.547],[-.596,1.054],[.858,-.579],[.421,1.404],[1.758,1.264],[0,0]],v:[[11.909,23.015],[14.138,13.543],[20.767,10.152],[24.219,2.883],[17.277,-9.239],[13.846,-10.395],[14.931,-13.217],[10.514,-22.377],[2.911,-25.012],[-8.379,-16.786],[-8.392,-16.204],[-12.301,-18.021],[-17.625,-16.566],[-25.088,-6.824],[-20.752,1.887],[-23.685,8.732],[-21.695,16.528],[-8.609,21.419],[-6.667,20.521],[-5.083,23.459],[-.057,25.742]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[1,0,.463000009574,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[598.861,335.606],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 82",np:4,cix:2,ix:4,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[-.262,1.795],[-.799,-.033],[-.652,.086],[.089,-.578],[0,0],[-.07,-.143],[1.571,-.347],[0,0],[.145,.066]],o:[[1.159,.985],[.576,.025],[-.656,.736],[-.327,2.14],[0,0],[-1.97,-.242],[-1.209,-1.766],[0,0],[2.528,-1.624]],v:[[-1.113,-4.694],[1.915,-3.036],[3.799,-3.147],[2.621,-1.143],[2.873,4.371],[2.98,4.593],[-2.634,4.653],[-6.103,.953],[-6.327,.85]],c:!0},ix:2},nm:"Path 3",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.961000031116,.898000021542,.834999952129,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 2",mn:"ADBE Vector Graphic - Fill",hd:!1},{ind:2,ty:"sh",ix:3,ks:{a:0,k:{i:[[-2.368,2.957],[1.143,2.311],[-.709,1.948],[-1.152,.371],[3.746,.572],[.895,.009],[-.036,.879],[2.682,.654],[.496,1.104],[.159,-3.785],[.019,-.179],[.948,-.017],[0,0],[-.068,-3.788],[-2.357,-1.048],[-.699,-1.952],[.649,-1.021],[-3.248,1.953],[-.477,.077],[-.608,-.487],[0,0]],o:[[2.185,-2.727],[3.052,-.121],[.944,-2.594],[1.152,-.371],[-2.46,-.377],[.712,-.938],[.161,-3.785],[-2.681,-.655],[-.495,-1.105],[-.009,.211],[-1.484,-1.227],[-2.165,.038],[0,0],[.061,3.495],[-2.27,2.044],[.931,2.598],[-.649,1.022],[.887,-.533],[.348,1.424],[1.689,1.353],[0,0]],v:[[10.981,23.287],[13.698,13.943],[20.492,10.899],[24.313,3.817],[18.005,-8.646],[14.639,-9.978],[15.867,-12.741],[11.929,-22.116],[4.472,-25.139],[-7.226,-17.507],[-7.27,-16.925],[-11.08,-18.941],[-16.472,-17.763],[-24.426,-8.419],[-20.546,.505],[-23.828,7.189],[-22.242,15.077],[-9.427,20.635],[-7.44,19.839],[-6.009,22.855],[-1.108,25.394]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[1,0,.463000009574,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[936.62,398.981],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 84",np:4,cix:2,ix:5,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[-1.804,.186],[-.163,-.783],[-.243,-.612],[.583,-.055],[0,0],[.121,-.102],[.722,1.438],[0,0],[-.028,.156]],o:[[-.672,1.365],[.117,.564],[-.874,-.455],[-2.155,.207],[0,0],[-.249,-1.969],[1.416,-1.606],[0,0],[2.194,2.053]],v:[[3.57,-1.627],[2.704,1.716],[3.273,3.515],[1.042,2.864],[-4.242,4.458],[-4.431,4.616],[-5.865,-.811],[-3.127,-5.081],[-3.082,-5.323]],c:!0},ix:2},nm:"Path 3",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.961000031116,.898000021542,.834999952129,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 2",mn:"ADBE Vector Graphic - Fill",hd:!1},{ind:2,ty:"sh",ix:3,ks:{a:0,k:{i:[[-3.448,-1.572],[-1.961,1.675],[-2.063,-.21],[-.642,-1.026],[.361,3.772],[.211,.87],[-.86,.18],[.022,2.76],[-.95,.751],[3.71,-.773],[.178,-.024],[.248,.915],[0,0],[3.656,-.992],[.439,-2.542],[1.721,-1.156],[1.15,.379],[-2.688,-2.67],[-.191,-.443],[.324,-.708],[0,0]],o:[[3.179,1.45],[.865,2.93],[2.745,.28],[.643,1.026],[-.238,-2.477],[1.083,.459],[3.709,-.772],[-.022,-2.761],[.95,-.751],[-.206,.043],[.826,-1.737],[-.568,-2.09],[0,0],[-3.373,.916],[-2.538,-1.702],[-2.292,1.539],[-1.15,-.378],[.735,.729],[-1.296,.687],[-.898,1.97],[0,0]],v:[[-20.597,16.951],[-10.872,17.297],[-6.256,23.14],[1.545,25.109],[12.085,15.942],[12.551,12.352],[15.53,12.867],[23.656,6.753],[24.761,-1.219],[14.495,-10.69],[13.921,-10.592],[14.943,-14.779],[12.48,-19.719],[1.472,-25.143],[-6.23,-19.193],[-13.513,-20.74],[-20.774,-17.271],[-23.024,-3.483],[-21.765,-1.753],[-24.339,.372],[-25.6,5.747]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[1,0,.463000009574,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[452.422,520.293],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 86",np:4,cix:2,ix:6,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[-1.805,.186],[-.163,-.783],[-.243,-.612],[.583,-.056],[0,0],[.122,-.102],[.721,1.437],[0,0],[-.029,.157]],o:[[-.672,1.365],[.117,.564],[-.875,-.455],[-2.156,.207],[0,0],[-.248,-1.968],[1.415,-1.606],[0,0],[2.194,2.054]],v:[[3.57,-1.626],[2.704,1.716],[3.273,3.515],[1.042,2.864],[-4.242,4.459],[-4.432,4.616],[-5.865,-.811],[-3.127,-5.082],[-3.082,-5.324]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.961000031116,.898000021542,.834999952129,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 2",mn:"ADBE Vector Graphic - Fill",hd:!1},{ind:2,ty:"sh",ix:3,ks:{a:0,k:{i:[[-3.447,-1.572],[-1.961,1.676],[-2.064,-.211],[-.643,-1.027],[.361,3.771],[.211,.87],[-.86,.179],[.021,2.76],[-.949,.751],[3.71,-.772],[.178,-.024],[.249,.916],[0,0],[3.657,-.993],[.439,-2.542],[1.722,-1.156],[1.15,.379],[-2.688,-2.67],[-.19,-.443],[.323,-.708],[0,0]],o:[[3.18,1.451],[.865,2.93],[2.745,.28],[.641,1.025],[-.239,-2.478],[1.082,.459],[3.709,-.772],[-.022,-2.759],[.951,-.751],[-.206,.043],[.826,-1.738],[-.567,-2.089],[0,0],[-3.372,.915],[-2.538,-1.701],[-2.291,1.539],[-1.15,-.379],[.735,.73],[-1.295,.687],[-.899,1.97],[0,0]],v:[[-20.598,16.952],[-10.872,17.297],[-6.256,23.14],[1.546,25.11],[12.085,15.942],[12.551,12.353],[15.53,12.867],[23.656,6.752],[24.76,-1.218],[14.495,-10.691],[13.921,-10.592],[14.942,-14.779],[12.479,-19.718],[1.471,-25.142],[-6.23,-19.194],[-13.514,-20.739],[-20.774,-17.27],[-23.024,-3.484],[-21.766,-1.752],[-24.339,.373],[-25.6,5.747]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[1,0,.463000009574,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[832.365,313.055],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 88",np:4,cix:2,ix:7,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[-1.805,.186],[-.163,-.783],[-.242,-.612],[.582,-.055],[0,0],[.121,-.102],[.721,1.437],[0,0],[-.029,.156]],o:[[-.672,1.365],[.117,.564],[-.874,-.455],[-2.156,.207],[0,0],[-.248,-1.969],[1.415,-1.606],[0,0],[2.193,2.052]],v:[[3.571,-1.627],[2.705,1.715],[3.273,3.514],[1.043,2.863],[-4.241,4.458],[-4.431,4.615],[-5.864,-.812],[-3.126,-5.083],[-3.081,-5.324]],c:!0},ix:2},nm:"Path 3",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.961000031116,.898000021542,.834999952129,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 2",mn:"ADBE Vector Graphic - Fill",hd:!1},{ind:2,ty:"sh",ix:3,ks:{a:0,k:{i:[[-3.447,-1.572],[-1.962,1.676],[-2.063,-.211],[-.642,-1.026],[.362,3.772],[.21,.87],[-.86,.179],[.021,2.76],[-.949,.75],[3.71,-.772],[.178,-.024],[.249,.915],[0,0],[3.657,-.993],[.439,-2.543],[1.721,-1.156],[1.15,.379],[-2.687,-2.671],[-.191,-.443],[.323,-.708],[0,0]],o:[[3.18,1.45],[.865,2.931],[2.746,.28],[.642,1.026],[-.238,-2.478],[1.082,.459],[3.709,-.772],[-.023,-2.76],[.95,-.751],[-.206,.044],[.826,-1.737],[-.567,-2.09],[0,0],[-3.373,.915],[-2.537,-1.702],[-2.291,1.539],[-1.149,-.378],[.736,.729],[-1.295,.687],[-.899,1.97],[0,0]],v:[[-20.597,16.951],[-10.871,17.296],[-6.256,23.139],[1.546,25.109],[12.085,15.941],[12.552,12.352],[15.531,12.866],[23.657,6.751],[24.761,-1.219],[14.496,-10.691],[13.922,-10.592],[14.943,-14.779],[12.48,-19.72],[1.472,-25.143],[-6.23,-19.194],[-13.513,-20.74],[-20.774,-17.271],[-23.024,-3.484],[-21.765,-1.753],[-24.338,.372],[-25.6,5.746]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[1,0,.463000009574,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[759.825,353.224],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 90",np:4,cix:2,ix:8,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[-1.805,.186],[-.163,-.783],[-.242,-.612],[.583,-.055],[0,0],[.122,-.102],[.721,1.438],[0,0],[-.029,.156]],o:[[-.672,1.365],[.117,.564],[-.874,-.455],[-2.156,.207],[0,0],[-.248,-1.969],[1.415,-1.605],[0,0],[2.194,2.052]],v:[[3.57,-1.626],[2.704,1.716],[3.273,3.515],[1.042,2.864],[-4.242,4.459],[-4.432,4.616],[-5.865,-.812],[-3.127,-5.082],[-3.082,-5.323]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.961000031116,.898000021542,.834999952129,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 2",mn:"ADBE Vector Graphic - Fill",hd:!1},{ind:2,ty:"sh",ix:3,ks:{a:0,k:{i:[[-3.446,-1.572],[-1.961,1.676],[-2.063,-.211],[-.643,-1.025],[.361,3.772],[.211,.87],[-.86,.179],[.021,2.76],[-.95,.75],[3.709,-.773],[.177,-.024],[.248,.915],[0,0],[3.658,-.993],[.439,-2.542],[1.722,-1.156],[1.15,.379],[-2.688,-2.671],[-.19,-.443],[.323,-.709],[0,0]],o:[[3.18,1.45],[.866,2.931],[2.745,.28],[.641,1.027],[-.239,-2.478],[1.083,.459],[3.71,-.772],[-.022,-2.76],[.95,-.751],[-.207,.043],[.825,-1.738],[-.567,-2.09],[0,0],[-3.372,.916],[-2.538,-1.701],[-2.291,1.539],[-1.149,-.378],[.735,.729],[-1.295,.687],[-.899,1.97],[0,0]],v:[[-20.598,16.952],[-10.872,17.297],[-6.256,23.14],[1.546,25.109],[12.085,15.942],[12.551,12.353],[15.53,12.867],[23.656,6.752],[24.761,-1.218],[14.496,-10.691],[13.922,-10.592],[14.943,-14.778],[12.479,-19.719],[1.471,-25.143],[-6.23,-19.194],[-13.514,-20.739],[-20.774,-17.27],[-23.024,-3.483],[-21.766,-1.752],[-24.339,.373],[-25.6,5.747]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[1,0,.463000009574,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[727.145,472.836],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 92",np:4,cix:2,ix:9,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[1.904,-2.759],[1.295,.71],[1.149,.394],[-.62,.885],[0,0],[-.002,.293],[-2.885,-.71],[0,0],[-.186,-.228]],o:[[-1.112,-2.582],[-.935,-.511],[1.687,-.683],[2.294,-3.277],[0,0],[3.064,2.011],[.558,3.915],[0,0],[-5.517,.62]],v:[[-6.229,12.492],[-9.885,7.266],[-13.096,5.908],[-9.507,3.554],[-5.411,-5.785],[-5.405,-6.24],[3.941,-1.745],[6.659,7.224],[6.945,7.578]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.961000031116,.898000021542,.834999952129,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 2",mn:"ADBE Vector Graphic - Fill",hd:!1},{ind:2,ty:"sh",ix:3,ks:{a:0,k:{i:[[6.344,-2.958],[-.001,-4.765],[2.771,-2.646],[2.212,.327],[-5.735,-4.015],[-1.476,-.748],[.78,-1.424],[-3.906,-3.28],[.084,-2.235],[-3.364,6.138],[-.18,.28],[-1.584,-.749],[0,0],[-2.99,6.329],[3.046,3.665],[-.441,3.806],[-1.911,1.161],[6.976,-.575],[.852,.264],[.607,1.304],[0,0]],o:[[-5.852,2.729],[-5.156,-2.297],[-3.686,3.522],[-2.211,-.328],[3.766,2.637],[-1.945,.97],[-3.363,6.138],[3.904,3.279],[-.084,2.234],[.187,-.343],[1.452,3.245],[3.617,1.708],[0,0],[2.758,-5.838],[5.434,-1.527],[.585,-5.064],[1.911,-1.161],[-1.906,.158],[.588,-2.644],[-1.69,-3.625],[0,0]],v:[[-3.352,-43.753],[-15.501,-30.5],[-29.247,-31.021],[-41.372,-22.419],[-41.129,3.387],[-36.645,8.348],[-40.94,11.917],[-42.093,30.669],[-32.218,41.781],[-6.594,38.718],[-6.044,37.791],[-1.385,44.249],[8.51,46.711],[29.334,37.747],[30.212,19.789],[41.12,11.406],[44.952,-2.956],[28.277,-22.654],[24.334,-22.961],[24.434,-29.126],[18.396,-37.344]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[1,0,.463000009574,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[687.34,581.264],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 94",np:4,cix:2,ix:10,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[-.337,3.306],[-2.317,7.255],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[7.064,.326],[4.39,.575]],o:[[.519,-5.072],[2.318,-7.254],[0,0],[0,0],[0,0],[0,0],[-7.147,3.02],[0,0],[-2.46,-.114],[-8.211,-1.076]],v:[[-11.013,-25.392],[19.599,-41.388],[20.007,-68.551],[53.972,-101.948],[67.778,-105.29],[80.864,-83.432],[79.065,-48.406],[64.776,-41.704],[16.819,-18.016],[6.356,-13.046]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ind:1,ty:"sh",ix:2,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[-1,1],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[-6.586,4.65],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[4.077,.613],[0,0],[6.517,5.108],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[-1.704,3.178],[2.891,-1.281],[0,0],[1.069,-.265],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[1.132,.171],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[-2.949,-2.881],[0,0],[-6.044,-3.53],[-5.985,-1.23],[0,0],[0,0],[9.095,-9.914],[5.781,-2.564],[2.319,-7.254],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[1,-1],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[-4.077,-.614],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[1.705,-3.177],[-2.891,1.283],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[-2.185,.329],[-4.077,-.614],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[2.95,2.881],[0,0],[2.96,1.73],[0,0],[0,0],[0,0],[-9.095,9.914],[-5.782,2.564],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],v:[[-229.756,81.993],[-240.952,70.008],[-238.292,76.786],[-226.714,92.753],[-226.607,92.878],[-227.056,92.949],[-187.66,151.685],[-186.208,158.923],[-182.032,178.034],[-159.132,174.78],[-163.661,153.104],[-133.051,117.92],[-102.054,114.946],[-41.649,129.474],[-36.626,119.352],[-89.284,101.151],[-92.458,100.053],[-93.789,96.07],[-74.947,62.115],[-56.225,58.31],[-68.552,55.474],[-43.012,38.961],[12.948,4.458],[34.043,4.441],[45.867,33.446],[45.541,40.508],[50.04,35.054],[69.813,42.198],[52.549,29.79],[39.538,-1.109],[30.906,-7.312],[68.193,-32.042],[83.975,-40.534],[104.321,-27.417],[108.222,-7.7],[113.677,-3.2],[143.485,-17.111],[186.263,9.927],[147.794,-24.555],[119.308,-17.803],[115.693,-34.536],[102.979,-46.027],[139.569,-57.922],[180.723,-47.807],[210.967,-46.691],[240.952,-79.706],[214.704,-60.11],[198.068,-55.499],[166.963,-65.574],[128.85,-64.931],[90.541,-58.491],[89.496,-77.228],[98.958,-104.255],[88.063,-92.16],[78.948,-107.995],[81.463,-108.604],[90.516,-108.469],[90.23,-111.454],[113.26,-122.706],[129.936,-137.366],[106.197,-123.034],[78.775,-111.737],[77.047,-111.298],[51.896,-154.992],[27.991,-173.794],[-11.595,-178.034],[-12.304,-174.952],[20.41,-169.049],[46.17,-141.383],[65.607,-108.915],[60.367,-108.59],[49.322,-108.534],[10.284,-75.655],[7.76,-91.487],[6.97,-68.305],[7.79,-49.297],[-14.436,-40.132],[-29.503,-29.645],[-32.152,-27.385],[-36.065,-27.901],[-44.904,-50.437],[-36.541,-68.714],[-38.335,-75.553],[-70.652,-81.694],[-89.55,-128.639],[-78.499,-78.172],[-51.443,-66.996],[-58.291,-51.31],[-48.522,-22.439],[-32.961,-17.836],[-9.811,-2.401],[-66.576,34.188],[-90.22,49.516],[-113.18,92.909],[-161.479,102.565],[-176.518,130.781],[-218.312,91.555],[-218.785,91.63],[-223.24,45.202],[-236.522,32.413],[-229.922,48.857]],c:!0},ix:2},nm:"Path 3",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.455000005984,.286000001197,.340999977261,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[703.834,455.611],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"branch",np:3,cix:2,ix:11,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[-3.333,.343],[-.301,-1.446],[-.447,-1.13],[1.076,-.103],[0,0],[.224,-.189],[1.332,2.656],[0,0],[-.052,.289]],o:[[-1.24,2.521],[.217,1.042],[-1.615,-.841],[-3.982,.383],[0,0],[-.458,-3.636],[2.615,-2.967],[0,0],[4.054,3.794]],v:[[6.597,-3.004],[4.997,3.17],[6.048,6.493],[1.927,5.291],[-7.837,8.237],[-8.186,8.528],[-10.833,-1.499],[-5.776,-9.389],[-5.693,-9.836]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.961000031116,.898000021542,.834999952129,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 2",mn:"ADBE Vector Graphic - Fill",hd:!1},{ind:2,ty:"sh",ix:3,ks:{a:0,k:{i:[[-6.37,-2.905],[-3.624,3.095],[-3.811,-.39],[-1.187,-1.896],[.669,6.968],[.389,1.608],[-1.59,.331],[.04,5.098],[-1.754,1.387],[6.852,-1.427],[.329,-.046],[.459,1.691],[0,0],[6.755,-1.834],[.81,-4.696],[3.18,-2.135],[2.124,.7],[-4.966,-4.933],[-.352,-.82],[.597,-1.308],[0,0]],o:[[5.874,2.68],[1.599,5.413],[5.073,.517],[1.186,1.895],[-.438,-4.578],[2,.85],[6.853,-1.426],[-.04,-5.099],[1.755,-1.388],[-.382,.079],[1.525,-3.211],[-1.049,-3.86],[0,0],[-6.231,1.692],[-4.689,-3.143],[-4.233,2.843],[-2.124,-.701],[1.358,1.348],[-2.392,1.268],[-1.66,3.64],[0,0]],v:[[-38.052,31.319],[-20.085,31.957],[-11.557,42.751],[2.857,46.391],[22.327,29.453],[23.191,22.821],[28.694,23.771],[43.706,12.475],[45.747,-2.25],[26.783,-19.752],[25.721,-19.568],[27.609,-27.304],[23.058,-36.431],[2.721,-46.451],[-11.508,-35.461],[-24.965,-38.316],[-38.379,-31.906],[-42.536,-6.437],[-40.211,-3.237],[-44.965,.688],[-47.295,10.617]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[1,0,.463000009574,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[553.681,523.485],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 97",np:4,cix:2,ix:12,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[-1.06,3.18],[-1.443,-.32],[-1.214,-.056],[.349,-1.024],[0,0],[-.08,-.282],[2.969,-.121],[0,0],[.242,.166]],o:[[1.788,2.169],[1.039,.231],[-1.432,1.126],[-1.29,3.786],[0,0],[-3.503,-1.078],[-1.628,-3.605],[0,0],[5.126,-2.134]],v:[[.333,-10.943],[5.302,-6.944],[8.763,-6.535],[5.971,-3.273],[4.639,6.838],[4.76,7.276],[-5.468,5.563],[-10.578,-2.293],[-10.951,-2.552]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.961000031116,.898000021542,.834999952129,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 2",mn:"ADBE Vector Graphic - Fill",hd:!1},{ind:2,ty:"sh",ix:3,ks:{a:0,k:{i:[[-5.267,4.61],[1.33,4.576],[-1.922,3.314],[-2.215,.302],[6.625,2.257],[1.626,.307],[-.352,1.585],[4.663,2.06],[.542,2.169],[1.52,-6.833],[.094,-.318],[1.731,.278],[0,0],[1.107,-6.911],[-3.948,-2.67],[-.638,-3.777],[1.512,-1.648],[-6.539,2.497],[-.891,-.015],[-.947,-1.082],[0,0]],o:[[4.86,-4.252],[5.592,.771],[2.56,-4.41],[2.215,-.301],[-4.354,-1.484],[1.598,-1.473],[1.52,-6.833],[-4.664,-2.062],[-.542,-2.17],[-.084,.381],[-2.298,-2.711],[-3.949,-.633],[0,0],[-1.022,6.375],[-4.794,2.981],[.85,5.029],[-1.511,1.648],[1.787,-.682],[.171,2.704],[2.634,3.01],[0,0]],v:[[13.242,43.875],[21.217,27.761],[34.563,24.43],[43.812,12.791],[36.388,-11.924],[30.698,-15.44],[33.829,-20.064],[29.711,-38.395],[17.13,-46.315],[-6.627,-36.231],[-6.896,-35.189],[-13.169,-40.092],[-23.359,-39.7],[-40.861,-25.288],[-36.698,-7.797],[-44.839,3.293],[-44.516,18.156],[-23.013,32.425],[-19.141,31.622],[-17.518,37.571],[-9.429,43.78]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[1,0,.463000009574,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[864.297,410.211],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 99",np:4,cix:2,ix:13,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[-1.805,.186],[-.163,-.783],[-.242,-.612],[.583,-.055],[0,0],[.122,-.102],[.721,1.438],[0,0],[-.029,.156]],o:[[-.672,1.365],[.117,.564],[-.874,-.455],[-2.156,.207],[0,0],[-.248,-1.969],[1.415,-1.606],[0,0],[2.194,2.053]],v:[[3.571,-1.627],[2.705,1.715],[3.273,3.514],[1.043,2.863],[-4.241,4.458],[-4.431,4.615],[-5.865,-.812],[-3.126,-5.082],[-3.081,-5.324]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.769000004787,.722000002394,.677999997606,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 2",mn:"ADBE Vector Graphic - Fill",hd:!1},{ind:2,ty:"sh",ix:3,ks:{a:0,k:{i:[[-3.446,-1.572],[-1.961,1.675],[-2.063,-.21],[-.643,-1.026],[.361,3.772],[.211,.87],[-.86,.18],[.021,2.76],[-.95,.751],[3.709,-.773],[.177,-.024],[.248,.915],[0,0],[3.658,-.992],[.439,-2.542],[1.722,-1.156],[1.15,.379],[-2.688,-2.67],[-.19,-.443],[.323,-.708],[0,0]],o:[[3.18,1.45],[.866,2.93],[2.745,.28],[.641,1.026],[-.239,-2.477],[1.083,.459],[3.71,-.772],[-.022,-2.761],[.95,-.751],[-.207,.043],[.825,-1.737],[-.567,-2.09],[0,0],[-3.372,.916],[-2.538,-1.702],[-2.291,1.539],[-1.149,-.378],[.735,.729],[-1.295,.687],[-.899,1.97],[0,0]],v:[[-20.597,16.951],[-10.871,17.297],[-6.255,23.139],[1.547,25.109],[12.086,15.941],[12.552,12.352],[15.531,12.866],[23.657,6.753],[24.762,-1.219],[14.497,-10.691],[13.923,-10.593],[14.944,-14.779],[12.48,-19.72],[1.471,-25.144],[-6.229,-19.194],[-13.513,-20.74],[-20.773,-17.271],[-23.023,-3.484],[-21.766,-1.753],[-24.339,.372],[-25.599,5.746]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[1,0,.463000009574,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[683.005,463.007],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 101",np:4,cix:2,ix:14,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[-3.334,.343],[-.3,-1.447],[-.448,-1.13],[1.077,-.103],[0,0],[.224,-.189],[1.331,2.656],[0,0],[-.052,.289]],o:[[-1.241,2.521],[.218,1.042],[-1.615,-.841],[-3.981,.383],[0,0],[-.458,-3.636],[2.615,-2.967],[0,0],[4.054,3.794]],v:[[6.598,-3.004],[4.997,3.17],[6.049,6.493],[1.927,5.291],[-7.836,8.237],[-8.185,8.528],[-10.832,-1.499],[-5.775,-9.389],[-5.692,-9.836]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.961000031116,.898000021542,.834999952129,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 2",mn:"ADBE Vector Graphic - Fill",hd:!1},{ind:2,ty:"sh",ix:3,ks:{a:0,k:{i:[[-6.369,-2.905],[-3.623,3.095],[-3.811,-.389],[-1.187,-1.896],[.669,6.968],[.388,1.608],[-1.59,.331],[.04,5.098],[-1.754,1.387],[6.853,-1.427],[.329,-.046],[.459,1.691],[0,0],[6.755,-1.835],[.809,-4.696],[3.18,-2.135],[2.123,.699],[-4.967,-4.933],[-.353,-.82],[.597,-1.308],[0,0]],o:[[5.875,2.68],[1.6,5.413],[5.072,.518],[1.185,1.895],[-.439,-4.578],[2,.85],[6.853,-1.426],[-.04,-5.099],[1.754,-1.387],[-.382,.079],[1.525,-3.211],[-1.049,-3.86],[0,0],[-6.231,1.692],[-4.69,-3.143],[-4.233,2.842],[-2.124,-.701],[1.358,1.348],[-2.393,1.268],[-1.66,3.64],[0,0]],v:[[-38.052,31.319],[-20.085,31.957],[-11.556,42.75],[2.858,46.391],[22.328,29.453],[23.192,22.821],[28.695,23.771],[43.707,12.475],[45.748,-2.251],[26.783,-19.752],[25.722,-19.568],[27.61,-27.304],[23.059,-36.431],[2.722,-46.451],[-11.507,-35.461],[-24.964,-38.316],[-38.378,-31.906],[-42.535,-6.437],[-40.21,-3.237],[-44.964,.688],[-47.294,10.617]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[1,0,.463000009574,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[690.1,374.775],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 103",np:4,cix:2,ix:15,mn:"ADBE Vector Group",hd:!1},{ty:"tr",p:{a:0,k:[0,0],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"sakura",np:15,cix:2,ix:1,mn:"ADBE Vector Group",hd:!1}],ip:0,op:120,st:0,bm:0},{ddd:0,ind:2,ty:4,nm:"castle",sr:1,ks:{o:{a:0,k:100,ix:11},r:{a:0,k:0,ix:10},p:{a:0,k:[400,326.5,0],ix:2},a:{a:0,k:[481,324,0],ix:1},s:{a:0,k:[100,100,100],ix:6}},ao:0,hasMask:!0,masksProperties:[{inv:!1,mode:"a",pt:{a:0,k:{i:[[0,-176.731],[176.73,0],[0,176.731],[-176.731,0]],o:[[0,176.731],[-176.731,0],[0,-176.731],[176.73,0]],v:[[766.577,320.5],[446.577,640.5],[126.577,320.5],[446.577,.5]],c:!0},ix:1},o:{a:0,k:100,ix:3},x:{a:0,k:0,ix:4},nm:"Mask 1"}],shapes:[{ty:"gr",it:[{ty:"gr",it:[{ty:"gr",it:[{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-7.5,8.645],[7.5,8.645],[7.5,5.187],[-7.5,5.187]],c:!0},ix:2},nm:"Path 4",mn:"ADBE Vector Shape - Group",hd:!1},{ind:1,ty:"sh",ix:2,ks:{a:0,k:{i:[[0,0],[.965,.935],[0,0],[.357,-1.334]],o:[[-.356,-1.334],[0,0],[-.966,.935],[0,0]],v:[[7.239,-5.187],[5.205,-8.645],[-5.205,-8.645],[-7.24,-5.187]],c:!0},ix:2},nm:"Path 3",mn:"ADBE Vector Shape - Group",hd:!1},{ind:2,ty:"sh",ix:3,ks:{a:0,k:{i:[[0,0],[-1.101,-.893],[0,0],[-.46,1.369]],o:[[.459,1.369],[0,0],[1.101,-.893],[0,0]],v:[[-7.109,12.102],[-4.707,15.56],[4.706,15.56],[7.109,12.102]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ind:3,ty:"sh",ix:4,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-7.5,1.729],[7.5,1.729],[7.5,-1.729],[-7.5,-1.729]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[1,0,.463000009574,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[319.5,403.765],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 4",np:5,cix:2,ix:1,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[4.125,0],[0,0],[0,4.125],[0,0],[-4.125,0],[0,-4.125],[0,0]],o:[[0,0],[-4.125,0],[0,0],[0,-4.125],[4.125,0],[0,0],[0,4.125]],v:[[0,14],[0,14],[-7.5,6.5],[-7.5,-6.501],[0,-14],[7.5,-6.501],[7.5,6.5]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-319.5,240.378],[641.647,240.378],[641.647,-407.001],[-319.5,-407.001]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ind:1,ty:"sh",ix:2,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-319.5,-407.001],[641.647,-407.001],[641.647,240.378],[-319.5,240.378]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"tr",p:{a:0,k:[0,0],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 1",np:2,cix:2,ix:2,mn:"ADBE Vector Group",hd:!1},{ty:"mm",mm:4,nm:"Merge Paths 1",mn:"ADBE Vector Filter - Merge",hd:!1},{ty:"fl",c:{a:0,k:[1,.451000019148,.725,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[319.5,407.001],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 6",np:4,cix:2,ix:2,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[1.888,0],[0,0],[0,1.889],[0,0],[-1.888,0],[0,0],[0,-1.887],[0,0]],o:[[0,0],[-1.888,0],[0,0],[0,-1.887],[0,0],[1.888,0],[0,0],[0,1.889]],v:[[.339,15.059],[-.339,15.059],[-3.772,11.625],[-3.772,-11.627],[-.339,-15.059],[.339,-15.059],[3.772,-11.627],[3.772,11.625]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-319.595,240.319],[641.552,240.319],[641.552,-407.06],[-319.595,-407.06]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ind:1,ty:"sh",ix:2,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-319.595,-407.06],[641.552,-407.06],[641.552,240.319],[-319.595,240.319]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"tr",p:{a:0,k:[0,0],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 1",np:2,cix:2,ix:2,mn:"ADBE Vector Group",hd:!1},{ty:"mm",mm:4,nm:"Merge Paths 1",mn:"ADBE Vector Filter - Merge",hd:!1},{ty:"fl",c:{a:0,k:[1,0,.463000009574,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[319.595,407.06],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 7",np:4,cix:2,ix:3,mn:"ADBE Vector Group",hd:!1},{ty:"tr",p:{a:0,k:[555.579,455.934],ix:2},a:{a:0,k:[480.573,323.69],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"lantern3",np:3,cix:2,ix:1,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-7.5,8.645],[7.5,8.645],[7.5,5.187],[-7.5,5.187]],c:!0},ix:2},nm:"Path 4",mn:"ADBE Vector Shape - Group",hd:!1},{ind:1,ty:"sh",ix:2,ks:{a:0,k:{i:[[0,0],[.965,.935],[0,0],[.357,-1.334]],o:[[-.356,-1.334],[0,0],[-.966,.935],[0,0]],v:[[7.239,-5.187],[5.205,-8.645],[-5.205,-8.645],[-7.24,-5.187]],c:!0},ix:2},nm:"Path 3",mn:"ADBE Vector Shape - Group",hd:!1},{ind:2,ty:"sh",ix:3,ks:{a:0,k:{i:[[0,0],[-1.101,-.893],[0,0],[-.46,1.369]],o:[[.459,1.369],[0,0],[1.101,-.893],[0,0]],v:[[-7.109,12.102],[-4.707,15.56],[4.706,15.56],[7.109,12.102]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ind:3,ty:"sh",ix:4,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-7.5,1.729],[7.5,1.729],[7.5,-1.729],[-7.5,-1.729]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[1,0,.463000009574,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[319.5,403.765],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 4",np:5,cix:2,ix:1,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[4.125,0],[0,0],[0,4.125],[0,0],[-4.125,0],[0,-4.125],[0,0]],o:[[0,0],[-4.125,0],[0,0],[0,-4.125],[4.125,0],[0,0],[0,4.125]],v:[[0,14],[0,14],[-7.5,6.5],[-7.5,-6.501],[0,-14],[7.5,-6.501],[7.5,6.5]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-319.5,240.378],[641.647,240.378],[641.647,-407.001],[-319.5,-407.001]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ind:1,ty:"sh",ix:2,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-319.5,-407.001],[641.647,-407.001],[641.647,240.378],[-319.5,240.378]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"tr",p:{a:0,k:[0,0],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 1",np:2,cix:2,ix:2,mn:"ADBE Vector Group",hd:!1},{ty:"mm",mm:4,nm:"Merge Paths 1",mn:"ADBE Vector Filter - Merge",hd:!1},{ty:"fl",c:{a:0,k:[1,.451000019148,.725,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[319.5,407.001],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 6",np:4,cix:2,ix:2,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[1.888,0],[0,0],[0,1.889],[0,0],[-1.888,0],[0,0],[0,-1.887],[0,0]],o:[[0,0],[-1.888,0],[0,0],[0,-1.887],[0,0],[1.888,0],[0,0],[0,1.889]],v:[[.339,15.059],[-.339,15.059],[-3.772,11.625],[-3.772,-11.627],[-.339,-15.059],[.339,-15.059],[3.772,-11.627],[3.772,11.625]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-319.595,240.319],[641.552,240.319],[641.552,-407.06],[-319.595,-407.06]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ind:1,ty:"sh",ix:2,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-319.595,-407.06],[641.552,-407.06],[641.552,240.319],[-319.595,240.319]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"tr",p:{a:0,k:[0,0],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 1",np:2,cix:2,ix:2,mn:"ADBE Vector Group",hd:!1},{ty:"mm",mm:4,nm:"Merge Paths 1",mn:"ADBE Vector Filter - Merge",hd:!1},{ty:"fl",c:{a:0,k:[1,0,.463000009574,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[319.595,407.06],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 7",np:4,cix:2,ix:3,mn:"ADBE Vector Group",hd:!1},{ty:"tr",p:{a:0,k:[513.073,385.69],ix:2},a:{a:0,k:[480.573,323.69],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"lantern2",np:3,cix:2,ix:2,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-7.5,8.645],[7.5,8.645],[7.5,5.187],[-7.5,5.187]],c:!0},ix:2},nm:"Path 4",mn:"ADBE Vector Shape - Group",hd:!1},{ind:1,ty:"sh",ix:2,ks:{a:0,k:{i:[[0,0],[.965,.935],[0,0],[.357,-1.334]],o:[[-.356,-1.334],[0,0],[-.966,.935],[0,0]],v:[[7.239,-5.187],[5.205,-8.645],[-5.205,-8.645],[-7.24,-5.187]],c:!0},ix:2},nm:"Path 3",mn:"ADBE Vector Shape - Group",hd:!1},{ind:2,ty:"sh",ix:3,ks:{a:0,k:{i:[[0,0],[-1.101,-.893],[0,0],[-.46,1.369]],o:[[.459,1.369],[0,0],[1.101,-.893],[0,0]],v:[[-7.109,12.102],[-4.707,15.56],[4.706,15.56],[7.109,12.102]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ind:3,ty:"sh",ix:4,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-7.5,1.729],[7.5,1.729],[7.5,-1.729],[-7.5,-1.729]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[1,0,.463000009574,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[319.5,403.765],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 4",np:5,cix:2,ix:1,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[4.125,0],[0,0],[0,4.125],[0,0],[-4.125,0],[0,-4.125],[0,0]],o:[[0,0],[-4.125,0],[0,0],[0,-4.125],[4.125,0],[0,0],[0,4.125]],v:[[0,14],[0,14],[-7.5,6.5],[-7.5,-6.501],[0,-14],[7.5,-6.501],[7.5,6.5]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-319.5,240.378],[641.647,240.378],[641.647,-407.001],[-319.5,-407.001]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ind:1,ty:"sh",ix:2,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-319.5,-407.001],[641.647,-407.001],[641.647,240.378],[-319.5,240.378]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"tr",p:{a:0,k:[0,0],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 1",np:2,cix:2,ix:2,mn:"ADBE Vector Group",hd:!1},{ty:"mm",mm:4,nm:"Merge Paths 1",mn:"ADBE Vector Filter - Merge",hd:!1},{ty:"fl",c:{a:0,k:[1,.451000019148,.725,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[319.5,407.001],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 6",np:4,cix:2,ix:2,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[1.888,0],[0,0],[0,1.889],[0,0],[-1.888,0],[0,0],[0,-1.887],[0,0]],o:[[0,0],[-1.888,0],[0,0],[0,-1.887],[0,0],[1.888,0],[0,0],[0,1.889]],v:[[.339,15.059],[-.339,15.059],[-3.772,11.625],[-3.772,-11.627],[-.339,-15.059],[.339,-15.059],[3.772,-11.627],[3.772,11.625]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-319.595,240.319],[641.552,240.319],[641.552,-407.06],[-319.595,-407.06]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ind:1,ty:"sh",ix:2,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-319.595,-407.06],[641.552,-407.06],[641.552,240.319],[-319.595,240.319]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"tr",p:{a:0,k:[0,0],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 1",np:2,cix:2,ix:2,mn:"ADBE Vector Group",hd:!1},{ty:"mm",mm:4,nm:"Merge Paths 1",mn:"ADBE Vector Filter - Merge",hd:!1},{ty:"fl",c:{a:0,k:[1,0,.463000009574,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[319.595,407.06],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 7",np:4,cix:2,ix:3,mn:"ADBE Vector Group",hd:!1},{ty:"tr",p:{a:0,k:[480.573,323.69],ix:2},a:{a:0,k:[480.573,323.69],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"lantern1",np:3,cix:2,ix:3,mn:"ADBE Vector Group",hd:!1},{ty:"tr",p:{a:0,k:[0,0],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"lanterns",np:3,cix:2,ix:1,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[6.87,25.897],[20.611,-4.934],[0,0]],o:[[-4.122,27.131],[-20.609,4.932],[0,0]],v:[[9.618,-30.831],[-78.319,25.898],[98.929,25.898]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ind:1,ty:"sh",ix:2,ks:{a:0,k:{i:[[4.751,19.957],[14.255,-3.801],[0,0]],o:[[-2.851,20.907],[2.45,4.752],[0,0]],v:[[105.105,53.749],[44.284,97.464],[166.876,97.464]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ind:2,ty:"sh",ix:3,ks:{a:0,k:{i:[[0,-13.646],[13.646,0],[0,13.646],[-13.646,0]],o:[[0,13.646],[-13.646,0],[0,-13.646],[13.646,0]],v:[[35.568,-138.217],[10.86,-113.509],[-13.849,-138.217],[10.86,-162.925]],c:!0},ix:2},nm:"Path 3",mn:"ADBE Vector Shape - Group",hd:!1},{ind:3,ty:"sh",ix:4,ks:{a:0,k:{i:[[4.751,19.957],[14.255,-3.801],[0,0]],o:[[-2.851,20.907],[-14.255,3.802],[0,0]],v:[[-85.91,53.749],[-146.731,97.464],[-24.139,97.464]],c:!0},ix:2},nm:"Path 4",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.4,.078000005086,.238999998803,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[215.769,434.926],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 35",np:5,cix:2,ix:1,mn:"ADBE Vector Group",hd:!1},{ty:"tr",p:{a:0,k:[480.573,323.69],ix:2},a:{a:0,k:[480.573,323.69],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"eaves",np:1,cix:2,ix:2,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[.142,1.616],[.89,1.49],[1.404,1.267],[.598,.454],[.54,.318],[.513,.223],[.511,.189],[0,0],[0,0],[0,0],[0,0],[0,0],[-.578,-.282],[-.985,-.888],[-.568,-1.094],[.029,-1.207],[.691,-1.309],[1.498,-1.351],[2.514,-.31],[0,0],[-.043,-.003],[-1.801,.702],[-1.801,1.626],[-.73,1.686]],o:[[-.143,-1.616],[-.892,-1.487],[-.682,-.615],[-.597,-.453],[-.541,-.315],[-.512,-.223],[0,0],[0,0],[0,0],[0,0],[0,0],[.303,.102],[.579,.282],[1.025,.925],[.569,1.096],[-.028,1.206],[-.693,1.308],[-2.409,2.173],[0,0],[.044,.003],[1.802,.104],[1.802,-.701],[1.859,-1.676],[.73,-1.685]],v:[[7.781,-.758],[6.231,-5.416],[2.788,-9.547],[.868,-11.151],[-.838,-12.306],[-2.417,-13.113],[-3.952,-13.729],[-7.923,-10.148],[-7.923,-8.534],[-6.996,-7.699],[-4.009,-10.394],[-3.042,-10.547],[-1.72,-9.97],[.626,-8.213],[3.016,-5.185],[3.827,-1.733],[2.746,2.04],[-.539,6.03],[-7.923,9.749],[-7.923,13.61],[-7.793,13.625],[-2.389,12.727],[3.016,9.237],[6.899,4.194]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ind:1,ty:"sh",ix:2,ks:{a:0,k:{i:[[0,0],[2.323,2.097],[.692,1.308],[.028,1.206],[-.569,1.096],[-1.024,.924],[-.578,.282],[-.303,.102],[0,0],[0,0],[0,0],[0,0],[0,0],[.512,-.222],[.541,-.316],[.598,-.453],[.683,-.616],[.892,-1.487],[.142,-1.616],[-.73,-1.685],[-1.859,-1.675],[-1.802,-.701],[-1.756,.081]],o:[[-2.421,-.363],[-1.498,-1.351],[-.692,-1.309],[-.029,-1.207],[.567,-1.095],[.986,-.888],[.579,-.282],[0,0],[0,0],[0,0],[0,0],[0,0],[-.51,.189],[-.512,.223],[-.541,.317],[-.598,.454],[-1.404,1.266],[-.891,1.489],[-.143,1.616],[.73,1.685],[1.801,1.626],[1.756,.683],[0,0]],v:[[-125.612,9.711],[-132.728,6.029],[-136.013,2.04],[-137.094,-1.733],[-136.283,-5.185],[-133.894,-8.213],[-131.548,-9.97],[-130.226,-10.547],[-129.258,-10.394],[-126.271,-7.699],[-125.612,-8.294],[-125.612,-10.389],[-129.316,-13.729],[-130.851,-13.114],[-132.429,-12.306],[-134.136,-11.151],[-136.056,-9.547],[-139.498,-5.416],[-141.048,-.758],[-140.166,4.194],[-136.283,9.236],[-130.879,12.727],[-125.612,13.625]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ind:2,ty:"sh",ix:3,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-9.252,201.045],[-17.805,201.045],[-17.805,188.691],[-9.252,188.691]],c:!0},ix:2},nm:"Path 3",mn:"ADBE Vector Shape - Group",hd:!1},{ind:3,ty:"sh",ix:4,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-19.705,201.045],[-28.258,201.045],[-28.258,188.691],[-19.705,188.691]],c:!0},ix:2},nm:"Path 4",mn:"ADBE Vector Shape - Group",hd:!1},{ind:4,ty:"sh",ix:5,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-57.877,201.045],[-66.43,201.045],[-66.43,188.691],[-57.877,188.691]],c:!0},ix:2},nm:"Path 5",mn:"ADBE Vector Shape - Group",hd:!1},{ind:5,ty:"sh",ix:6,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-68.33,201.045],[-76.883,201.045],[-76.883,188.691],[-68.33,188.691]],c:!0},ix:2},nm:"Path 6",mn:"ADBE Vector Shape - Group",hd:!1},{ind:6,ty:"sh",ix:7,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-106.502,201.045],[-115.055,201.045],[-115.055,188.691],[-106.502,188.691]],c:!0},ix:2},nm:"Path 7",mn:"ADBE Vector Shape - Group",hd:!1},{ind:7,ty:"sh",ix:8,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-116.955,201.045],[-125.508,201.045],[-125.508,188.691],[-116.955,188.691]],c:!0},ix:2},nm:"Path 8",mn:"ADBE Vector Shape - Group",hd:!1},{ind:8,ty:"sh",ix:9,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[4.053,71.8],[-4.5,71.8],[-4.5,59.446],[4.053,59.446]],c:!0},ix:2},nm:"Path 9",mn:"ADBE Vector Shape - Group",hd:!1},{ind:9,ty:"sh",ix:10,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-130.259,71.8],[-138.812,71.8],[-138.812,59.446],[-130.259,59.446]],c:!0},ix:2},nm:"Path 10",mn:"ADBE Vector Shape - Group",hd:!1},{ind:10,ty:"sh",ix:11,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[9.259,130.72],[.706,130.72],[.706,118.366],[9.259,118.366]],c:!0},ix:2},nm:"Path 11",mn:"ADBE Vector Shape - Group",hd:!1},{ind:11,ty:"sh",ix:12,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-1.195,130.72],[-9.748,130.72],[-9.748,118.366],[-1.195,118.366]],c:!0},ix:2},nm:"Path 12",mn:"ADBE Vector Shape - Group",hd:!1},{ind:12,ty:"sh",ix:13,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-125.011,130.72],[-133.564,130.72],[-133.564,118.366],[-125.011,118.366]],c:!0},ix:2},nm:"Path 13",mn:"ADBE Vector Shape - Group",hd:!1},{ind:13,ty:"sh",ix:14,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-135.187,130.72],[-143.74,130.72],[-143.74,118.366],[-135.187,118.366]],c:!0},ix:2},nm:"Path 14",mn:"ADBE Vector Shape - Group",hd:!1},{ind:14,ty:"sh",ix:15,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[87.999,298.928],[79.446,298.928],[79.446,286.574],[87.999,286.574]],c:!0},ix:2},nm:"Path 15",mn:"ADBE Vector Shape - Group",hd:!1},{ind:15,ty:"sh",ix:16,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[77.545,298.928],[68.992,298.928],[68.992,286.574],[77.545,286.574]],c:!0},ix:2},nm:"Path 16",mn:"ADBE Vector Shape - Group",hd:!1},{ind:16,ty:"sh",ix:17,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[87.999,261.866],[79.446,261.866],[79.446,249.512],[87.999,249.512]],c:!0},ix:2},nm:"Path 17",mn:"ADBE Vector Shape - Group",hd:!1},{ind:17,ty:"sh",ix:18,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[77.545,261.866],[68.992,261.866],[68.992,249.512],[77.545,249.512]],c:!0},ix:2},nm:"Path 18",mn:"ADBE Vector Shape - Group",hd:!1},{ind:18,ty:"sh",ix:19,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[39.374,298.928],[30.821,298.928],[30.821,286.574],[39.374,286.574]],c:!0},ix:2},nm:"Path 19",mn:"ADBE Vector Shape - Group",hd:!1},{ind:19,ty:"sh",ix:20,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[28.92,298.928],[20.367,298.928],[20.367,286.574],[28.92,286.574]],c:!0},ix:2},nm:"Path 20",mn:"ADBE Vector Shape - Group",hd:!1},{ind:20,ty:"sh",ix:21,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[39.374,261.866],[30.821,261.866],[30.821,249.512],[39.374,249.512]],c:!0},ix:2},nm:"Path 21",mn:"ADBE Vector Shape - Group",hd:!1},{ind:21,ty:"sh",ix:22,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[28.92,261.866],[20.367,261.866],[20.367,249.512],[28.92,249.512]],c:!0},ix:2},nm:"Path 22",mn:"ADBE Vector Shape - Group",hd:!1},{ind:22,ty:"sh",ix:23,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-9.252,298.928],[-17.805,298.928],[-17.805,286.574],[-9.252,286.574]],c:!0},ix:2},nm:"Path 23",mn:"ADBE Vector Shape - Group",hd:!1},{ind:23,ty:"sh",ix:24,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-19.705,298.928],[-28.258,298.928],[-28.258,286.574],[-19.705,286.574]],c:!0},ix:2},nm:"Path 24",mn:"ADBE Vector Shape - Group",hd:!1},{ind:24,ty:"sh",ix:25,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-9.252,261.866],[-17.805,261.866],[-17.805,249.512],[-9.252,249.512]],c:!0},ix:2},nm:"Path 25",mn:"ADBE Vector Shape - Group",hd:!1},{ind:25,ty:"sh",ix:26,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-19.705,261.866],[-28.258,261.866],[-28.258,249.512],[-19.705,249.512]],c:!0},ix:2},nm:"Path 26",mn:"ADBE Vector Shape - Group",hd:!1},{ind:26,ty:"sh",ix:27,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-57.877,298.928],[-66.43,298.928],[-66.43,286.574],[-57.877,286.574]],c:!0},ix:2},nm:"Path 27",mn:"ADBE Vector Shape - Group",hd:!1},{ind:27,ty:"sh",ix:28,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-68.33,298.928],[-76.883,298.928],[-76.883,286.574],[-68.33,286.574]],c:!0},ix:2},nm:"Path 28",mn:"ADBE Vector Shape - Group",hd:!1},{ind:28,ty:"sh",ix:29,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-57.877,261.866],[-66.43,261.866],[-66.43,249.512],[-57.877,249.512]],c:!0},ix:2},nm:"Path 29",mn:"ADBE Vector Shape - Group",hd:!1},{ind:29,ty:"sh",ix:30,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-68.33,261.866],[-76.883,261.866],[-76.883,249.512],[-68.33,249.512]],c:!0},ix:2},nm:"Path 30",mn:"ADBE Vector Shape - Group",hd:!1},{ind:30,ty:"sh",ix:31,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-106.502,298.928],[-115.055,298.928],[-115.055,286.574],[-106.502,286.574]],c:!0},ix:2},nm:"Path 31",mn:"ADBE Vector Shape - Group",hd:!1},{ind:31,ty:"sh",ix:32,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-116.955,298.928],[-125.508,298.928],[-125.508,286.574],[-116.955,286.574]],c:!0},ix:2},nm:"Path 32",mn:"ADBE Vector Shape - Group",hd:!1},{ind:32,ty:"sh",ix:33,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-106.502,261.866],[-115.055,261.866],[-115.055,249.512],[-106.502,249.512]],c:!0},ix:2},nm:"Path 33",mn:"ADBE Vector Shape - Group",hd:!1},{ind:33,ty:"sh",ix:34,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-116.955,261.866],[-125.508,261.866],[-125.508,249.512],[-116.955,249.512]],c:!0},ix:2},nm:"Path 34",mn:"ADBE Vector Shape - Group",hd:!1},{ind:34,ty:"sh",ix:35,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-155.127,298.928],[-163.68,298.928],[-163.68,286.574],[-155.127,286.574]],c:!0},ix:2},nm:"Path 35",mn:"ADBE Vector Shape - Group",hd:!1},{ind:35,ty:"sh",ix:36,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-165.58,298.928],[-174.133,298.928],[-174.133,286.574],[-165.58,286.574]],c:!0},ix:2},nm:"Path 36",mn:"ADBE Vector Shape - Group",hd:!1},{ind:36,ty:"sh",ix:37,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-155.127,261.866],[-163.68,261.866],[-163.68,249.512],[-155.127,249.512]],c:!0},ix:2},nm:"Path 37",mn:"ADBE Vector Shape - Group",hd:!1},{ind:37,ty:"sh",ix:38,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-165.58,261.866],[-174.133,261.866],[-174.133,249.512],[-165.58,249.512]],c:!0},ix:2},nm:"Path 38",mn:"ADBE Vector Shape - Group",hd:!1},{ind:38,ty:"sh",ix:39,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-203.752,298.928],[-212.305,298.928],[-212.305,286.574],[-203.752,286.574]],c:!0},ix:2},nm:"Path 39",mn:"ADBE Vector Shape - Group",hd:!1},{ind:39,ty:"sh",ix:40,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-214.205,298.928],[-222.758,298.928],[-222.758,286.574],[-214.205,286.574]],c:!0},ix:2},nm:"Path 40",mn:"ADBE Vector Shape - Group",hd:!1},{ind:40,ty:"sh",ix:41,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-203.752,261.866],[-212.305,261.866],[-212.305,249.512],[-203.752,249.512]],c:!0},ix:2},nm:"Path 41",mn:"ADBE Vector Shape - Group",hd:!1},{ind:41,ty:"sh",ix:42,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-214.205,261.866],[-222.758,261.866],[-222.758,249.512],[-214.205,249.512]],c:!0},ix:2},nm:"Path 42",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[1,0,.463000009574,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[292.701,288.58],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 21",np:43,cix:2,ix:1,mn:"ADBE Vector Group",hd:!1},{ty:"tr",p:{a:0,k:[0,0],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"windows",np:1,cix:2,ix:3,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[225.321,82.679],[-225.322,82.679],[-186.264,36.113],[186.263,36.113]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ind:1,ty:"sh",ix:2,ks:{a:0,k:{i:[[-16.316,0],[35.414,0],[-2.753,7.603],[0,0],[0,0]],o:[[3.271,7.603],[-27.999,0],[19.796,0],[0,0],[0,0]],v:[[107.087,-174.86],[.559,-168.208],[-106.415,-174.86],[-79.967,-201.469],[79.688,-201.469]],c:!0},ix:2},nm:"Path 4",mn:"ADBE Vector Shape - Group",hd:!1},{ind:2,ty:"sh",ix:3,ks:{a:0,k:{i:[[-16.316,0],[35.414,0],[-.889,6.652],[0,0],[0,0]],o:[[.382,5.701],[-32.788,0],[19.796,0],[0,0],[0,0]],v:[[88.118,-221.426],[.597,-214.774],[-87.371,-221.426],[-62.783,-267.042],[63.53,-267.042]],c:!0},ix:2},nm:"Path 3",mn:"ADBE Vector Shape - Group",hd:!1},{ind:3,ty:"sh",ix:4,ks:{a:0,k:{i:[[-16.316,0],[-35.414,0],[-20.117,3.802],[0,0],[0,0]],o:[[15.366,3.802],[35.414,0],[19.797,0],[0,0],[0,0]],v:[[183.017,-40.864],[.463,-34.212],[-182.538,-40.864],[-135.182,-67.473],[135.66,-67.473]],c:!0},ix:2},nm:"Path 6",mn:"ADBE Vector Shape - Group",hd:!1},{ind:4,ty:"sh",ix:5,ks:{a:0,k:{i:[[-16.316,0],[37.63,0],[-2.696,10.453],[0,0],[0,0]],o:[[.476,9.503],[-35.414,0],[19.797,0],[0,0],[0,0]],v:[[145.044,-114.039],[.502,-107.387],[-144.485,-114.039],[-97.129,-140.648],[97.688,-140.648]],c:!0},ix:2},nm:"Path 5",mn:"ADBE Vector Shape - Group",hd:!1},{ind:5,ty:"sh",ix:6,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[182.938,7.602],[-182.938,7.602],[-182.938,-7.603],[182.938,-7.603]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.455000005984,.286000001197,.340999977261,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[225.322,564.701],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"roof",np:7,cix:2,ix:4,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[76.501,-112.613],[-76.501,-112.613],[-76.501,-133.521],[76.501,-133.521]],c:!0},ix:2},nm:"Path 4",mn:"ADBE Vector Shape - Group",hd:!1},{ind:1,ty:"sh",ix:2,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[126.393,24.233],[-126.394,24.233],[-126.394,-24.234],[126.393,-24.234]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ind:2,ty:"sh",ix:3,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[96.458,-44.19],[-96.459,-44.19],[-96.459,-84.104],[96.458,-84.104]],c:!0},ix:2},nm:"Path 3",mn:"ADBE Vector Shape - Group",hd:!1},{ind:3,ty:"sh",ix:4,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[169.16,124.967],[-169.156,124.967],[-169.156,47.99],[169.16,47.99]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.961000031116,.898000021542,.834999952129,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[225.32,476.796],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"walls",np:5,cix:2,ix:5,mn:"ADBE Vector Group",hd:!1},{ty:"tr",p:{a:0,k:[0,0],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"castle",np:5,cix:2,ix:1,mn:"ADBE Vector Group",hd:!1}],ip:0,op:120,st:0,bm:0},{ddd:0,ind:3,ty:4,nm:"nihon Outlines",sr:1,ks:{o:{a:0,k:100,ix:11},r:{a:0,k:0,ix:10},p:{a:0,k:[390,326.5,0],ix:2},a:{a:0,k:[481,324,0],ix:1},s:{a:0,k:[100,100,100],ix:6}},ao:0,shapes:[{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[.39,-.507],[1.371,-1.668],[1.15,-1.351],[.342,-.385],[1.334,-1.369],[1.156,-1.15],[.337,-.278],[.352,-.283],[.29,-.204],[.996,-.606],[.889,-.529],[.214,-.126],[.841,-.487],[.037,-.022],[-2.056,-1.964],[-1.622,0],[-1.622,0],[0,0],[-3.245,-2.487],[-1.622,-2.487],[-1.622,0],[-3.244,2.487],[-1.623,0],[-3.245,0],[-1.622,0],[-3.245,2.487],[.949,3.019],[-1.464,0],[-1.622,2.487],[0,0],[0,0],[.228,.244],[0,0],[.018,.018],[2.044,2.276],[.03,.034],[11.97,18.137],[.003,.005],[.022,.036],[.001,.001],[0,0],[4.866,-7.46],[1.354,-1.999]],o:[[-1.396,1.813],[-.4,.487],[-.303,.357],[-1.131,1.271],[-.411,.421],[-.292,.29],[-1.068,.881],[-1.327,1.066],[-1.209,.85],[-.064,.039],[-.216,.128],[-.88,.521],[-.037,.023],[0,0],[2.056,1.963],[1.622,0],[1.622,0],[0,0],[3.244,2.487],[2.565,3.933],[1.622,0],[3.245,0],[1.622,0],[3.244,0],[1.622,0],[2.947,-2.26],[3.478,2.774],[1.622,0],[1.622,-2.487],[0,0],[-.228,-.242],[0,0],[-.018,-.019],[-2.078,-2.231],[-.03,-.034],[-31.152,-34.704],[-.003,-.005],[-.773,-1.172],[-.001,-.001],[-.03,-.049],[0,0],[-1.336,2.049],[-.377,.557]],v:[[-29.52,-56.136],[-37.978,-45.502],[-42.624,-39.949],[-48.802,-32.849],[-61.97,-18.707],[-66.674,-13.956],[-96.157,12.765],[-100.401,16.223],[-121.695,32.251],[-143.36,46.455],[-146.268,48.202],[-146.911,48.583],[-149.496,50.098],[-149.611,50.167],[-99.826,24.147],[-119.292,63.937],[-67.382,14.199],[-75.493,51.503],[-47.916,36.581],[-56.027,81.345],[-7.362,34.094],[-4.118,68.911],[5.616,16.686],[36.437,81.345],[41.303,11.712],[80.236,61.45],[83.843,39.541],[112.679,56.476],[99.324,16.686],[149.611,50.503],[126.946,24.975],[126.265,24.243],[125.903,23.854],[125.851,23.798],[119.667,17.034],[119.577,16.933],[49.557,-75.023],[49.547,-75.038],[42.979,-85.193],[42.977,-85.195],[42.925,-85.278],[-17.606,-72.791],[-21.645,-66.728]],c:!0},ix:2},nm:"Path 1",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"fl",c:{a:0,k:[.961000031116,.898000021542,.834999952129,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"ADBE Vector Graphic - Fill",hd:!1},{ty:"tr",p:{a:0,k:[448.846,290.89],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"snow",np:2,cix:2,ix:1,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0],[0,0],[-139.013,0],[-51.573,107.541],[47.094,29.622],[0,0],[1.622,-2.487],[0,0]],o:[[0,0],[0,0],[-13.378,7.756],[0,0],[44.168,123.844],[127.234,0],[-34.26,-25.38],[-16.798,-10.564],[0,0],[0,0],[0,0]],v:[[-73.215,-170.441],[-106.612,-146.298],[-152.415,-118.265],[-174.044,-106.958],[-295.083,-31.793],[6.388,180.703],[295.083,-1.099],[174.725,-99.497],[148.768,-116.905],[98.481,-151.722],[71.01,-180.703]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"tr",p:{a:0,k:[0,0],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 1",np:1,cix:2,ix:1,mn:"ADBE Vector Group",hd:!1},{ty:"gf",o:{a:0,k:100,ix:10},r:1,g:{p:3,k:{a:0,k:[.157,.467,.02,.169,.559,.378,.01,.133,.961,.29,0,.098],ix:9}},s:{a:0,k:[8,-178],ix:5},e:{a:0,k:[0,127],ix:6},t:1,nm:"Gradient Fill 1",mn:"ADBE Vector Graphic - G-Fill",hd:!1},{ty:"tr",p:{a:0,k:[451.689,459.298],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"fuji",np:2,cix:2,ix:2,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,-114.247],[-114.248,0],[0,114.248],[114.247,0]],o:[[0,114.248],[114.247,0],[0,-114.247],[-114.248,0]],v:[[-227.681,-11.239],[-20.817,195.625],[186.046,-11.239],[-20.817,-218.104]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"gf",o:{a:0,k:100,ix:10},r:1,g:{p:5,k:{a:0,k:[.091,.984,.227,.545,.204,.973,.31,.633,.318,.961,.392,.722,.659,.975,.612,.759,1,.988,.831,.796],ix:9}},s:{a:0,k:[0,-213],ix:5},e:{a:0,k:[0,199],ix:6},t:1,nm:"Gradient Fill 1",mn:"ADBE Vector Graphic - G-Fill",hd:!1},{ty:"tr",p:{a:0,k:[480.573,323.69],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"sun",np:2,cix:2,ix:3,mn:"ADBE Vector Group",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[176.731,0],[0,-176.731],[-52.016,-56.904],[-137.497,54.866],[0,83.962]],o:[[-176.732,0],[0,83.171],[135.225,56.447],[52.899,-57.082],[0,-176.731]],v:[[-22.496,-323.69],[-342.496,-3.689],[-258.743,212.14],[212.252,213.75],[297.504,-3.689]],c:!0},ix:2},nm:"Path 2",mn:"ADBE Vector Shape - Group",hd:!1},{ty:"gf",o:{a:0,k:100,ix:10},r:1,g:{p:3,k:{a:0,k:[0,.961,.898,.835,.5,.98,.916,.852,1,1,.935,.869],ix:9}},s:{a:0,k:[-2,-322],ix:5},e:{a:0,k:[36,252],ix:6},t:1,nm:"Gradient Fill 1",mn:"ADBE Vector Graphic - G-Fill",hd:!1},{ty:"tr",p:{a:0,k:[480.573,323.69],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"sky",np:2,cix:2,ix:4,mn:"ADBE Vector Group",hd:!1}],ip:0,op:120,st:0,bm:0}]}],layers:[{ddd:0,ind:1,ty:0,nm:"nihon_pre_comp",refId:"comp_0",sr:1,ks:{o:{a:0,k:100,ix:11},r:{a:0,k:0,ix:10},p:{a:0,k:[526,324.5,0],ix:2},a:{a:0,k:[450,322.5,0],ix:1},s:{a:0,k:[90,90,100],ix:6}},ao:0,w:900,h:645,ip:0,op:120,st:0,bm:0}],markers:[]};this.params.animationData=t}}]),e}(p.default));e.default=m},function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function n(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),h=function t(e,i,r){null===e&&(e=Function.prototype);var a=Object.getOwnPropertyDescriptor(e,i);if(void 0===a){var s=Object.getPrototypeOf(e);return null===s?void 0:t(s,i,r)}if("value"in a)return a.value;var n=a.get;if(void 0!==n)return n.call(r)},l=i(4),p=r(l),c=i(0),m=(r(c),function(t){function e(){return a(this,e),s(this,(e.__proto__||Object.getPrototypeOf(e)).call(this))}return n(e,t),o(e,[{key:"init",value:function(){h(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this);var t={v:"5.1.15",fr:30,ip:0,op:119,w:900,h:645,nm:"paragliding",ddd:0,assets:[],layers:[{ddd:0,ind:1,ty:4,nm:"nnnn",sr:1,ks:{o:{a:0,k:100,ix:11},r:{a:0,k:0,ix:10},p:{a:0,k:[466.5,322.5,0],ix:2},a:{a:0,k:[339,320,0],ix:1},s:{a:0,k:[90,90,100],ix:6}},ao:0,shapes:[{ty:"gr",it:[{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[1.234,2.643],[0,0],[0,0],[0,0],[0,0],[9.289,-6.096],[.703,-.513],[0,0],[3.657,2.505],[.708,1.827],[3.475,-1.332],[-1.572,-4.054],[-.574,-.706],[1.017,-15.89],[-5.345,2.249],[-6.653,2.351],[-10.164,7.857],[-1.954,-1.416],[-1.102,2.701],[0,0],[0,0],[0,0],[0,0],[-.251,.159],[0,0],[-2.374,.453]],o:[[0,0],[0,0],[0,0],[0,0],[-1.781,-4.933],[-.736,.482],[0,0],[0,0],[.448,-1.648],[-1.572,-4.055],[-3.475,1.333],[.355,.913],[-3.181,2.022],[0,0],[0,0],[2.6,2.933],[0,0],[1.953,1.416],[0,0],[0,0],[0,0],[0,0],[.267,-.167],[0,0],[0,0],[2.375,-.454]],v:[[34,10.774],[32.767,8.13],[26.669,10.302],[12.806,-.004],[12.552,-.185],[-2.557,-2.832],[-4.715,-1.334],[-12.732,-15.109],[-19.342,-24.358],[-19.673,-29.722],[-28.812,-34.651],[-32.257,-24.897],[-30.842,-22.464],[-35.234,-.272],[-26.807,13.187],[-18.964,12.573],[-1.767,13.839],[4.561,34],[13.71,33.283],[14.812,30.582],[9.056,27.633],[7.178,10.524],[6.78,7.993],[7.557,7.504],[9.138,8.756],[28.281,17.911]],c:!0},ix:2},nm:"p1",mn:"adbe",hd:!1},{ty:"fl",c:{a:0,k:[.984000052658,.592000026329,.046999998654,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"adbe",hd:!1},{ty:"tr",p:{a:0,k:[551.454,514.317],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"guy",np:2,cix:2,ix:1,mn:"adbe",hd:!1},{ty:"gr",it:[{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[.052,.132],[9.96,3.231],[63.214,-18.985],[13.558,-21.444],[-2.094,-58.165],[0,0],[-58.91,39.343],[-36.221,16.731],[-30.142,2.469],[-.456,-.306]],o:[[-2.191,-5.611],[-14.829,-4.81],[-63.214,18.985],[-13.557,21.445],[1.279,35.543],[19.643,-5.374],[40.395,-26.978],[16.604,-7.67],[14.455,-1.184],[-.025,-.131]],v:[[205.932,-154.598],[167.472,-170.766],[7.087,-158.133],[-150.704,-32.618],[-203.967,141.574],[-184.479,164.956],[27.885,-62.056],[119.289,-132.59],[187.138,-148.278],[206.061,-154.203]],c:!0},ix:2},nm:"p1",mn:"adbe",hd:!1},{ty:"fl",c:{a:0,k:[.776000019148,.611999990426,.426999978458,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"adbe",hd:!1},{ty:"tr",p:{a:0,k:[466.253,279.141],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 2",np:2,cix:2,ix:1,mn:"adbe",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[3.969,3.975],[-.025,-.131],[14.455,-1.184],[16.604,-7.67],[2.234,-11.221],[-6.604,5.185],[-3.729,28.045]],o:[[.052,.132],[-.456,-.306],[-30.142,2.469],[10.878,11.977],[-2.313,11.612],[6.605,-5.185],[1.91,-14.375]],v:[[40.532,-38.092],[40.661,-37.697],[21.738,-31.772],[-46.111,-16.084],[-7.507,26.48],[16.072,29.319],[45.511,-11.25]],c:!0},ix:2},nm:"p1",mn:"adbe",hd:!1},{ty:"fl",c:{a:0,k:[.769000004787,.423999980852,.078000005086,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"adbe",hd:!1},{ty:"tr",p:{a:0,k:[631.653,162.636],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 3",np:2,cix:2,ix:2,mn:"adbe",hd:!1},{ty:"tr",p:{a:0,k:[338.882,320],ix:2},a:{a:0,k:[338.882,320],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"wing",np:2,cix:2,ix:2,mn:"adbe",hd:!1},{ty:"gr",it:[{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[0,0]],o:[[0,0],[0,0]],v:[[-1.74,-161.466],[1.739,161.465]],c:!1},ix:2},nm:"p1",mn:"adbe",hd:!1},{ind:1,ty:"sh",ix:2,ks:{a:0,k:{i:[[0,0],[0,0]],o:[[0,0],[0,0]],v:[[134.711,-175.152],[1.739,161.465]],c:!1},ix:2},nm:"p2",mn:"adbe",hd:!1},{ind:2,ty:"sh",ix:3,ks:{a:0,k:{i:[[0,0],[0,0]],o:[[0,0],[0,0]],v:[[92.4,-149.218],[1.739,161.465]],c:!1},ix:2},nm:"p3",mn:"adbe",hd:!1},{ind:3,ty:"sh",ix:4,ks:{a:0,k:{i:[[0,0],[0,0]],o:[[0,0],[0,0]],v:[[-126.32,-48.838],[-17.545,169.696]],c:!1},ix:2},nm:"p6",mn:"adbe",hd:!1},{ind:4,ty:"sh",ix:5,ks:{a:0,k:{i:[[0,0],[0,0]],o:[[0,0],[0,0]],v:[[67.364,-186.707],[1.739,161.465]],c:!1},ix:2},nm:"p4",mn:"adbe",hd:!1},{ind:5,ty:"sh",ix:6,ks:{a:0,k:{i:[[0,0],[0,0]],o:[[0,0],[0,0]],v:[[-221.621,47.334],[-17.544,169.696]],c:!1},ix:2},nm:"p7",mn:"adbe",hd:!1},{ind:6,ty:"sh",ix:7,ks:{a:0,k:{i:[[0,0],[0,0]],o:[[0,0],[0,0]],v:[[-41.9,-127.675],[-17.545,169.697]],c:!1},ix:2},nm:"p5",mn:"adbe",hd:!1},{ind:7,ty:"sh",ix:8,ks:{a:0,k:{i:[[0,0],[0,0]],o:[[0,0],[0,0]],v:[[-250.703,86.117],[-17.544,169.696]],c:!1},ix:2},nm:"p8",mn:"adbe",hd:!1},{ty:"st",c:{a:0,k:[1,1,1,1],ix:3},o:{a:0,k:100,ix:4},w:{a:0,k:3,ix:5},lc:1,lj:1,ml:10,nm:"Stroke 1",mn:"adbe",hd:!1},{ty:"tr",p:{a:0,k:[536.038,344.761],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 4",np:9,cix:2,ix:1,mn:"adbe",hd:!1},{ty:"tr",p:{a:0,k:[0,0],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:22,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"lines",np:1,cix:2,ix:3,mn:"adbe",hd:!1},{ty:"tr",p:{a:1,k:[{i:{x:.667,y:1},o:{x:.333,y:0},n:"0p667_1_0p333_0",t:0,s:[338.882,320],e:[363.882,275],to:[0,0],ti:[0,0]},{i:{x:.667,y:1},o:{x:.333,y:0},n:"0p667_1_0p333_0",t:60,s:[363.882,275],e:[338.882,320],to:[0,0],ti:[0,0]},{t:119}],ix:2},a:{a:0,k:[338.882,320],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:1,k:[{i:{x:[.667],y:[1]},o:{x:[.167],y:[.167]},n:["0p667_1_0p167_0p167"],t:0,s:[0],e:[9]},{i:{x:[.667],y:[1]},o:{x:[.333],y:[0]},n:["0p667_1_0p333_0"],t:30,s:[9],e:[-6.438]},{i:{x:[.833],y:[.833]},o:{x:[.333],y:[0]},n:["0p833_0p833_0p333_0"],t:90,s:[-6.438],e:[0]},{t:119}],ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"pilot",np:3,cix:2,ix:1,mn:"adbe",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[20.552,14.421],[1.11,.105],[.508,-.251],[4.509,-1.999],[2.519,-3.132],[0,-3.85],[-.588,-.091],[8.121,.568],[.128,-.007],[5.965,-.147],[.187,-.045],[3.263,-3.239],[0,-2.127],[-2.943,-1.695],[-.323,-.054],[-5.618,-.992],[-8.026,-.839],[-.064,-.013],[-9.608,-.147],[-.067,-.007],[-10.68,-2.309],[-.099,-.011],[-9.615,1.461],[-.061,.005],[-8.008,1.265],[-.087,.004],[-1.251,.158]],o:[[-1.156,.049],[-.565,-.053],[-6.205,3.065],[-4.694,1.366],[-2.518,4.121],[0,.532],[-9.697,2.779],[-.129,-.009],[-8.058,.469],[-.192,.005],[-5.937,1.44],[-3.314,3.073],[0,1.551],[.284,.165],[3.203,.534],[5.889,1.17],[.065,.007],[8.014,1.561],[.069,.001],[9.613,1.103],[.096,.021],[10.682,1.093],[.06,-.009],[9.6,-.707],[.086,-.014],[1.301,-.059],[-16.614,-18.74]],v:[[23.574,-27.516],[20.173,-27.584],[18.54,-27.276],[2.393,-25.019],[-8.513,-21.873],[-12.377,-18.372],[-11.484,-16.284],[-38.346,-13.257],[-38.731,-13.26],[-59.896,-8.449],[-60.467,-8.376],[-74.4,-2.28],[-79.511,4.84],[-74.98,11.63],[-74.046,11.915],[-60.7,17.965],[-39.694,22.766],[-39.501,22.795],[-12.936,25.93],[-12.732,25.943],[17.837,27.032],[18.131,27.08],[48.707,25.945],[48.89,25.924],[75.433,22.797],[75.692,22.771],[79.512,22.424]],c:!0},ix:2},nm:"p1",mn:"adbe",hd:!1},{ty:"fl",c:{a:0,k:[1,1,1,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"adbe",hd:!1},{ty:"tr",p:{a:0,k:[480.011,85.404],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:33,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"cloud",np:2,cix:2,ix:2,mn:"adbe",hd:!1},{ty:"gr",it:[{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[164.695,-53.869],[-148.071,-.332],[0,0],[0,176.493],[3.306,18.442]],o:[[36.147,136.788],[0,0],[176.405,-.384],[0,-19.393],[-189.152,24.327]],v:[[-314.693,-49.618],[-6.049,188.411],[-4.583,188.411],[314.693,-131.589],[309.659,-188.411]],c:!0},ix:2},nm:"p2",mn:"adbe",hd:!1},{ty:"tr",p:{a:0,k:[0,0],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 1",np:1,cix:2,ix:1,mn:"adbe",hd:!1},{ty:"gf",o:{a:0,k:100,ix:10},r:1,g:{p:3,k:{a:0,k:[0,.643,.576,.435,.5,.482,.449,.378,1,.322,.322,.322],ix:9}},s:{a:0,k:[-14,-101],ix:5},e:{a:0,k:[166,148],ix:6},t:1,nm:"Gradient Fill 1",mn:"adbe-Fill",hd:!1},{ty:"tr",p:{a:0,k:[325.307,451.589],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"ocean",np:2,cix:2,ix:3,mn:"adbe",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[14,9],[30,4],[23,0],[27,-3],[11.201,-3.153],[0,-72.189],[-13.188,-35.047],[0,0]],o:[[-14,-9],[-30,-4],[-23,0],[-8.571,.952],[-40.325,53.54],[0,39.659],[184.757,-48.822],[0,0]],v:[[161,-52.336],[38,-84.336],[-81,-131.336],[-166,-154.336],[-196.762,-147.664],[-261,44.665],[-240.577,157.336],[261,24.664]],c:!0},ix:2},nm:"p1",mn:"adbe",hd:!1},{ty:"fl",c:{a:0,k:[.995999983245,.8,.270999983245,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"adbe",hd:!1},{ty:"tr",p:{a:0,k:[261,275.336],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 15",np:2,cix:2,ix:4,mn:"adbe",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[3.596,13.146],[11.548,4.619],[10,-4],[5,2],[21,0],[16,-13],[0,0],[0,0],[0,0]],o:[[-27.639,-4.158],[-15,-6],[-10,4],[-5,-2],[-21,0],[-16,13],[0,0],[0,0],[-1.904,-13.763]],v:[[228.193,-4.141],[139.53,-20.5],[47.53,-35.5],[16.53,-53.5],[-137.47,-87.5],[-220.47,-95.5],[-233.47,-46.5],[-151.47,108.5],[236.47,36.248]],c:!0},ix:2},nm:"p1",mn:"adbe",hd:!1},{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-400.47,400.5],[277.294,400.5],[277.294,-239.5],[-400.47,-239.5]],c:!0},ix:2},nm:"p1",mn:"adbe",hd:!1},{ind:1,ty:"sh",ix:2,ks:{a:0,k:{i:[[0,0],[0,0],[0,0],[0,0]],o:[[0,0],[0,0],[0,0],[0,0]],v:[[-400.47,-239.5],[277.294,-239.5],[277.294,400.5],[-400.47,400.5]],c:!0},ix:2},nm:"p2",mn:"adbe",hd:!1},{ty:"tr",p:{a:0,k:[0,0],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 1",np:2,cix:2,ix:2,mn:"adbe",hd:!1},{ty:"mm",mm:4,nm:"Merge Paths 1",mn:"adbe",hd:!1},{ty:"fl",c:{a:0,k:[.984000052658,.592000026329,.046999998654,1],ix:4},o:{a:0,k:100,ix:5},r:1,nm:"Fill 1",mn:"adbe",hd:!1},{ty:"tr",p:{a:0,k:[400.47,239.5],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 16",np:4,cix:2,ix:5,mn:"adbe",hd:!1},{ty:"gr",it:[{ty:"gr",it:[{ind:0,ty:"sh",ix:1,ks:{a:0,k:{i:[[151.975,0],[32.664,-142.058],[0,0]],o:[[-151.973,0],[0,0],[-32.664,-142.058]],v:[[-.001,-124],[-311.864,124],[311.864,124]],c:!0},ix:2},nm:"p2",mn:"adbe",hd:!1},{ty:"tr",p:{a:0,k:[0,0],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"Group 1",np:1,cix:2,ix:1,mn:"adbe",hd:!1},{ty:"gf",o:{a:0,k:100,ix:10},r:1,g:{p:3,k:{a:0,k:[0,.976,.906,.835,.5,.978,.847,.696,1,.98,.788,.557],ix:9}},s:{a:0,k:[-14,-165],ix:5},e:{a:0,k:[166,82],ix:6},t:1,nm:"Gradient Fill 1",mn:"adbe-Fill",hd:!1},{ty:"tr",p:{a:0,k:[320,124],ix:2},a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},r:{a:0,k:0,ix:6},o:{a:0,k:100,ix:7},sk:{a:0,k:0,ix:4},sa:{a:0,k:0,ix:5},nm:"Transform"}],nm:"sky",np:2,cix:2,ix:6,mn:"adbe",hd:!1}],ip:0,op:119,st:0,bm:0}],markers:[]};this.params.animationData=t}}]),e}(p.default));e.default=m}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,